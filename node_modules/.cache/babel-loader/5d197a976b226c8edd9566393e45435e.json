{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom';import{ApolloProvider}from'@apollo/react-hooks';import{App}from'./App';import{getAccessToken,setAccessToken}from'./accessToken';import{ApolloClient}from'apollo-client';import{InMemoryCache}from'apollo-cache-inmemory';import{HttpLink}from'apollo-link-http';import{onError}from'apollo-link-error';import{ApolloLink,Observable}from'apollo-link';import{TokenRefreshLink}from'apollo-link-token-refresh';import jwtDecode from'jwt-decode';var cache=new InMemoryCache({});var requestLink=new ApolloLink(function(operation,forward){return new Observable(function(observer){var handle;Promise.resolve(operation).then(function(operation){var accessToken=getAccessToken();if(accessToken){operation.setContext({headers:{authorization:\"bearer \".concat(accessToken)}});}}).then(function(){handle=forward(operation).subscribe({next:observer.next.bind(observer),error:observer.error.bind(observer),complete:observer.complete.bind(observer)});}).catch(observer.error.bind(observer));return function(){if(handle)handle.unsubscribe();};});});var client=new ApolloClient({link:ApolloLink.from([new TokenRefreshLink({accessTokenField:\"accessToken\",isTokenValidOrUndefined:function isTokenValidOrUndefined(){var token=getAccessToken();if(!token){return true;}try{var _jwtDecode=jwtDecode(token),exp=_jwtDecode.exp;if(Date.now()>=exp*1000){return false;}else{return true;}}catch(error){return false;}},fetchAccessToken:function fetchAccessToken(){console.log(\"fetch token \");return fetch(\"http://localhost:4000/refresh_token\",{method:\"POST\",credentials:\"include\"});},handleFetch:function handleFetch(accessToken){setAccessToken(accessToken);},handleError:function handleError(err){console.warn('Your refresh token is invalid. Try to relogin');}}),onError(function(_ref){var graphQLErrors=_ref.graphQLErrors,networkError=_ref.networkError;console.log(graphQLErrors);console.log(networkError);}),requestLink,new HttpLink({uri:'http://localhost:4000/graphql',credentials:'include'})]),cache:cache});ReactDOM.render(React.createElement(ApolloProvider,{client:client},React.createElement(App,null)),document.getElementById('root'));","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/index.tsx"],"names":["React","ReactDOM","ApolloProvider","App","getAccessToken","setAccessToken","ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","Observable","TokenRefreshLink","jwtDecode","cache","requestLink","operation","forward","observer","handle","Promise","resolve","then","accessToken","setContext","headers","authorization","subscribe","next","bind","error","complete","catch","unsubscribe","client","link","from","accessTokenField","isTokenValidOrUndefined","token","exp","Date","now","fetchAccessToken","console","log","fetch","method","credentials","handleFetch","handleError","err","warn","graphQLErrors","networkError","uri","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloProvider} from '@apollo/react-hooks'\nimport {App} from './App';\nimport { getAccessToken, setAccessToken } from './accessToken';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\n\nconst cache = new InMemoryCache({});\n\n\nconst requestLink = new ApolloLink(\n    (operation, forward) => new Observable(observer => {\n    let handle: any;\n    Promise.resolve(operation)\n      .then((operation) => {\n            const accessToken = getAccessToken();\n            if(accessToken){\n                operation.setContext({\n                    headers: {\n                        authorization: `bearer ${accessToken}`\n                    } \n                })\n            }\n        }).then(() => {\n            handle = forward(operation).subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n            });\n        })  \n      .catch(observer.error.bind(observer));\n\n    return () => {\n      if (handle) handle.unsubscribe();\n    };\n  })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n        accessTokenField: \"accessToken\",\n        isTokenValidOrUndefined: () => {           \n            const token = getAccessToken();\n            if(!token){\n                return true; \n            } \n\n            try {\n                const {exp} = jwtDecode(token)\n                if(Date.now() >= exp * 1000){\n                    return false;\n                } else {\n                    return true;\n                }\n                \n            } catch (error) {\n                return false;\n            }\n        },\n\n        fetchAccessToken: () => {\n            console.log(\"fetch token \")\n            return fetch (\"http://localhost:4000/refresh_token\", {\n                method: \"POST\",\n                credentials: \"include\"\n            })\n        },\n        handleFetch: accessToken => {\n            setAccessToken(accessToken);\n        },\n\n        handleError: err => {\n            console.warn('Your refresh token is invalid. Try to relogin');\n        }\n      }),\n        onError(({ graphQLErrors, networkError }) => {\n        console.log(graphQLErrors);\n        console.log(networkError)\n    }),\n    requestLink,\n    new HttpLink({\n        uri: 'http://localhost:4000/graphql',\n        credentials: 'include'\n    })\n  ]),\n  cache\n});\n\nReactDOM.render(\n    <ApolloProvider client={client} >\n        <App />\n    </ApolloProvider>, document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}