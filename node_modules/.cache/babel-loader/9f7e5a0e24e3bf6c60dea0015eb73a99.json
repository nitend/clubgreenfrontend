{"ast":null,"code":"import _regeneratorRuntime from\"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useGetRatingQuery,useSaveRatingMutation}from'../../../generated/graphql';import{useParams}from'react-router-dom';import{Editor}from'../form/Editor';import{MessageView}from'../../pageframe/global/Messages/MessageView';import{LoadingAnimation}from'../../pageframe/global/Messages/LoadingAnimation';import{ErrorMessage}from'../../pageframe/global/Messages/ErrorMessage';import{formatRating,newRating}from'./RatingObject';export var RatingEditor=function RatingEditor(props){var _useParams=useParams(),ratingId=_useParams.ratingId;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showMessage=_useState2[0],setshowMessage=_useState2[1];var _useGetRatingQuery=useGetRatingQuery({variables:{id:ratingId?ratingId:\"\"}}),data=_useGetRatingQuery.data,error=_useGetRatingQuery.error,refetch=_useGetRatingQuery.refetch;var _useSaveRatingMutatio=useSaveRatingMutation(),_useSaveRatingMutatio2=_slicedToArray(_useSaveRatingMutatio,1),saveRating=_useSaveRatingMutatio2[0];function onSubmit(_x){return _onSubmit.apply(this,arguments);}function _onSubmit(){_onSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return saveRating({variables:{rating:formatRating(values)}});case 2:result=_context.sent;if(result){setshowMessage(true);}case 4:case\"end\":return _context.stop();}}},_callee);}));return _onSubmit.apply(this,arguments);}if(data&&data.getRating||ratingId==\"0\"){var rating=newRating;if(data===null||data===void 0?void 0:data.getRating){rating=data.getRating;}return React.createElement(Editor,{entity:rating,store:onSubmit,entityId:rating.id,imageuploadurl:\"http://localhost:4000/upload/property/image\"},React.createElement(MessageView,{severity:\"success\",message:\"Die Daten wurden gespeichert\",show:showMessage}));}if(error){return React.createElement(ErrorMessage,{error:error,show:true});}return React.createElement(LoadingAnimation,{message:\"Daten werden geladen ...\"});};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/ratings/RatingEditor.tsx"],"names":["React","useState","useGetRatingQuery","useSaveRatingMutation","useParams","Editor","MessageView","LoadingAnimation","ErrorMessage","formatRating","newRating","RatingEditor","props","ratingId","showMessage","setshowMessage","variables","id","data","error","refetch","saveRating","onSubmit","values","rating","result","getRating"],"mappings":"wZAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,iBAAT,CAA4BC,qBAA5B,KAAiE,4BAAjE,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,OAASC,MAAT,KAAuB,gBAAvB,CACA,OAASC,WAAT,KAA4B,6CAA5B,CACA,OAASC,gBAAT,KAAiC,kDAAjC,CACA,OAASC,YAAT,KAA6B,8CAA7B,CACA,OAASC,YAAT,CAAuBC,SAAvB,KAAwC,gBAAxC,CAOA,MAAO,IAAMC,CAAAA,YAA6B,CAAG,QAAhCA,CAAAA,YAAgC,CAACC,KAAD,CAAW,gBAE/BR,SAAS,EAFsB,CAE5CS,QAF4C,YAE5CA,QAF4C,eAIdZ,QAAQ,CAAC,KAAD,CAJM,wCAI7Ca,WAJ6C,eAIhCC,cAJgC,sCAKrBb,iBAAiB,CAAC,CAC7Cc,SAAS,CAAE,CACPC,EAAE,CAAEJ,QAAQ,CAAGA,QAAH,CAAc,EADnB,CADkC,CAAD,CALI,CAK7CK,IAL6C,oBAK7CA,IAL6C,CAKvCC,KALuC,oBAKvCA,KALuC,CAKhCC,OALgC,oBAKhCA,OALgC,2BAW/BjB,qBAAqB,EAXU,gEAW7CkB,UAX6C,mCAarCC,CAAAA,QAbqC,oIAapD,iBAAwBC,MAAxB,mJACuBF,CAAAA,UAAU,CAAC,CAC1BL,SAAS,CAAE,CACPQ,MAAM,CAAEf,YAAY,CAACc,MAAD,CADb,CADe,CAAD,CADjC,QACQE,MADR,eAMI,GAAGA,MAAH,CAAU,CACNV,cAAc,CAAC,IAAD,CAAd,CACH,CARL,sDAboD,2CAyBpD,GAAIG,IAAI,EAAIA,IAAI,CAACQ,SAAd,EAA6Bb,QAAQ,EAAI,GAA5C,CAAkD,CAC9C,GAAIW,CAAAA,MAAM,CAAGd,SAAb,CACA,GAAGQ,IAAH,SAAGA,IAAH,iBAAGA,IAAI,CAAEQ,SAAT,CAAmB,CACfF,MAAM,CAAGN,IAAI,CAACQ,SAAd,CACH,CAED,MACI,qBAAC,MAAD,EACI,MAAM,CAAEF,MADZ,CAEI,KAAK,CAAEF,QAFX,CAGI,QAAQ,CAAEE,MAAM,CAACP,EAHrB,CAII,cAAc,CAAE,6CAJpB,EAKI,oBAAC,WAAD,EAAa,QAAQ,CAAE,SAAvB,CAAkC,OAAO,CAAE,8BAA3C,CAA2E,IAAI,CAAEH,WAAjF,EALJ,CADJ,CASH,CAGD,GAAGK,KAAH,CAAS,CACL,MAAQ,qBAAC,YAAD,EAAc,KAAK,CAAEA,KAArB,CAA4B,IAAI,CAAE,IAAlC,EAAR,CACH,CAED,MAAQ,qBAAC,gBAAD,EAAkB,OAAO,CAAE,0BAA3B,EAAR,CACH,CAhDM","sourcesContent":["import React, { useState } from 'react'\nimport { useGetRatingQuery, useSaveRatingMutation, Rating } from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatRating, newRating } from './RatingObject';\n\n\ninterface Props {\n    \n}\n\nexport const RatingEditor: React.FC<Props> = (props) => {\n\n    const { ratingId } = useParams()\n\n    const [showMessage, setshowMessage] = useState(false);\n    const {data, error, refetch} = useGetRatingQuery({\n        variables: {\n            id: ratingId ? ratingId : \"\"\n        }\n    });\n    \n    const [saveRating] = useSaveRatingMutation();\n\n    async function onSubmit(values: Rating) {     \n        var result = await saveRating({\n            variables: {\n                rating: formatRating(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n        }\n    }\n\n    \n    if((data && data.getRating) || (ratingId == \"0\")) {\n        var rating = newRating;\n        if(data?.getRating){\n            rating = data.getRating;\n        }\n        \n        return(\n            <Editor \n                entity={rating} \n                store={onSubmit} \n                entityId={rating.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}