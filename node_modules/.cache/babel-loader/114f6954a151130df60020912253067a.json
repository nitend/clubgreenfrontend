{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const CreateMyBookingDocument = gql`\n    mutation CreateMyBooking($to: Float!, $from: Float!, $propertyId: String!) {\n  bookProperty(to: $to, from: $from, propertyId: $propertyId)\n}\n    `;\n\n/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      to: // value for 'to'\n *      from: // value for 'from'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useCreateMyBookingMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(CreateMyBookingDocument, baseOptions);\n}\nexport const SaveProductDocument = gql`\n    mutation saveProduct($product: ProductInput!) {\n  saveProduct(product: $product)\n}\n    `;\n\n/**\n * __useSaveProductMutation__\n *\n * To run a mutation, you first call `useSaveProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveProductMutation, { data, loading, error }] = useSaveProductMutation({\n *   variables: {\n *      product: // value for 'product'\n *   },\n * });\n */\nexport function useSaveProductMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SaveProductDocument, baseOptions);\n}\nexport const SavePropertyDocument = gql`\n    mutation saveProperty($property: PropertyInput!) {\n  saveProperty(property: $property)\n}\n    `;\n\n/**\n * __useSavePropertyMutation__\n *\n * To run a mutation, you first call `useSavePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSavePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [savePropertyMutation, { data, loading, error }] = useSavePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useSavePropertyMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SavePropertyDocument, baseOptions);\n}\nexport const SaveRatingDocument = gql`\n    mutation saveRating($rating: RatingInput!) {\n  saveRating(rating: $rating)\n}\n    `;\n\n/**\n * __useSaveRatingMutation__\n *\n * To run a mutation, you first call `useSaveRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveRatingMutation, { data, loading, error }] = useSaveRatingMutation({\n *   variables: {\n *      rating: // value for 'rating'\n *   },\n * });\n */\nexport function useSaveRatingMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SaveRatingDocument, baseOptions);\n}\nexport const SaveSightDocument = gql`\n    mutation saveSight($sight: SightInput!) {\n  saveSight(sight: $sight)\n}\n    `;\n\n/**\n * __useSaveSightMutation__\n *\n * To run a mutation, you first call `useSaveSightMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveSightMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveSightMutation, { data, loading, error }] = useSaveSightMutation({\n *   variables: {\n *      sight: // value for 'sight'\n *   },\n * });\n */\nexport function useSaveSightMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SaveSightDocument, baseOptions);\n}\nexport const DeleteBookingDocument = gql`\n    mutation deleteBooking($bookingId: String!) {\n  deleteBooking(bookingId: $bookingId)\n}\n    `;\n\n/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */\nexport function useDeleteBookingMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(DeleteBookingDocument, baseOptions);\n}\nexport const AllBookingDocument = gql`\n    query allBooking {\n  allBooking {\n    id\n    from\n    to\n    deleted\n    propertyId\n  }\n}\n    `;\n/**\n * __useAllBookingQuery__\n *\n * To run a query within a React component, call `useAllBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllBookingQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AllBookingDocument, baseOptions);\n}\nexport function useAllBookingLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AllBookingDocument, baseOptions);\n}\nexport const ProductsDocument = gql`\n    query Products {\n  getAllProducts {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    deleted\n    active\n    features\n  }\n}\n    `;\n/**\n * __useProductsQuery__\n *\n * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useProductsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ProductsDocument, baseOptions);\n}\nexport function useProductsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ProductsDocument, baseOptions);\n}\nexport const PropertiesDocument = gql`\n    query Properties {\n  allProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n/**\n * __usePropertiesQuery__\n *\n * To run a query within a React component, call `usePropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePropertiesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePropertiesQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(PropertiesDocument, baseOptions);\n}\nexport function usePropertiesLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(PropertiesDocument, baseOptions);\n}\nexport const AllRatingsDocument = gql`\n    query AllRatings {\n  getAllRatings {\n    id\n    targettype\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n/**\n * __useAllRatingsQuery__\n *\n * To run a query within a React component, call `useAllRatingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllRatingsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllRatingsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllRatingsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AllRatingsDocument, baseOptions);\n}\nexport function useAllRatingsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AllRatingsDocument, baseOptions);\n}\nexport const SightsDocument = gql`\n    query Sights {\n  getSights {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n/**\n * __useSightsQuery__\n *\n * To run a query within a React component, call `useSightsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSightsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSightsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useSightsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(SightsDocument, baseOptions);\n}\nexport function useSightsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(SightsDocument, baseOptions);\n}\nexport const BlockedDatesByPropertyDocument = gql`\n    query blockedDatesByProperty($propertyId: String!) {\n  getBlockedDatesFromProperty(propertyId: $propertyId) {\n    bookingId\n    dateTimeStamp\n    type\n  }\n}\n    `;\n/**\n * __useBlockedDatesByPropertyQuery__\n *\n * To run a query within a React component, call `useBlockedDatesByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockedDatesByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockedDatesByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\n\nexport function useBlockedDatesByPropertyQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(BlockedDatesByPropertyDocument, baseOptions);\n}\nexport function useBlockedDatesByPropertyLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(BlockedDatesByPropertyDocument, baseOptions);\n}\nexport const MyBookingDocument = gql`\n    query MyBooking {\n  myBooking {\n    id\n    from\n    to\n    property {\n      id\n      title\n      location\n      long\n      lat\n      images\n      beds_adult\n      beds_kids\n      beds_tent\n      subtext\n    }\n  }\n}\n    `;\n/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMyBookingQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MyBookingDocument, baseOptions);\n}\nexport function useMyBookingLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MyBookingDocument, baseOptions);\n}\nexport const BookingsByPropertyDocument = gql`\n    query BookingsByProperty($propertyId: String!) {\n  activeBookingsForProperty(propertyId: $propertyId) {\n    propertyId\n    to\n    from\n  }\n}\n    `;\n/**\n * __useBookingsByPropertyQuery__\n *\n * To run a query within a React component, call `useBookingsByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookingsByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookingsByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\n\nexport function useBookingsByPropertyQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(BookingsByPropertyDocument, baseOptions);\n}\nexport function useBookingsByPropertyLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(BookingsByPropertyDocument, baseOptions);\n}\nexport const GetProductDocument = gql`\n    query getProduct($id: String!) {\n  getProduct(id: $id) {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    deleted\n    active\n    features\n  }\n}\n    `;\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useGetProductQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetProductDocument, baseOptions);\n}\nexport function useGetProductLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetProductDocument, baseOptions);\n}\nexport const TeaserPropertiesDocument = gql`\n    query TeaserProperties {\n  teaserProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n/**\n * __useTeaserPropertiesQuery__\n *\n * To run a query within a React component, call `useTeaserPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeaserPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeaserPropertiesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTeaserPropertiesQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(TeaserPropertiesDocument, baseOptions);\n}\nexport function useTeaserPropertiesLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(TeaserPropertiesDocument, baseOptions);\n}\nexport const GetPropertyDocument = gql`\n    query getProperty($id: String!) {\n  getProperty(id: $id) {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n/**\n * __useGetPropertyQuery__\n *\n * To run a query within a React component, call `useGetPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPropertyQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useGetPropertyQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetPropertyDocument, baseOptions);\n}\nexport function useGetPropertyLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetPropertyDocument, baseOptions);\n}\nexport const GetRatingDocument = gql`\n    query getRating($id: String!) {\n  getRating(id: $id) {\n    id\n    targettype\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n/**\n * __useGetRatingQuery__\n *\n * To run a query within a React component, call `useGetRatingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useGetRatingQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetRatingDocument, baseOptions);\n}\nexport function useGetRatingLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetRatingDocument, baseOptions);\n}\nexport const GetRatingValuesByTargetDocument = gql`\n    query getRatingValuesByTarget($targettype: String!, $targetId: String!) {\n  getRatingValuesByTarget(targettype: $targettype, targetId: $targetId) {\n    targetId\n    targettype\n    ratings\n    ratingValue\n  }\n}\n    `;\n/**\n * __useGetRatingValuesByTargetQuery__\n *\n * To run a query within a React component, call `useGetRatingValuesByTargetQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingValuesByTargetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingValuesByTargetQuery({\n *   variables: {\n *      targettype: // value for 'targettype'\n *      targetId: // value for 'targetId'\n *   },\n * });\n */\n\nexport function useGetRatingValuesByTargetQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetRatingValuesByTargetDocument, baseOptions);\n}\nexport function useGetRatingValuesByTargetLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetRatingValuesByTargetDocument, baseOptions);\n}\nexport const GetSightDocument = gql`\n    query getSight($id: String!) {\n  getSight(id: $id) {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n/**\n * __useGetSightQuery__\n *\n * To run a query within a React component, call `useGetSightQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSightQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSightQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useGetSightQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetSightDocument, baseOptions);\n}\nexport function useGetSightLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetSightDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    email\n    id\n    paymentServiceId\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MeDocument, baseOptions);\n}\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useUsersQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(UsersDocument, baseOptions);\n}\nexport function useUsersLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(UsersDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n  }\n}\n    `;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LogoutDocument, baseOptions);\n}\nexport const AddPaymentMethodDocument = gql`\n    mutation addPaymentMethod($paymentMethodId: String!) {\n  addPaymentMethod(paymentMethodId: $paymentMethodId)\n}\n    `;\n\n/**\n * __useAddPaymentMethodMutation__\n *\n * To run a mutation, you first call `useAddPaymentMethodMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPaymentMethodMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPaymentMethodMutation, { data, loading, error }] = useAddPaymentMethodMutation({\n *   variables: {\n *      paymentMethodId: // value for 'paymentMethodId'\n *   },\n * });\n */\nexport function useAddPaymentMethodMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(AddPaymentMethodDocument, baseOptions);\n}\nexport const CreatePaymentSerivceCustomerDocument = gql`\n    mutation createPaymentSerivceCustomer {\n  createPaymentServiceCustomer\n}\n    `;\n\n/**\n * __useCreatePaymentSerivceCustomerMutation__\n *\n * To run a mutation, you first call `useCreatePaymentSerivceCustomerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePaymentSerivceCustomerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPaymentSerivceCustomerMutation, { data, loading, error }] = useCreatePaymentSerivceCustomerMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCreatePaymentSerivceCustomerMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(CreatePaymentSerivceCustomerDocument, baseOptions);\n}\nexport const SubscribeToPricePlanDocument = gql`\n    mutation subscribeToPricePlan($priceplan: String!) {\n  subscribeToPricePlan(priceplan: $priceplan)\n}\n    `;\n\n/**\n * __useSubscribeToPricePlanMutation__\n *\n * To run a mutation, you first call `useSubscribeToPricePlanMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubscribeToPricePlanMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [subscribeToPricePlanMutation, { data, loading, error }] = useSubscribeToPricePlanMutation({\n *   variables: {\n *      priceplan: // value for 'priceplan'\n *   },\n * });\n */\nexport function useSubscribeToPricePlanMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SubscribeToPricePlanDocument, baseOptions);\n}\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RegisterDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","CreateMyBookingDocument","useCreateMyBookingMutation","baseOptions","useMutation","SaveProductDocument","useSaveProductMutation","SavePropertyDocument","useSavePropertyMutation","SaveRatingDocument","useSaveRatingMutation","SaveSightDocument","useSaveSightMutation","DeleteBookingDocument","useDeleteBookingMutation","AllBookingDocument","useAllBookingQuery","useQuery","useAllBookingLazyQuery","useLazyQuery","ProductsDocument","useProductsQuery","useProductsLazyQuery","PropertiesDocument","usePropertiesQuery","usePropertiesLazyQuery","AllRatingsDocument","useAllRatingsQuery","useAllRatingsLazyQuery","SightsDocument","useSightsQuery","useSightsLazyQuery","BlockedDatesByPropertyDocument","useBlockedDatesByPropertyQuery","useBlockedDatesByPropertyLazyQuery","MyBookingDocument","useMyBookingQuery","useMyBookingLazyQuery","BookingsByPropertyDocument","useBookingsByPropertyQuery","useBookingsByPropertyLazyQuery","GetProductDocument","useGetProductQuery","useGetProductLazyQuery","TeaserPropertiesDocument","useTeaserPropertiesQuery","useTeaserPropertiesLazyQuery","GetPropertyDocument","useGetPropertyQuery","useGetPropertyLazyQuery","GetRatingDocument","useGetRatingQuery","useGetRatingLazyQuery","GetRatingValuesByTargetDocument","useGetRatingValuesByTargetQuery","useGetRatingValuesByTargetLazyQuery","GetSightDocument","useGetSightQuery","useGetSightLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","UsersDocument","useUsersQuery","useUsersLazyQuery","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","AddPaymentMethodDocument","useAddPaymentMethodMutation","CreatePaymentSerivceCustomerDocument","useCreatePaymentSerivceCustomerMutation","SubscribeToPricePlanDocument","useSubscribeToPricePlanMutation","RegisterDocument","useRegisterMutation"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type BlockedDate = {\n   __typename?: 'BlockedDate',\n  bookingId: Scalars['String'],\n  dateTimeStamp: Scalars['Float'],\n  type: Scalars['Float'],\n};\n\nexport type Booking = {\n   __typename?: 'Booking',\n  id: Scalars['String'],\n  user: Scalars['String'],\n  date: Scalars['Float'],\n  from: Scalars['Float'],\n  to: Scalars['Float'],\n  deleted: Scalars['Boolean'],\n  propertyId: Scalars['String'],\n  property: Property,\n};\n\n\nexport type Email = {\n   __typename?: 'Email',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  verified: Scalars['Boolean'],\n  verification_token: Scalars['String'],\n  verification_date: Scalars['Float'],\n};\n\nexport type Location = {\n   __typename?: 'Location',\n  id: Scalars['String'],\n  title: Scalars['String'],\n  type: Scalars['String'],\n  lat: Scalars['Float'],\n  long: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokeForUser: Scalars['Boolean'],\n  createPaymentServiceCustomer: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  bookProperty: Scalars['Boolean'],\n  deleteBooking: Scalars['Boolean'],\n  saveProperty: Scalars['Boolean'],\n  createProperty: Scalars['Boolean'],\n  deleteProperty: Scalars['Boolean'],\n  saveSight: Scalars['Boolean'],\n  deleteSight: Scalars['Boolean'],\n  saveRating: Scalars['Boolean'],\n  deleteRating: Scalars['Boolean'],\n  saveProduct: Scalars['Boolean'],\n  deleteProduct: Scalars['Boolean'],\n  subscribeToPricePlan: Scalars['Boolean'],\n  addPaymentMethod: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokeForUserArgs = {\n  userId: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  password: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String']\n};\n\n\nexport type MutationBookPropertyArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float'],\n  propertyId: Scalars['String']\n};\n\n\nexport type MutationDeleteBookingArgs = {\n  bookingId: Scalars['String']\n};\n\n\nexport type MutationSavePropertyArgs = {\n  property: PropertyInput\n};\n\n\nexport type MutationCreatePropertyArgs = {\n  images: Array<Scalars['String']>,\n  beds_tent: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  title: Scalars['String']\n};\n\n\nexport type MutationDeletePropertyArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationSaveSightArgs = {\n  sight: SightInput\n};\n\n\nexport type MutationDeleteSightArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationSaveRatingArgs = {\n  rating: RatingInput\n};\n\n\nexport type MutationDeleteRatingArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationSaveProductArgs = {\n  product: ProductInput\n};\n\n\nexport type MutationDeleteProductArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationSubscribeToPricePlanArgs = {\n  priceplan: Scalars['String']\n};\n\n\nexport type MutationAddPaymentMethodArgs = {\n  paymentMethodId: Scalars['String']\n};\n\nexport type Product = {\n   __typename?: 'Product',\n  id: Scalars['String'],\n  creationDate: Scalars['DateTime'],\n  title: Scalars['String'],\n  paymentPricePlan: Scalars['String'],\n  price: Scalars['Float'],\n  minmonth: Scalars['Float'],\n  deleted: Scalars['Boolean'],\n  active: Scalars['Boolean'],\n  features: Array<Scalars['String']>,\n};\n\nexport type ProductInput = {\n  id: Scalars['String'],\n  creationDate: Scalars['DateTime'],\n  title: Scalars['String'],\n  paymentPricePlan: Scalars['String'],\n  price: Scalars['Float'],\n  minmonth: Scalars['Float'],\n  deleted: Scalars['Boolean'],\n  active: Scalars['Boolean'],\n  features: Array<Scalars['String']>,\n};\n\nexport type Property = {\n   __typename?: 'Property',\n  id: Scalars['String'],\n  title: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_tent: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type PropertyInput = {\n  id: Scalars['String'],\n  title: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_tent: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  me?: Maybe<User>,\n  users: Array<User>,\n  myBooking?: Maybe<Booking>,\n  allBooking?: Maybe<Array<Booking>>,\n  getBlockedDatesFromProperty?: Maybe<Array<BlockedDate>>,\n  propertiesEvalable?: Maybe<Array<Booking>>,\n  allProperties?: Maybe<Array<Property>>,\n  teaserProperties?: Maybe<Array<Property>>,\n  activeBookingsForProperty?: Maybe<Array<Booking>>,\n  getProperties?: Maybe<Array<Property>>,\n  getProperty?: Maybe<Property>,\n  getSights?: Maybe<Array<Sight>>,\n  getSight?: Maybe<Sight>,\n  getAllRatings?: Maybe<Array<Rating>>,\n  getRating?: Maybe<Rating>,\n  getRatingValuesByTarget?: Maybe<RatingValues>,\n  getAllLocations?: Maybe<Array<Location>>,\n  getAllProducts?: Maybe<Array<Product>>,\n  getProduct?: Maybe<Product>,\n};\n\n\nexport type QueryGetBlockedDatesFromPropertyArgs = {\n  propertyId: Scalars['String']\n};\n\n\nexport type QueryPropertiesEvalableArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float']\n};\n\n\nexport type QueryActiveBookingsForPropertyArgs = {\n  propertyId: Scalars['String']\n};\n\n\nexport type QueryGetPropertyArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetSightArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetRatingArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetRatingValuesByTargetArgs = {\n  targetId: Scalars['String'],\n  targettype: Scalars['String']\n};\n\n\nexport type QueryGetProductArgs = {\n  id: Scalars['String']\n};\n\nexport type Rating = {\n   __typename?: 'Rating',\n  id: Scalars['String'],\n  title: Scalars['String'],\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  rating: Scalars['Float'],\n  userId: Scalars['Float'],\n  comment: Scalars['String'],\n};\n\nexport type RatingInput = {\n  id: Scalars['String'],\n  title: Scalars['String'],\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  rating: Scalars['Float'],\n  userId: Scalars['Float'],\n  comment: Scalars['String'],\n};\n\nexport type RatingValues = {\n   __typename?: 'RatingValues',\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  ratings: Scalars['Float'],\n  ratingValue: Scalars['Float'],\n};\n\nexport type Sight = {\n   __typename?: 'Sight',\n  id: Scalars['String'],\n  title: Scalars['String'],\n  type: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type SightInput = {\n  id: Scalars['String'],\n  title: Scalars['String'],\n  type: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['String'],\n  username: Scalars['String'],\n  email: Scalars['String'],\n  paymentServiceId: Scalars['String'],\n  firstname: Scalars['String'],\n  surname: Scalars['String'],\n  street: Scalars['String'],\n  streetNumber: Scalars['Float'],\n  town: Scalars['String'],\n  postalcode: Scalars['String'],\n  tokenVersion: Scalars['Float'],\n  email_verified: Scalars['Boolean'],\n};\n\nexport type CreateMyBookingMutationVariables = {\n  to: Scalars['Float'],\n  from: Scalars['Float'],\n  propertyId: Scalars['String']\n};\n\n\nexport type CreateMyBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'bookProperty'>\n);\n\nexport type SaveProductMutationVariables = {\n  product: ProductInput\n};\n\n\nexport type SaveProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveProduct'>\n);\n\nexport type SavePropertyMutationVariables = {\n  property: PropertyInput\n};\n\n\nexport type SavePropertyMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveProperty'>\n);\n\nexport type SaveRatingMutationVariables = {\n  rating: RatingInput\n};\n\n\nexport type SaveRatingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveRating'>\n);\n\nexport type SaveSightMutationVariables = {\n  sight: SightInput\n};\n\n\nexport type SaveSightMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveSight'>\n);\n\nexport type DeleteBookingMutationVariables = {\n  bookingId: Scalars['String']\n};\n\n\nexport type DeleteBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteBooking'>\n);\n\nexport type AllBookingQueryVariables = {};\n\n\nexport type AllBookingQuery = (\n  { __typename?: 'Query' }\n  & { allBooking: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'from' | 'to' | 'deleted' | 'propertyId'>\n  )>> }\n);\n\nexport type ProductsQueryVariables = {};\n\n\nexport type ProductsQuery = (\n  { __typename?: 'Query' }\n  & { getAllProducts: Maybe<Array<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'title' | 'creationDate' | 'paymentPricePlan' | 'price' | 'minmonth' | 'deleted' | 'active' | 'features'>\n  )>> }\n);\n\nexport type PropertiesQueryVariables = {};\n\n\nexport type PropertiesQuery = (\n  { __typename?: 'Query' }\n  & { allProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type AllRatingsQueryVariables = {};\n\n\nexport type AllRatingsQuery = (\n  { __typename?: 'Query' }\n  & { getAllRatings: Maybe<Array<(\n    { __typename?: 'Rating' }\n    & Pick<Rating, 'id' | 'targettype' | 'targetId' | 'comment' | 'rating' | 'title' | 'userId'>\n  )>> }\n);\n\nexport type SightsQueryVariables = {};\n\n\nexport type SightsQuery = (\n  { __typename?: 'Query' }\n  & { getSights: Maybe<Array<(\n    { __typename?: 'Sight' }\n    & Pick<Sight, 'id' | 'title' | 'type' | 'subtext' | 'location' | 'long' | 'lat' | 'images'>\n  )>> }\n);\n\nexport type BlockedDatesByPropertyQueryVariables = {\n  propertyId: Scalars['String']\n};\n\n\nexport type BlockedDatesByPropertyQuery = (\n  { __typename?: 'Query' }\n  & { getBlockedDatesFromProperty: Maybe<Array<(\n    { __typename?: 'BlockedDate' }\n    & Pick<BlockedDate, 'bookingId' | 'dateTimeStamp' | 'type'>\n  )>> }\n);\n\nexport type MyBookingQueryVariables = {};\n\n\nexport type MyBookingQuery = (\n  { __typename?: 'Query' }\n  & { myBooking: Maybe<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'from' | 'to'>\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id' | 'title' | 'location' | 'long' | 'lat' | 'images' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'subtext'>\n    ) }\n  )> }\n);\n\nexport type BookingsByPropertyQueryVariables = {\n  propertyId: Scalars['String']\n};\n\n\nexport type BookingsByPropertyQuery = (\n  { __typename?: 'Query' }\n  & { activeBookingsForProperty: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'propertyId' | 'to' | 'from'>\n  )>> }\n);\n\nexport type GetProductQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: Maybe<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'title' | 'creationDate' | 'paymentPricePlan' | 'price' | 'minmonth' | 'deleted' | 'active' | 'features'>\n  )> }\n);\n\nexport type TeaserPropertiesQueryVariables = {};\n\n\nexport type TeaserPropertiesQuery = (\n  { __typename?: 'Query' }\n  & { teaserProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type GetPropertyQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetPropertyQuery = (\n  { __typename?: 'Query' }\n  & { getProperty: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )> }\n);\n\nexport type GetRatingQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetRatingQuery = (\n  { __typename?: 'Query' }\n  & { getRating: Maybe<(\n    { __typename?: 'Rating' }\n    & Pick<Rating, 'id' | 'targettype' | 'targetId' | 'comment' | 'rating' | 'title' | 'userId'>\n  )> }\n);\n\nexport type GetRatingValuesByTargetQueryVariables = {\n  targettype: Scalars['String'],\n  targetId: Scalars['String']\n};\n\n\nexport type GetRatingValuesByTargetQuery = (\n  { __typename?: 'Query' }\n  & { getRatingValuesByTarget: Maybe<(\n    { __typename?: 'RatingValues' }\n    & Pick<RatingValues, 'targetId' | 'targettype' | 'ratings' | 'ratingValue'>\n  )> }\n);\n\nexport type GetSightQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetSightQuery = (\n  { __typename?: 'Query' }\n  & { getSight: Maybe<(\n    { __typename?: 'Sight' }\n    & Pick<Sight, 'id' | 'title' | 'type' | 'subtext' | 'location' | 'long' | 'lat' | 'images'>\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'email' | 'id' | 'paymentServiceId'>\n  )> }\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type AddPaymentMethodMutationVariables = {\n  paymentMethodId: Scalars['String']\n};\n\n\nexport type AddPaymentMethodMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addPaymentMethod'>\n);\n\nexport type CreatePaymentSerivceCustomerMutationVariables = {};\n\n\nexport type CreatePaymentSerivceCustomerMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createPaymentServiceCustomer'>\n);\n\nexport type SubscribeToPricePlanMutationVariables = {\n  priceplan: Scalars['String']\n};\n\n\nexport type SubscribeToPricePlanMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'subscribeToPricePlan'>\n);\n\nexport type RegisterMutationVariables = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\n\nexport const CreateMyBookingDocument = gql`\n    mutation CreateMyBooking($to: Float!, $from: Float!, $propertyId: String!) {\n  bookProperty(to: $to, from: $from, propertyId: $propertyId)\n}\n    `;\nexport type CreateMyBookingMutationFn = ApolloReactCommon.MutationFunction<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\n\n/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      to: // value for 'to'\n *      from: // value for 'from'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useCreateMyBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateMyBookingMutation, CreateMyBookingMutationVariables>(CreateMyBookingDocument, baseOptions);\n      }\nexport type CreateMyBookingMutationHookResult = ReturnType<typeof useCreateMyBookingMutation>;\nexport type CreateMyBookingMutationResult = ApolloReactCommon.MutationResult<CreateMyBookingMutation>;\nexport type CreateMyBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\nexport const SaveProductDocument = gql`\n    mutation saveProduct($product: ProductInput!) {\n  saveProduct(product: $product)\n}\n    `;\nexport type SaveProductMutationFn = ApolloReactCommon.MutationFunction<SaveProductMutation, SaveProductMutationVariables>;\n\n/**\n * __useSaveProductMutation__\n *\n * To run a mutation, you first call `useSaveProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveProductMutation, { data, loading, error }] = useSaveProductMutation({\n *   variables: {\n *      product: // value for 'product'\n *   },\n * });\n */\nexport function useSaveProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveProductMutation, SaveProductMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveProductMutation, SaveProductMutationVariables>(SaveProductDocument, baseOptions);\n      }\nexport type SaveProductMutationHookResult = ReturnType<typeof useSaveProductMutation>;\nexport type SaveProductMutationResult = ApolloReactCommon.MutationResult<SaveProductMutation>;\nexport type SaveProductMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveProductMutation, SaveProductMutationVariables>;\nexport const SavePropertyDocument = gql`\n    mutation saveProperty($property: PropertyInput!) {\n  saveProperty(property: $property)\n}\n    `;\nexport type SavePropertyMutationFn = ApolloReactCommon.MutationFunction<SavePropertyMutation, SavePropertyMutationVariables>;\n\n/**\n * __useSavePropertyMutation__\n *\n * To run a mutation, you first call `useSavePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSavePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [savePropertyMutation, { data, loading, error }] = useSavePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useSavePropertyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SavePropertyMutation, SavePropertyMutationVariables>) {\n        return ApolloReactHooks.useMutation<SavePropertyMutation, SavePropertyMutationVariables>(SavePropertyDocument, baseOptions);\n      }\nexport type SavePropertyMutationHookResult = ReturnType<typeof useSavePropertyMutation>;\nexport type SavePropertyMutationResult = ApolloReactCommon.MutationResult<SavePropertyMutation>;\nexport type SavePropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<SavePropertyMutation, SavePropertyMutationVariables>;\nexport const SaveRatingDocument = gql`\n    mutation saveRating($rating: RatingInput!) {\n  saveRating(rating: $rating)\n}\n    `;\nexport type SaveRatingMutationFn = ApolloReactCommon.MutationFunction<SaveRatingMutation, SaveRatingMutationVariables>;\n\n/**\n * __useSaveRatingMutation__\n *\n * To run a mutation, you first call `useSaveRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveRatingMutation, { data, loading, error }] = useSaveRatingMutation({\n *   variables: {\n *      rating: // value for 'rating'\n *   },\n * });\n */\nexport function useSaveRatingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveRatingMutation, SaveRatingMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveRatingMutation, SaveRatingMutationVariables>(SaveRatingDocument, baseOptions);\n      }\nexport type SaveRatingMutationHookResult = ReturnType<typeof useSaveRatingMutation>;\nexport type SaveRatingMutationResult = ApolloReactCommon.MutationResult<SaveRatingMutation>;\nexport type SaveRatingMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveRatingMutation, SaveRatingMutationVariables>;\nexport const SaveSightDocument = gql`\n    mutation saveSight($sight: SightInput!) {\n  saveSight(sight: $sight)\n}\n    `;\nexport type SaveSightMutationFn = ApolloReactCommon.MutationFunction<SaveSightMutation, SaveSightMutationVariables>;\n\n/**\n * __useSaveSightMutation__\n *\n * To run a mutation, you first call `useSaveSightMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveSightMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveSightMutation, { data, loading, error }] = useSaveSightMutation({\n *   variables: {\n *      sight: // value for 'sight'\n *   },\n * });\n */\nexport function useSaveSightMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveSightMutation, SaveSightMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveSightMutation, SaveSightMutationVariables>(SaveSightDocument, baseOptions);\n      }\nexport type SaveSightMutationHookResult = ReturnType<typeof useSaveSightMutation>;\nexport type SaveSightMutationResult = ApolloReactCommon.MutationResult<SaveSightMutation>;\nexport type SaveSightMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveSightMutation, SaveSightMutationVariables>;\nexport const DeleteBookingDocument = gql`\n    mutation deleteBooking($bookingId: String!) {\n  deleteBooking(bookingId: $bookingId)\n}\n    `;\nexport type DeleteBookingMutationFn = ApolloReactCommon.MutationFunction<DeleteBookingMutation, DeleteBookingMutationVariables>;\n\n/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */\nexport function useDeleteBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteBookingMutation, DeleteBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteBookingMutation, DeleteBookingMutationVariables>(DeleteBookingDocument, baseOptions);\n      }\nexport type DeleteBookingMutationHookResult = ReturnType<typeof useDeleteBookingMutation>;\nexport type DeleteBookingMutationResult = ApolloReactCommon.MutationResult<DeleteBookingMutation>;\nexport type DeleteBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteBookingMutation, DeleteBookingMutationVariables>;\nexport const AllBookingDocument = gql`\n    query allBooking {\n  allBooking {\n    id\n    from\n    to\n    deleted\n    propertyId\n  }\n}\n    `;\n\n/**\n * __useAllBookingQuery__\n *\n * To run a query within a React component, call `useAllBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllBookingQuery, AllBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllBookingQuery, AllBookingQueryVariables>(AllBookingDocument, baseOptions);\n      }\nexport function useAllBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllBookingQuery, AllBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllBookingQuery, AllBookingQueryVariables>(AllBookingDocument, baseOptions);\n        }\nexport type AllBookingQueryHookResult = ReturnType<typeof useAllBookingQuery>;\nexport type AllBookingLazyQueryHookResult = ReturnType<typeof useAllBookingLazyQuery>;\nexport type AllBookingQueryResult = ApolloReactCommon.QueryResult<AllBookingQuery, AllBookingQueryVariables>;\nexport const ProductsDocument = gql`\n    query Products {\n  getAllProducts {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    deleted\n    active\n    features\n  }\n}\n    `;\n\n/**\n * __useProductsQuery__\n *\n * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n      }\nexport function useProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n        }\nexport type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;\nexport type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;\nexport type ProductsQueryResult = ApolloReactCommon.QueryResult<ProductsQuery, ProductsQueryVariables>;\nexport const PropertiesDocument = gql`\n    query Properties {\n  allProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __usePropertiesQuery__\n *\n * To run a query within a React component, call `usePropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PropertiesQuery, PropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<PropertiesQuery, PropertiesQueryVariables>(PropertiesDocument, baseOptions);\n      }\nexport function usePropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PropertiesQuery, PropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PropertiesQuery, PropertiesQueryVariables>(PropertiesDocument, baseOptions);\n        }\nexport type PropertiesQueryHookResult = ReturnType<typeof usePropertiesQuery>;\nexport type PropertiesLazyQueryHookResult = ReturnType<typeof usePropertiesLazyQuery>;\nexport type PropertiesQueryResult = ApolloReactCommon.QueryResult<PropertiesQuery, PropertiesQueryVariables>;\nexport const AllRatingsDocument = gql`\n    query AllRatings {\n  getAllRatings {\n    id\n    targettype\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n\n/**\n * __useAllRatingsQuery__\n *\n * To run a query within a React component, call `useAllRatingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllRatingsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllRatingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllRatingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllRatingsQuery, AllRatingsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllRatingsQuery, AllRatingsQueryVariables>(AllRatingsDocument, baseOptions);\n      }\nexport function useAllRatingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllRatingsQuery, AllRatingsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllRatingsQuery, AllRatingsQueryVariables>(AllRatingsDocument, baseOptions);\n        }\nexport type AllRatingsQueryHookResult = ReturnType<typeof useAllRatingsQuery>;\nexport type AllRatingsLazyQueryHookResult = ReturnType<typeof useAllRatingsLazyQuery>;\nexport type AllRatingsQueryResult = ApolloReactCommon.QueryResult<AllRatingsQuery, AllRatingsQueryVariables>;\nexport const SightsDocument = gql`\n    query Sights {\n  getSights {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n\n/**\n * __useSightsQuery__\n *\n * To run a query within a React component, call `useSightsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSightsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSightsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSightsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SightsQuery, SightsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SightsQuery, SightsQueryVariables>(SightsDocument, baseOptions);\n      }\nexport function useSightsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SightsQuery, SightsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SightsQuery, SightsQueryVariables>(SightsDocument, baseOptions);\n        }\nexport type SightsQueryHookResult = ReturnType<typeof useSightsQuery>;\nexport type SightsLazyQueryHookResult = ReturnType<typeof useSightsLazyQuery>;\nexport type SightsQueryResult = ApolloReactCommon.QueryResult<SightsQuery, SightsQueryVariables>;\nexport const BlockedDatesByPropertyDocument = gql`\n    query blockedDatesByProperty($propertyId: String!) {\n  getBlockedDatesFromProperty(propertyId: $propertyId) {\n    bookingId\n    dateTimeStamp\n    type\n  }\n}\n    `;\n\n/**\n * __useBlockedDatesByPropertyQuery__\n *\n * To run a query within a React component, call `useBlockedDatesByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockedDatesByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockedDatesByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useBlockedDatesByPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>(BlockedDatesByPropertyDocument, baseOptions);\n      }\nexport function useBlockedDatesByPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>(BlockedDatesByPropertyDocument, baseOptions);\n        }\nexport type BlockedDatesByPropertyQueryHookResult = ReturnType<typeof useBlockedDatesByPropertyQuery>;\nexport type BlockedDatesByPropertyLazyQueryHookResult = ReturnType<typeof useBlockedDatesByPropertyLazyQuery>;\nexport type BlockedDatesByPropertyQueryResult = ApolloReactCommon.QueryResult<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>;\nexport const MyBookingDocument = gql`\n    query MyBooking {\n  myBooking {\n    id\n    from\n    to\n    property {\n      id\n      title\n      location\n      long\n      lat\n      images\n      beds_adult\n      beds_kids\n      beds_tent\n      subtext\n    }\n  }\n}\n    `;\n\n/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n      }\nexport function useMyBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n        }\nexport type MyBookingQueryHookResult = ReturnType<typeof useMyBookingQuery>;\nexport type MyBookingLazyQueryHookResult = ReturnType<typeof useMyBookingLazyQuery>;\nexport type MyBookingQueryResult = ApolloReactCommon.QueryResult<MyBookingQuery, MyBookingQueryVariables>;\nexport const BookingsByPropertyDocument = gql`\n    query BookingsByProperty($propertyId: String!) {\n  activeBookingsForProperty(propertyId: $propertyId) {\n    propertyId\n    to\n    from\n  }\n}\n    `;\n\n/**\n * __useBookingsByPropertyQuery__\n *\n * To run a query within a React component, call `useBookingsByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookingsByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookingsByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useBookingsByPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>(BookingsByPropertyDocument, baseOptions);\n      }\nexport function useBookingsByPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>(BookingsByPropertyDocument, baseOptions);\n        }\nexport type BookingsByPropertyQueryHookResult = ReturnType<typeof useBookingsByPropertyQuery>;\nexport type BookingsByPropertyLazyQueryHookResult = ReturnType<typeof useBookingsByPropertyLazyQuery>;\nexport type BookingsByPropertyQueryResult = ApolloReactCommon.QueryResult<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($id: String!) {\n  getProduct(id: $id) {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    deleted\n    active\n    features\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = ApolloReactCommon.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const TeaserPropertiesDocument = gql`\n    query TeaserProperties {\n  teaserProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useTeaserPropertiesQuery__\n *\n * To run a query within a React component, call `useTeaserPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeaserPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeaserPropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTeaserPropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>(TeaserPropertiesDocument, baseOptions);\n      }\nexport function useTeaserPropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>(TeaserPropertiesDocument, baseOptions);\n        }\nexport type TeaserPropertiesQueryHookResult = ReturnType<typeof useTeaserPropertiesQuery>;\nexport type TeaserPropertiesLazyQueryHookResult = ReturnType<typeof useTeaserPropertiesLazyQuery>;\nexport type TeaserPropertiesQueryResult = ApolloReactCommon.QueryResult<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>;\nexport const GetPropertyDocument = gql`\n    query getProperty($id: String!) {\n  getProperty(id: $id) {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useGetPropertyQuery__\n *\n * To run a query within a React component, call `useGetPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPropertyQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyQuery, GetPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetPropertyQuery, GetPropertyQueryVariables>(GetPropertyDocument, baseOptions);\n      }\nexport function useGetPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyQuery, GetPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetPropertyQuery, GetPropertyQueryVariables>(GetPropertyDocument, baseOptions);\n        }\nexport type GetPropertyQueryHookResult = ReturnType<typeof useGetPropertyQuery>;\nexport type GetPropertyLazyQueryHookResult = ReturnType<typeof useGetPropertyLazyQuery>;\nexport type GetPropertyQueryResult = ApolloReactCommon.QueryResult<GetPropertyQuery, GetPropertyQueryVariables>;\nexport const GetRatingDocument = gql`\n    query getRating($id: String!) {\n  getRating(id: $id) {\n    id\n    targettype\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n\n/**\n * __useGetRatingQuery__\n *\n * To run a query within a React component, call `useGetRatingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetRatingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRatingQuery, GetRatingQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetRatingQuery, GetRatingQueryVariables>(GetRatingDocument, baseOptions);\n      }\nexport function useGetRatingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRatingQuery, GetRatingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetRatingQuery, GetRatingQueryVariables>(GetRatingDocument, baseOptions);\n        }\nexport type GetRatingQueryHookResult = ReturnType<typeof useGetRatingQuery>;\nexport type GetRatingLazyQueryHookResult = ReturnType<typeof useGetRatingLazyQuery>;\nexport type GetRatingQueryResult = ApolloReactCommon.QueryResult<GetRatingQuery, GetRatingQueryVariables>;\nexport const GetRatingValuesByTargetDocument = gql`\n    query getRatingValuesByTarget($targettype: String!, $targetId: String!) {\n  getRatingValuesByTarget(targettype: $targettype, targetId: $targetId) {\n    targetId\n    targettype\n    ratings\n    ratingValue\n  }\n}\n    `;\n\n/**\n * __useGetRatingValuesByTargetQuery__\n *\n * To run a query within a React component, call `useGetRatingValuesByTargetQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingValuesByTargetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingValuesByTargetQuery({\n *   variables: {\n *      targettype: // value for 'targettype'\n *      targetId: // value for 'targetId'\n *   },\n * });\n */\nexport function useGetRatingValuesByTargetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>(GetRatingValuesByTargetDocument, baseOptions);\n      }\nexport function useGetRatingValuesByTargetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>(GetRatingValuesByTargetDocument, baseOptions);\n        }\nexport type GetRatingValuesByTargetQueryHookResult = ReturnType<typeof useGetRatingValuesByTargetQuery>;\nexport type GetRatingValuesByTargetLazyQueryHookResult = ReturnType<typeof useGetRatingValuesByTargetLazyQuery>;\nexport type GetRatingValuesByTargetQueryResult = ApolloReactCommon.QueryResult<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>;\nexport const GetSightDocument = gql`\n    query getSight($id: String!) {\n  getSight(id: $id) {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n\n/**\n * __useGetSightQuery__\n *\n * To run a query within a React component, call `useGetSightQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSightQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSightQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetSightQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSightQuery, GetSightQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetSightQuery, GetSightQueryVariables>(GetSightDocument, baseOptions);\n      }\nexport function useGetSightLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSightQuery, GetSightQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetSightQuery, GetSightQueryVariables>(GetSightDocument, baseOptions);\n        }\nexport type GetSightQueryHookResult = ReturnType<typeof useGetSightQuery>;\nexport type GetSightLazyQueryHookResult = ReturnType<typeof useGetSightLazyQuery>;\nexport type GetSightQueryResult = ApolloReactCommon.QueryResult<GetSightQuery, GetSightQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    email\n    id\n    paymentServiceId\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const AddPaymentMethodDocument = gql`\n    mutation addPaymentMethod($paymentMethodId: String!) {\n  addPaymentMethod(paymentMethodId: $paymentMethodId)\n}\n    `;\nexport type AddPaymentMethodMutationFn = ApolloReactCommon.MutationFunction<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>;\n\n/**\n * __useAddPaymentMethodMutation__\n *\n * To run a mutation, you first call `useAddPaymentMethodMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPaymentMethodMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPaymentMethodMutation, { data, loading, error }] = useAddPaymentMethodMutation({\n *   variables: {\n *      paymentMethodId: // value for 'paymentMethodId'\n *   },\n * });\n */\nexport function useAddPaymentMethodMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>(AddPaymentMethodDocument, baseOptions);\n      }\nexport type AddPaymentMethodMutationHookResult = ReturnType<typeof useAddPaymentMethodMutation>;\nexport type AddPaymentMethodMutationResult = ApolloReactCommon.MutationResult<AddPaymentMethodMutation>;\nexport type AddPaymentMethodMutationOptions = ApolloReactCommon.BaseMutationOptions<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>;\nexport const CreatePaymentSerivceCustomerDocument = gql`\n    mutation createPaymentSerivceCustomer {\n  createPaymentServiceCustomer\n}\n    `;\nexport type CreatePaymentSerivceCustomerMutationFn = ApolloReactCommon.MutationFunction<CreatePaymentSerivceCustomerMutation, CreatePaymentSerivceCustomerMutationVariables>;\n\n/**\n * __useCreatePaymentSerivceCustomerMutation__\n *\n * To run a mutation, you first call `useCreatePaymentSerivceCustomerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePaymentSerivceCustomerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPaymentSerivceCustomerMutation, { data, loading, error }] = useCreatePaymentSerivceCustomerMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCreatePaymentSerivceCustomerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePaymentSerivceCustomerMutation, CreatePaymentSerivceCustomerMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePaymentSerivceCustomerMutation, CreatePaymentSerivceCustomerMutationVariables>(CreatePaymentSerivceCustomerDocument, baseOptions);\n      }\nexport type CreatePaymentSerivceCustomerMutationHookResult = ReturnType<typeof useCreatePaymentSerivceCustomerMutation>;\nexport type CreatePaymentSerivceCustomerMutationResult = ApolloReactCommon.MutationResult<CreatePaymentSerivceCustomerMutation>;\nexport type CreatePaymentSerivceCustomerMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePaymentSerivceCustomerMutation, CreatePaymentSerivceCustomerMutationVariables>;\nexport const SubscribeToPricePlanDocument = gql`\n    mutation subscribeToPricePlan($priceplan: String!) {\n  subscribeToPricePlan(priceplan: $priceplan)\n}\n    `;\nexport type SubscribeToPricePlanMutationFn = ApolloReactCommon.MutationFunction<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>;\n\n/**\n * __useSubscribeToPricePlanMutation__\n *\n * To run a mutation, you first call `useSubscribeToPricePlanMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubscribeToPricePlanMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [subscribeToPricePlanMutation, { data, loading, error }] = useSubscribeToPricePlanMutation({\n *   variables: {\n *      priceplan: // value for 'priceplan'\n *   },\n * });\n */\nexport function useSubscribeToPricePlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>(SubscribeToPricePlanDocument, baseOptions);\n      }\nexport type SubscribeToPricePlanMutationHookResult = ReturnType<typeof useSubscribeToPricePlanMutation>;\nexport type SubscribeToPricePlanMutationResult = ApolloReactCommon.MutationResult<SubscribeToPricePlanMutation>;\nexport type SubscribeToPricePlanMutationOptions = ApolloReactCommon.BaseMutationOptions<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;"]},"metadata":{},"sourceType":"module"}