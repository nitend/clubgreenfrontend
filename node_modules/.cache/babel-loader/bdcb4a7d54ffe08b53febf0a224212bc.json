{"ast":null,"code":"import React from'react';import moment from'moment';import{useBlockedDatesByPropertyQuery}from'../../../../generated/graphql';import{DateSelector}from'./DateSelector';import{LoadingAnimation}from'../../../pageframe/global/Messages/LoadingAnimation';import{ErrorMessage}from'../../../pageframe/global/Messages/ErrorMessage';export var TravelDatesPicker=function TravelDatesPicker(props){var propId=props.propertyId;if(!propId){propId=\"\";}var _useBlockedDatesByPro=useBlockedDatesByPropertyQuery({variables:{propertyId:propId}}),data=_useBlockedDatesByPro.data,loading=_useBlockedDatesByPro.loading,error=_useBlockedDatesByPro.error;if(loading){return React.createElement(LoadingAnimation,{message:\"Buchungen werden geladen\"});}if(error){return React.createElement(ErrorMessage,{error:error,show:true});}var blockedDates=[];if(data&&data.getBlockedDatesFromProperty){data.getBlockedDatesFromProperty.map(function(date){blockedDates.push(moment(date.dateTimeStamp));return true;});}return React.createElement(DateSelector,{blockedDates:blockedDates});};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/booking/myBooking/datasview/TravelDatesPicker.tsx"],"names":["React","moment","useBlockedDatesByPropertyQuery","DateSelector","LoadingAnimation","ErrorMessage","TravelDatesPicker","props","propId","propertyId","variables","data","loading","error","blockedDates","getBlockedDatesFromProperty","map","date","push","dateTimeStamp"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAA+B,QAA/B,CACA,OAASC,8BAAT,KAA8C,+BAA9C,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OAASC,gBAAT,KAAiC,qDAAjC,CACA,OAASC,YAAT,KAA6B,iDAA7B,CAMA,MAAO,IAAMC,CAAAA,iBAAmC,CAAG,QAAtCA,CAAAA,iBAAsC,CAACC,KAAD,CAAW,CAE3D,GAAIC,CAAAA,MAAM,CAAGD,KAAK,CAACE,UAAnB,CACA,GAAG,CAACD,MAAJ,CAAW,CACVA,MAAM,CAAG,EAAT,CACA,CAL0D,0BAO3BN,8BAA8B,CAAC,CAC1DQ,SAAS,CAAE,CACPD,UAAU,CAAED,MADL,CAD+C,CAAD,CAPH,CAOnDG,IAPmD,uBAOnDA,IAPmD,CAO7CC,OAP6C,uBAO7CA,OAP6C,CAOpCC,KAPoC,uBAOpCA,KAPoC,CAa1D,GAAGD,OAAH,CAAW,CACP,MAAO,qBAAC,gBAAD,EAAkB,OAAO,CAAE,0BAA3B,EAAP,CACH,CAED,GAAGC,KAAH,CAAS,CACL,MAAO,qBAAC,YAAD,EAAc,KAAK,CAAEA,KAArB,CAA4B,IAAI,CAAE,IAAlC,EAAP,CACH,CAED,GAAIC,CAAAA,YAAsB,CAAG,EAA7B,CAEA,GAAGH,IAAI,EAAIA,IAAI,CAACI,2BAAhB,CAA4C,CACxCJ,IAAI,CAACI,2BAAL,CAAiCC,GAAjC,CAAqC,SAACC,IAAD,CAAS,CAC1CH,YAAY,CAACI,IAAb,CAAkBjB,MAAM,CAACgB,IAAI,CAACE,aAAN,CAAxB,EACA,MAAO,KAAP,CACH,CAHD,EAIH,CAED,MACI,qBAAC,YAAD,EAAc,YAAY,CAAEL,YAA5B,EADJ,CAIH,CAlCM","sourcesContent":["import React from 'react'\nimport moment, { Moment } from 'moment'\nimport { useBlockedDatesByPropertyQuery} from '../../../../generated/graphql'\nimport { DateSelector } from './DateSelector'\nimport { LoadingAnimation } from '../../../pageframe/global/Messages/LoadingAnimation'\nimport { ErrorMessage } from '../../../pageframe/global/Messages/ErrorMessage'\n\ninterface Props {\n    propertyId: string | undefined\n}\n\nexport const TravelDatesPicker:  React.FC<Props> = (props) => {\n\n   var propId = props.propertyId;\n   if(!propId){\n    propId = \"\";\n   }\n\n    const {data, loading, error} = useBlockedDatesByPropertyQuery({\n        variables: {\n            propertyId: propId\n        }\n    })\n\n    if(loading){\n        return(<LoadingAnimation message={\"Buchungen werden geladen\"}/>)\n    }\n\n    if(error){\n        return(<ErrorMessage error={error} show={true}/>)\n    }\n\n    var blockedDates: Moment[] = [];\n\n    if(data && data.getBlockedDatesFromProperty){        \n        data.getBlockedDatesFromProperty.map((date) =>{\n            blockedDates.push(moment(date.dateTimeStamp))\n            return true;\n        })\n    }\n\n    return  (\n        <DateSelector blockedDates={blockedDates} />\n    )\n\n}"]},"metadata":{},"sourceType":"module"}