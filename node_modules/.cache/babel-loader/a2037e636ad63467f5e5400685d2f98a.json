{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/products/EditNewProperty.tsx\";\nimport React, { useState } from 'react';\nimport { useUpdateProductMutation, useCreateProductQuery } from '../../../generated/graphql';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct } from './ProductObject';\nexport const EditNewProperty = props => {\n  const [showMessage, setshowMessage] = useState(false);\n  const {\n    data,\n    error\n  } = useCreateProductQuery();\n  const [updateProduct] = useUpdateProductMutation();\n\n  async function onSubmit(values) {\n    var result = await updateProduct({\n      variables: {\n        product: formatProduct(values)\n      }\n    });\n\n    if (result) {\n      setshowMessage(true); // history.push(\"/admin#/properties\")\n    }\n  }\n\n  if (data && data.getNewProduct) {\n    const product = data.getNewProduct;\n    return React.createElement(Editor, {\n      entity: product,\n      store: onSubmit,\n      entityId: product.id,\n      imageuploadurl: \"http://localhost:4000/upload/property/image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(MessageView, {\n      severity: \"success\",\n      message: \"Die Daten wurden gespeichert\",\n      show: showMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n  if (error) {\n    return React.createElement(ErrorMessage, {\n      error: error,\n      show: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(LoadingAnimation, {\n    message: \"Daten werden geladen ...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/products/EditNewProperty.tsx"],"names":["React","useState","useUpdateProductMutation","useCreateProductQuery","Editor","MessageView","LoadingAnimation","ErrorMessage","formatProduct","EditNewProperty","props","showMessage","setshowMessage","data","error","updateProduct","onSubmit","values","result","variables","product","getNewProduct","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAsCC,wBAAtC,EAAgEC,qBAAhE,QAA4F,4BAA5F;AAEA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,QAA4B,6CAA5B;AACA,SAASC,gBAAT,QAAiC,kDAAjC;AACA,SAASC,YAAT,QAA6B,8CAA7B;AACA,SAASC,aAAT,QAA0C,iBAA1C;AAOA,OAAO,MAAMC,eAAgC,GAAIC,KAAD,IAAW;AAEvD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM;AAACY,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAgBX,qBAAqB,EAA3C;AAGA,QAAM,CAACY,aAAD,IAAkBb,wBAAwB,EAAhD;;AAEA,iBAAec,QAAf,CAAwBC,MAAxB,EAAyC;AACrC,QAAIC,MAAM,GAAG,MAAMH,aAAa,CAAC;AAC7BI,MAAAA,SAAS,EAAE;AACPC,QAAAA,OAAO,EAAEZ,aAAa,CAACS,MAAD;AADf;AADkB,KAAD,CAAhC;;AAKA,QAAGC,MAAH,EAAU;AACNN,MAAAA,cAAc,CAAC,IAAD,CAAd,CADM,CAEN;AACH;AACJ;;AAGD,MAAGC,IAAI,IAAIA,IAAI,CAACQ,aAAhB,EAA+B;AAC3B,UAAMD,OAAO,GAAGP,IAAI,CAACQ,aAArB;AACA,WACI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAED,OADZ;AAEI,MAAA,KAAK,EAAEJ,QAFX;AAGI,MAAA,QAAQ,EAAEI,OAAO,CAACE,EAHtB;AAII,MAAA,cAAc,EAAE,6CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,SAAvB;AAAkC,MAAA,OAAO,EAAE,8BAA3C;AAA2E,MAAA,IAAI,EAAEX,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAGD,MAAGG,KAAH,EAAS;AACL,WAAQ,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAArB;AAA4B,MAAA,IAAI,EAAE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAED,SAAQ,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CAzCM","sourcesContent":["import React, { useState } from 'react'\nimport { useGetProductQuery, Product, useUpdateProductMutation, useCreateProductQuery} from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct, newProduct } from './ProductObject';\n\n\ninterface Props {\n    \n}\n\nexport const EditNewProperty: React.FC<Props> = (props) => {\n\n    const [showMessage, setshowMessage] = useState(false);\n  \n    const {data, error} = useCreateProductQuery();\n    \n    \n    const [updateProduct] = useUpdateProductMutation();\n\n    async function onSubmit(values: Product) {     \n        var result = await updateProduct({\n            variables: {\n                product: formatProduct(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n            // history.push(\"/admin#/properties\")\n        }\n    }\n\n    \n    if(data && data.getNewProduct) {\n        const product = data.getNewProduct;     \n        return(\n            <Editor \n                entity={product} \n                store={onSubmit} \n                entityId={product.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}