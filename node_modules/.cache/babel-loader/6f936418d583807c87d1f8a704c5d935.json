{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/properties/propertyeditor/PropertyEditor.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useSavePropertyMutation, useGetPropertyQuery } from '../../../../generated/graphql';\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../../form/Editor';\nimport { MessageView } from '../../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../../pageframe/global/Messages/ErrorMessage';\nexport const newProperty = {\n  id: 0,\n  title: \"\",\n  subtext: \"\",\n  location: \"\",\n  lat: 0.0,\n  long: 0.0,\n  beds_adult: 0,\n  beds_kids: 0,\n  beds_tent: 0,\n  images: []\n};\nexport const PropertyEditor = props => {\n  const {\n    propertyId\n  } = useParams();\n  console.log(propertyId);\n  const [showMessage, setshowMessage] = useState(false);\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useGetPropertyQuery({\n    variables: {\n      id: parseInt(propertyId ? propertyId : \"0\")\n    }\n  });\n  useEffect(() => {\n    if (propertyId) {\n      refetch({\n        id: parseInt(propertyId)\n      });\n      console.log(\"refetched\" + propertyId);\n    }\n  }, [propertyId]);\n  const [saveProperty] = useSavePropertyMutation();\n\n  if (error) {\n    return React.createElement(ErrorMessage, {\n      error: error,\n      show: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n  async function onSubmit(values) {\n    values.__typename = undefined;\n    values.lat = parseFloat(values.lat + \"\");\n    values.long = parseFloat(values.long + \"\");\n    values.beds_adult = parseFloat(values.beds_adult + \"\");\n    values.beds_kids = parseFloat(values.beds_kids + \"\");\n    values.beds_tent = parseFloat(values.beds_tent + \"\");\n    var result = await saveProperty({\n      variables: {\n        property: values\n      }\n    });\n\n    if (result) {\n      setshowMessage(true);\n    }\n  }\n\n  var property = newProperty;\n\n  if (data && data.getProperty) {\n    property = data.getProperty;\n    console.log(\"called\" + property.id);\n    return React.createElement(Editor, {\n      entity: property,\n      store: onSubmit,\n      entityId: property.id,\n      imageuploadurl: \"http://localhost:4000/upload/property/image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(MessageView, {\n      severity: \"success\",\n      message: \"Die Daten wurden gespeichert\",\n      show: showMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(LoadingAnimation, {\n    message: \"Daten werden geladen ...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/properties/propertyeditor/PropertyEditor.tsx"],"names":["React","useState","useEffect","useSavePropertyMutation","useGetPropertyQuery","useParams","Editor","MessageView","LoadingAnimation","ErrorMessage","newProperty","id","title","subtext","location","lat","long","beds_adult","beds_kids","beds_tent","images","PropertyEditor","props","propertyId","console","log","showMessage","setshowMessage","data","loading","error","refetch","variables","parseInt","saveProperty","onSubmit","values","__typename","undefined","parseFloat","result","property","getProperty"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Property, useSavePropertyMutation, useGetPropertyQuery } from '../../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../../form/Editor';\nimport { MessageView } from '../../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../../pageframe/global/Messages/ErrorMessage';\n\n\ninterface Props {\n    \n}\n\nexport const newProperty: Property = { \n                    id: 0,\n                    title: \"\",\n                    subtext: \"\",\n                    location: \"\",\n                    lat: 0.0,\n                    long: 0.0,\n                    beds_adult: 0,\n                    beds_kids: 0,\n                    beds_tent: 0,\n                    images: [],   \n                }\n\nexport const PropertyEditor: React.FC<Props> = (props) => {\n\n    const { propertyId } = useParams()\n    console.log(propertyId);\n\n    const [showMessage, setshowMessage] = useState(false);\n\n    const {data, loading, error, refetch} = useGetPropertyQuery({\n        variables: {\n            id: parseInt(propertyId ? propertyId : \"0\")\n        }\n    });\n\n    useEffect(() => {\n        if(propertyId){\n            refetch({id: parseInt(propertyId)})\n            console.log(\"refetched\" + propertyId)\n        }       \n    }, [propertyId])\n    \n    const [saveProperty] = useSavePropertyMutation();\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n\n    async function onSubmit(values: Property) {\n        values.__typename = undefined;\n        values.lat = parseFloat(values.lat+\"\");\n        values.long = parseFloat(values.long+\"\");\n        values.beds_adult = parseFloat(values.beds_adult+\"\");\n        values.beds_kids = parseFloat(values.beds_kids+\"\");\n        values.beds_tent = parseFloat(values.beds_tent+\"\");\n  \n        var result = await saveProperty({\n            variables: {\n                property: values\n            }\n        });\n        if(result){\n            setshowMessage(true)\n        }\n    }\n\n    var property = newProperty;\n    if(data && data.getProperty) {\n        \n\n        property = data.getProperty\n        console.log(\"called\" + property.id)\n        return(\n            <Editor \n                entity={property} \n                store={onSubmit} \n                entityId={property.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}