{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/onboarding/payment/PaymentForm.tsx\";\nimport React, { useState, useContext } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Button } from \"@material-ui/core\";\nimport { ErrorMessage } from \"../../pageframe/global/Messages/ErrorMessage\";\nimport { useAddPaymentMethodMutation } from \"../../../generated/graphql\";\nimport { OnboardingContext } from \"../OnboardingContext\";\nconst style = {\n  base: {\n    fontSize: '16px',\n    color: '#424770',\n    '::placeholder': {\n      color: '#aab7c4'\n    }\n  },\n  invalid: {\n    color: '#9e2146'\n  }\n};\nexport const PaymentForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const context = useContext(OnboardingContext);\n  const [addPaymentMethod] = useAddPaymentMethodMutation();\n  const [error, seterror] = useState();\n  const [success, setsuccess] = useState();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      seterror(new Error('Bazahldienst nicht erreichbar'));\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement ? cardElement : {\n        token: \"\"\n      }\n    });\n\n    if (error) {\n      console.log('[error]', error);\n      seterror(error);\n    }\n\n    if (paymentMethod) {\n      const response = await addPaymentMethod({\n        variables: {\n          paymentMethodId: paymentMethod === null || paymentMethod === void 0 ? void 0 : paymentMethod.id\n        }\n      });\n\n      if (response) {\n        setsuccess(true);\n        context.setStep(context.step + 1);\n      }\n    }\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(CardElement, {\n    options: {\n      hidePostalCode: true,\n      style: style\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    disabled: !stripe,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), error ? React.createElement(ErrorMessage, {\n    error: error,\n    show: error ? true : false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/onboarding/payment/PaymentForm.tsx"],"names":["React","useState","useContext","CardElement","useStripe","useElements","Button","ErrorMessage","useAddPaymentMethodMutation","OnboardingContext","style","base","fontSize","color","invalid","PaymentForm","stripe","elements","context","addPaymentMethod","error","seterror","success","setsuccess","handleSubmit","event","preventDefault","Error","cardElement","getElement","paymentMethod","createPaymentMethod","type","card","token","console","log","response","variables","paymentMethodId","id","setStep","step","hidePostalCode"],"mappings":"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","sourcesContent":["\nimport React, { useState, useContext } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Button } from \"@material-ui/core\";\nimport { ErrorMessage } from \"../../pageframe/global/Messages/ErrorMessage\";\nimport { useProductsQuery, useAddPaymentMethodMutation } from \"../../../generated/graphql\";\nimport { OnboardingContext } from \"../OnboardingContext\";\n\n\ninterface Props {\n     \n}\n\n\nconst style =  {\n    base: {\n      fontSize: '16px',\n      color: '#424770',\n      '::placeholder': {\n        color: '#aab7c4',\n      },\n    },\n    invalid: {\n      color: '#9e2146',\n    }\n}\n  \n\nexport const PaymentForm: React.FC<Props> = () => {\n\n    const stripe = useStripe();\n    const elements = useElements();\n    const context = useContext(OnboardingContext);\n\n    const [addPaymentMethod] = useAddPaymentMethodMutation()\n\n    const [error, seterror] = useState()\n    const [success, setsuccess] = useState()\n\n\n    const handleSubmit = async (event: React.FormEvent) => {\n        // Block native form submission.\n        event.preventDefault();\n    \n        if (!stripe || !elements) {\n          seterror(new Error('Bazahldienst nicht erreichbar'));\n          return;\n        }\n    \n        // Get a reference to a mounted CardElement. Elements knows how\n        // to find your CardElement because there can only ever be one of\n        // each type of element.\n        const cardElement = elements.getElement(CardElement);\n    \n        // Use your card Element with other Stripe.js APIs\n        const {error, paymentMethod} = await stripe.createPaymentMethod({\n          type: 'card',\n          card: cardElement ? cardElement : {token: \"\"},\n        });\n    \n        if (error) {\n          console.log('[error]', error);\n          seterror(error)\n        } \n        if(paymentMethod){\n          const response = await addPaymentMethod({\n            variables: {\n              paymentMethodId: paymentMethod?.id\n            }\n          })\n          if(response){\n            setsuccess(true)\n            context.setStep(context.step + 1)\n          }\n        }        \n      };\n\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <CardElement options={{ hidePostalCode: true, style: style }}>\n                <Button type=\"submit\" disabled={!stripe}></Button>\n            </CardElement> \n            {error ? <ErrorMessage error={error} show={error ? true : false}/> : <div></div>}\n        </form>\n\n    )\n\n\n}"]},"metadata":{},"sourceType":"module"}