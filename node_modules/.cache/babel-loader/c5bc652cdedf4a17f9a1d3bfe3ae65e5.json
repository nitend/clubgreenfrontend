{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/sights/SightEditor.tsx\";\nimport React, { useState } from 'react';\nimport { useGetSightQuery, useSaveSightMutation } from '../../../generated/graphql';\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatSight, newSight } from './SightObject';\nexport const SightEditor = props => {\n  const {\n    sightId\n  } = useParams();\n  const [showMessage, setshowMessage] = useState(false);\n  const {\n    data,\n    error\n  } = useGetSightQuery({\n    variables: {\n      id: parseInt(sightId ? sightId : \"0\")\n    }\n  });\n  const [saveSight] = useSaveSightMutation();\n\n  async function onSubmit(values) {\n    var result = await saveSight({\n      variables: {\n        sight: formatSight(values)\n      }\n    });\n\n    if (result) {\n      setshowMessage(true);\n    }\n  }\n\n  if (data && data.getSight || sightId === \"0\") {\n    var property = newSight;\n\n    if (data === null || data === void 0 ? void 0 : data.getSight) {\n      property = data.getSight;\n    }\n\n    return React.createElement(Editor, {\n      entity: property,\n      store: onSubmit,\n      entityId: property.id,\n      imageuploadurl: \"http://localhost:4000/upload/property/image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(MessageView, {\n      severity: \"success\",\n      message: \"Die Daten wurden gespeichert\",\n      show: showMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n  if (error) {\n    return React.createElement(ErrorMessage, {\n      error: error,\n      show: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(LoadingAnimation, {\n    message: \"Daten werden geladen ...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/sights/SightEditor.tsx"],"names":["React","useState","useGetSightQuery","useSaveSightMutation","useParams","Editor","MessageView","LoadingAnimation","ErrorMessage","formatSight","newSight","SightEditor","props","sightId","showMessage","setshowMessage","data","error","variables","id","parseInt","saveSight","onSubmit","values","result","sight","getSight","property"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAgBC,gBAAhB,EAAkCC,oBAAlC,QAA8D,4BAA9D;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,QAA4B,6CAA5B;AACA,SAASC,gBAAT,QAAiC,kDAAjC;AACA,SAASC,YAAT,QAA6B,8CAA7B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,eAAtC;AAOA,OAAO,MAAMC,WAA4B,GAAIC,KAAD,IAAW;AAEnD,QAAM;AAAEC,IAAAA;AAAF,MAAcT,SAAS,EAA7B;AAEA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAACe,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAgBf,gBAAgB,CAAC;AACnCgB,IAAAA,SAAS,EAAE;AACPC,MAAAA,EAAE,EAAEC,QAAQ,CAACP,OAAO,GAAGA,OAAH,GAAa,GAArB;AADL;AADwB,GAAD,CAAtC;AAMA,QAAM,CAACQ,SAAD,IAAclB,oBAAoB,EAAxC;;AAEA,iBAAemB,QAAf,CAAwBC,MAAxB,EAAuC;AACnC,QAAIC,MAAM,GAAG,MAAMH,SAAS,CAAC;AACzBH,MAAAA,SAAS,EAAE;AACPO,QAAAA,KAAK,EAAEhB,WAAW,CAACc,MAAD;AADX;AADc,KAAD,CAA5B;;AAKA,QAAGC,MAAH,EAAU;AACNT,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACJ;;AAGD,MAAIC,IAAI,IAAIA,IAAI,CAACU,QAAd,IAA4Bb,OAAO,KAAK,GAA3C,EAAiD;AAC7C,QAAIc,QAAQ,GAAGjB,QAAf;;AACA,QAAGM,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEU,QAAT,EAAkB;AACdC,MAAAA,QAAQ,GAAGX,IAAI,CAACU,QAAhB;AACH;;AAED,WACI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAEC,QADZ;AAEI,MAAA,KAAK,EAAEL,QAFX;AAGI,MAAA,QAAQ,EAAEK,QAAQ,CAACR,EAHvB;AAII,MAAA,cAAc,EAAE,6CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,SAAvB;AAAkC,MAAA,OAAO,EAAE,8BAA3C;AAA2E,MAAA,IAAI,EAAEL,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAGD,MAAGG,KAAH,EAAS;AACL,WAAQ,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAArB;AAA4B,MAAA,IAAI,EAAE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAED,SAAQ,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CAhDM","sourcesContent":["import React, { useState } from 'react'\nimport { Sight, useGetSightQuery, useSaveSightMutation } from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatSight, newSight } from './SightObject';\n\n\ninterface Props {\n    \n}\n\nexport const SightEditor: React.FC<Props> = (props) => {\n\n    const { sightId } = useParams()\n\n    const [showMessage, setshowMessage] = useState(false);\n    const {data, error} = useGetSightQuery({\n        variables: {\n            id: parseInt(sightId ? sightId : \"0\")\n        }\n    });\n    \n    const [saveSight] = useSaveSightMutation();\n\n    async function onSubmit(values: Sight) {     \n        var result = await saveSight({\n            variables: {\n                sight: formatSight(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n        }\n    }\n\n    \n    if((data && data.getSight) || (sightId === \"0\")) {\n        var property = newSight;\n        if(data?.getSight){\n            property = data.getSight;\n        }\n        \n        return(\n            <Editor \n                entity={property} \n                store={onSubmit} \n                entityId={property.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}