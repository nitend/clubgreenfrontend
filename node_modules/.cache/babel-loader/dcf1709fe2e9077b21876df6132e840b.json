{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { App } from './App';\nimport { getAccessToken } from './accessToken';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(operation => {\n    const accessToken = getAccessToken();\n\n    if (accessToken) {\n      operation.setContext({\n        headers: {\n          authorization: `bearer ${accessToken}`\n        }\n      });\n    }\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst client = new ApolloClient({\n  link: ApolloLink.from([new TokenRefreshLink({\n    isTokenValidOrUndefined: () => !isTokenExpired() || typeof getAccessToken() !== 'string',\n    fetchAccessToken: () => {\n      return fetch(getEndpoint('getAccessTokenPath'), {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${getAccessToken()}`,\n          'refresh-token': getRefreshToken()\n        }\n      });\n    },\n    handleFetch: accessToken => {\n      const accessTokenDecrypted = jwtDecode(accessToken);\n      setAccessToken(accessToken);\n      setExpiresIn(parseExp(accessTokenDecrypted.exp).toString());\n    },\n    handleResponse: (operation, accessTokenField) => response => {// here you can parse response, handle errors, prepare returned token to\n      // further operations\n      // returned object should be like this:\n      // {\n      //    access_token: 'token string here'\n      // }\n    },\n    handleError: err => {\n      // full control over handling token fetch Error\n      console.warn('Your refresh token is invalid. Try to relogin');\n      console.error(err); // your custom action here\n\n      user.logout();\n    }\n  }), onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  }), requestLink, new HttpLink({\n    uri: 'http://localhost:4000/graphql',\n    credentials: 'include'\n  })]),\n  cache\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/index.tsx"],"names":["React","ReactDOM","ApolloProvider","App","getAccessToken","ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","Observable","TokenRefreshLink","cache","requestLink","operation","forward","observer","handle","Promise","resolve","then","accessToken","setContext","headers","authorization","catch","error","bind","unsubscribe","client","link","from","isTokenValidOrUndefined","isTokenExpired","fetchAccessToken","fetch","getEndpoint","method","Authorization","getRefreshToken","handleFetch","accessTokenDecrypted","jwtDecode","setAccessToken","setExpiresIn","parseExp","exp","toString","handleResponse","accessTokenField","response","handleError","err","console","warn","user","logout","graphQLErrors","networkError","log","uri","credentials","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloProvider} from '@apollo/react-hooks'\nimport {App} from './App';\nimport { getAccessToken } from './accessToken';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\n\nconst cache = new InMemoryCache({});\n\n\nconst requestLink = new ApolloLink((operation, forward) =>\n  new Observable(observer => {\n    let handle: any;\n    Promise.resolve(operation)\n      .then((operation) => {\n            const accessToken = getAccessToken();\n            if(accessToken){\n                operation.setContext({\n                    headers: {\n                        authorization: `bearer ${accessToken}`\n                    } \n                })\n            }\n        })\n      .catch(observer.error.bind(observer));\n\n    return () => {\n      if (handle) handle.unsubscribe();\n    };\n  })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n        isTokenValidOrUndefined: () => !isTokenExpired() || typeof getAccessToken() !== 'string',\n        fetchAccessToken: () => {\n          return fetch(getEndpoint('getAccessTokenPath'), {\n            method: 'GET',\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n              'refresh-token': getRefreshToken()\n            }\n          });\n        },\n        handleFetch: accessToken => {\n          const accessTokenDecrypted = jwtDecode(accessToken);\n          setAccessToken(accessToken);\n          setExpiresIn(parseExp(accessTokenDecrypted.exp).toString());\n        },\n        handleResponse: (operation, accessTokenField) => response => {\n          // here you can parse response, handle errors, prepare returned token to\n          // further operations\n    \n          // returned object should be like this:\n          // {\n          //    access_token: 'token string here'\n          // }\n        },\n        handleError: err => {\n            // full control over handling token fetch Error\n            console.warn('Your refresh token is invalid. Try to relogin');\n            console.error(err);\n    \n            // your custom action here\n            user.logout();\n        }\n      }),\n    onError(({ graphQLErrors, networkError }) => {\n        console.log(graphQLErrors);\n        console.log(networkError)\n    }),\n    requestLink,\n    new HttpLink({\n        uri: 'http://localhost:4000/graphql',\n        credentials: 'include'\n    })\n  ]),\n  cache\n});\n\nReactDOM.render(\n    <ApolloProvider client={client} >\n        <App />\n    </ApolloProvider>, document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}