{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const AllBookingDocument = gql`\n    query allBooking {\n  allBooking {\n    id\n    from\n    to\n    deleted\n    propertyId\n  }\n}\n    `;\n/**\n * __useAllBookingQuery__\n *\n * To run a query within a React component, call `useAllBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllBookingQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AllBookingDocument, baseOptions);\n}\nexport function useAllBookingLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AllBookingDocument, baseOptions);\n}\nexport const BookingsByPropertyDocument = gql`\n    query BookingsByProperty($propertyId: Float!) {\n  activeBookingsForProperty(propertyId: $propertyId) {\n    propertyId\n    to\n    from\n  }\n}\n    `;\n/**\n * __useBookingsByPropertyQuery__\n *\n * To run a query within a React component, call `useBookingsByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookingsByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookingsByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\n\nexport function useBookingsByPropertyQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(BookingsByPropertyDocument, baseOptions);\n}\nexport function useBookingsByPropertyLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(BookingsByPropertyDocument, baseOptions);\n}\nexport const CreateMyBookingDocument = gql`\n    mutation CreateMyBooking($to: Float!, $from: Float!, $propertyId: Float!) {\n  bookProperty(to: $to, from: $from, propertyId: $propertyId)\n}\n    `;\n\n/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      to: // value for 'to'\n *      from: // value for 'from'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useCreateMyBookingMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(CreateMyBookingDocument, baseOptions);\n}\nexport const ByeDocument = gql`\n    query Bye {\n  bye\n}\n    `;\n/**\n * __useByeQuery__\n *\n * To run a query within a React component, call `useByeQuery` and pass it any options that fit your needs.\n * When your component renders, `useByeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useByeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useByeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ByeDocument, baseOptions);\n}\nexport function useByeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ByeDocument, baseOptions);\n}\nexport const DeleteBookingDocument = gql`\n    mutation deleteBooking($bookingId: Float!) {\n  deleteBooking(bookingId: $bookingId)\n}\n    `;\n\n/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */\nexport function useDeleteBookingMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(DeleteBookingDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n  }\n}\n    `;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LogoutDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    email\n    id\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MeDocument, baseOptions);\n}\nexport const MyBookingDocument = gql`\n    query MyBooking {\n  myBooking {\n    id\n    from\n    to\n    property {\n      id\n      title\n      location\n      long\n      lat\n      images\n      beds_adult\n      beds_kids\n      subtext\n    }\n  }\n}\n    `;\n/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMyBookingQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MyBookingDocument, baseOptions);\n}\nexport function useMyBookingLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MyBookingDocument, baseOptions);\n}\nexport const PropertiesDocument = gql`\n    query Properties {\n  allProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n/**\n * __usePropertiesQuery__\n *\n * To run a query within a React component, call `usePropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePropertiesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePropertiesQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(PropertiesDocument, baseOptions);\n}\nexport function usePropertiesLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(PropertiesDocument, baseOptions);\n}\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RegisterDocument, baseOptions);\n}\nexport const SavePropertyDocument = gql`\n    mutation saveProperty($property: PropertyInput!) {\n  saveProperty(property: $property)\n}\n    `;\n\n/**\n * __useSavePropertyMutation__\n *\n * To run a mutation, you first call `useSavePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSavePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [savePropertyMutation, { data, loading, error }] = useSavePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useSavePropertyMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SavePropertyDocument, baseOptions);\n}\nexport const TeaserPropertiesDocument = gql`\n    query TeaserProperties {\n  teaserProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n/**\n * __useTeaserPropertiesQuery__\n *\n * To run a query within a React component, call `useTeaserPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeaserPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeaserPropertiesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTeaserPropertiesQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(TeaserPropertiesDocument, baseOptions);\n}\nexport function useTeaserPropertiesLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(TeaserPropertiesDocument, baseOptions);\n}\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useUsersQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(UsersDocument, baseOptions);\n}\nexport function useUsersLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(UsersDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","AllBookingDocument","useAllBookingQuery","baseOptions","useQuery","useAllBookingLazyQuery","useLazyQuery","BookingsByPropertyDocument","useBookingsByPropertyQuery","useBookingsByPropertyLazyQuery","CreateMyBookingDocument","useCreateMyBookingMutation","useMutation","ByeDocument","useByeQuery","useByeLazyQuery","DeleteBookingDocument","useDeleteBookingMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","MeDocument","useMeQuery","useMeLazyQuery","MyBookingDocument","useMyBookingQuery","useMyBookingLazyQuery","PropertiesDocument","usePropertiesQuery","usePropertiesLazyQuery","RegisterDocument","useRegisterMutation","SavePropertyDocument","useSavePropertyMutation","TeaserPropertiesDocument","useTeaserPropertiesQuery","useTeaserPropertiesLazyQuery","UsersDocument","useUsersQuery","useUsersLazyQuery"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type Booking = {\n   __typename?: 'Booking',\n  id: Scalars['Int'],\n  user: Scalars['String'],\n  date: Scalars['Float'],\n  from: Scalars['Float'],\n  to: Scalars['Float'],\n  deleted: Scalars['Boolean'],\n  propertyId: Scalars['Float'],\n  property: Property,\n};\n\nexport type Email = {\n   __typename?: 'Email',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  verified: Scalars['Boolean'],\n  verification_token: Scalars['String'],\n  verification_date: Scalars['Float'],\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokeForUser: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  bookProperty: Scalars['Boolean'],\n  deleteBooking: Scalars['Boolean'],\n  saveProperty: Scalars['Boolean'],\n  createProperty: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokeForUserArgs = {\n  userId: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  password: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String']\n};\n\n\nexport type MutationBookPropertyArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float'],\n  propertyId: Scalars['Float']\n};\n\n\nexport type MutationDeleteBookingArgs = {\n  bookingId: Scalars['Float']\n};\n\n\nexport type MutationSavePropertyArgs = {\n  property: PropertyInput\n};\n\n\nexport type MutationCreatePropertyArgs = {\n  images: Array<Scalars['String']>,\n  beds_tent: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  title: Scalars['String']\n};\n\nexport type Property = {\n   __typename?: 'Property',\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_tent: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type PropertyInput = {\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_tent: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  hello: Scalars['String'],\n  bye: Scalars['String'],\n  me?: Maybe<User>,\n  users: Array<User>,\n  myBooking?: Maybe<Booking>,\n  allBooking?: Maybe<Array<Booking>>,\n  propertiesEvalable?: Maybe<Array<Booking>>,\n  allProperties?: Maybe<Array<Property>>,\n  teaserProperties?: Maybe<Array<Property>>,\n  activeBookingsForProperty?: Maybe<Array<Booking>>,\n};\n\n\nexport type QueryPropertiesEvalableArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float']\n};\n\n\nexport type QueryActiveBookingsForPropertyArgs = {\n  propertyId: Scalars['Float']\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  username: Scalars['String'],\n  email: Scalars['String'],\n  tokenVersion: Scalars['Float'],\n  email_verified: Scalars['Boolean'],\n};\n\nexport type AllBookingQueryVariables = {};\n\n\nexport type AllBookingQuery = (\n  { __typename?: 'Query' }\n  & { allBooking: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'from' | 'to' | 'deleted' | 'propertyId'>\n  )>> }\n);\n\nexport type BookingsByPropertyQueryVariables = {\n  propertyId: Scalars['Float']\n};\n\n\nexport type BookingsByPropertyQuery = (\n  { __typename?: 'Query' }\n  & { activeBookingsForProperty: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'propertyId' | 'to' | 'from'>\n  )>> }\n);\n\nexport type CreateMyBookingMutationVariables = {\n  to: Scalars['Float'],\n  from: Scalars['Float'],\n  propertyId: Scalars['Float']\n};\n\n\nexport type CreateMyBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'bookProperty'>\n);\n\nexport type ByeQueryVariables = {};\n\n\nexport type ByeQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'bye'>\n);\n\nexport type DeleteBookingMutationVariables = {\n  bookingId: Scalars['Float']\n};\n\n\nexport type DeleteBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteBooking'>\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'email' | 'id'>\n  )> }\n);\n\nexport type MyBookingQueryVariables = {};\n\n\nexport type MyBookingQuery = (\n  { __typename?: 'Query' }\n  & { myBooking: Maybe<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'from' | 'to'>\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id' | 'title' | 'location' | 'long' | 'lat' | 'images' | 'beds_adult' | 'beds_kids' | 'subtext'>\n    ) }\n  )> }\n);\n\nexport type PropertiesQueryVariables = {};\n\n\nexport type PropertiesQuery = (\n  { __typename?: 'Query' }\n  & { allProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type RegisterMutationVariables = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type SavePropertyMutationVariables = {\n  property: PropertyInput\n};\n\n\nexport type SavePropertyMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveProperty'>\n);\n\nexport type TeaserPropertiesQueryVariables = {};\n\n\nexport type TeaserPropertiesQuery = (\n  { __typename?: 'Query' }\n  & { teaserProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\n\nexport const AllBookingDocument = gql`\n    query allBooking {\n  allBooking {\n    id\n    from\n    to\n    deleted\n    propertyId\n  }\n}\n    `;\n\n/**\n * __useAllBookingQuery__\n *\n * To run a query within a React component, call `useAllBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllBookingQuery, AllBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllBookingQuery, AllBookingQueryVariables>(AllBookingDocument, baseOptions);\n      }\nexport function useAllBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllBookingQuery, AllBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllBookingQuery, AllBookingQueryVariables>(AllBookingDocument, baseOptions);\n        }\nexport type AllBookingQueryHookResult = ReturnType<typeof useAllBookingQuery>;\nexport type AllBookingLazyQueryHookResult = ReturnType<typeof useAllBookingLazyQuery>;\nexport type AllBookingQueryResult = ApolloReactCommon.QueryResult<AllBookingQuery, AllBookingQueryVariables>;\nexport const BookingsByPropertyDocument = gql`\n    query BookingsByProperty($propertyId: Float!) {\n  activeBookingsForProperty(propertyId: $propertyId) {\n    propertyId\n    to\n    from\n  }\n}\n    `;\n\n/**\n * __useBookingsByPropertyQuery__\n *\n * To run a query within a React component, call `useBookingsByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookingsByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookingsByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useBookingsByPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>(BookingsByPropertyDocument, baseOptions);\n      }\nexport function useBookingsByPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>(BookingsByPropertyDocument, baseOptions);\n        }\nexport type BookingsByPropertyQueryHookResult = ReturnType<typeof useBookingsByPropertyQuery>;\nexport type BookingsByPropertyLazyQueryHookResult = ReturnType<typeof useBookingsByPropertyLazyQuery>;\nexport type BookingsByPropertyQueryResult = ApolloReactCommon.QueryResult<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>;\nexport const CreateMyBookingDocument = gql`\n    mutation CreateMyBooking($to: Float!, $from: Float!, $propertyId: Float!) {\n  bookProperty(to: $to, from: $from, propertyId: $propertyId)\n}\n    `;\nexport type CreateMyBookingMutationFn = ApolloReactCommon.MutationFunction<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\n\n/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      to: // value for 'to'\n *      from: // value for 'from'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useCreateMyBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateMyBookingMutation, CreateMyBookingMutationVariables>(CreateMyBookingDocument, baseOptions);\n      }\nexport type CreateMyBookingMutationHookResult = ReturnType<typeof useCreateMyBookingMutation>;\nexport type CreateMyBookingMutationResult = ApolloReactCommon.MutationResult<CreateMyBookingMutation>;\nexport type CreateMyBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\nexport const ByeDocument = gql`\n    query Bye {\n  bye\n}\n    `;\n\n/**\n * __useByeQuery__\n *\n * To run a query within a React component, call `useByeQuery` and pass it any options that fit your needs.\n * When your component renders, `useByeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useByeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useByeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ByeQuery, ByeQueryVariables>) {\n        return ApolloReactHooks.useQuery<ByeQuery, ByeQueryVariables>(ByeDocument, baseOptions);\n      }\nexport function useByeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ByeQuery, ByeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ByeQuery, ByeQueryVariables>(ByeDocument, baseOptions);\n        }\nexport type ByeQueryHookResult = ReturnType<typeof useByeQuery>;\nexport type ByeLazyQueryHookResult = ReturnType<typeof useByeLazyQuery>;\nexport type ByeQueryResult = ApolloReactCommon.QueryResult<ByeQuery, ByeQueryVariables>;\nexport const DeleteBookingDocument = gql`\n    mutation deleteBooking($bookingId: Float!) {\n  deleteBooking(bookingId: $bookingId)\n}\n    `;\nexport type DeleteBookingMutationFn = ApolloReactCommon.MutationFunction<DeleteBookingMutation, DeleteBookingMutationVariables>;\n\n/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */\nexport function useDeleteBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteBookingMutation, DeleteBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteBookingMutation, DeleteBookingMutationVariables>(DeleteBookingDocument, baseOptions);\n      }\nexport type DeleteBookingMutationHookResult = ReturnType<typeof useDeleteBookingMutation>;\nexport type DeleteBookingMutationResult = ApolloReactCommon.MutationResult<DeleteBookingMutation>;\nexport type DeleteBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteBookingMutation, DeleteBookingMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    email\n    id\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const MyBookingDocument = gql`\n    query MyBooking {\n  myBooking {\n    id\n    from\n    to\n    property {\n      id\n      title\n      location\n      long\n      lat\n      images\n      beds_adult\n      beds_kids\n      subtext\n    }\n  }\n}\n    `;\n\n/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n      }\nexport function useMyBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n        }\nexport type MyBookingQueryHookResult = ReturnType<typeof useMyBookingQuery>;\nexport type MyBookingLazyQueryHookResult = ReturnType<typeof useMyBookingLazyQuery>;\nexport type MyBookingQueryResult = ApolloReactCommon.QueryResult<MyBookingQuery, MyBookingQueryVariables>;\nexport const PropertiesDocument = gql`\n    query Properties {\n  allProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __usePropertiesQuery__\n *\n * To run a query within a React component, call `usePropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PropertiesQuery, PropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<PropertiesQuery, PropertiesQueryVariables>(PropertiesDocument, baseOptions);\n      }\nexport function usePropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PropertiesQuery, PropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PropertiesQuery, PropertiesQueryVariables>(PropertiesDocument, baseOptions);\n        }\nexport type PropertiesQueryHookResult = ReturnType<typeof usePropertiesQuery>;\nexport type PropertiesLazyQueryHookResult = ReturnType<typeof usePropertiesLazyQuery>;\nexport type PropertiesQueryResult = ApolloReactCommon.QueryResult<PropertiesQuery, PropertiesQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const SavePropertyDocument = gql`\n    mutation saveProperty($property: PropertyInput!) {\n  saveProperty(property: $property)\n}\n    `;\nexport type SavePropertyMutationFn = ApolloReactCommon.MutationFunction<SavePropertyMutation, SavePropertyMutationVariables>;\n\n/**\n * __useSavePropertyMutation__\n *\n * To run a mutation, you first call `useSavePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSavePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [savePropertyMutation, { data, loading, error }] = useSavePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useSavePropertyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SavePropertyMutation, SavePropertyMutationVariables>) {\n        return ApolloReactHooks.useMutation<SavePropertyMutation, SavePropertyMutationVariables>(SavePropertyDocument, baseOptions);\n      }\nexport type SavePropertyMutationHookResult = ReturnType<typeof useSavePropertyMutation>;\nexport type SavePropertyMutationResult = ApolloReactCommon.MutationResult<SavePropertyMutation>;\nexport type SavePropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<SavePropertyMutation, SavePropertyMutationVariables>;\nexport const TeaserPropertiesDocument = gql`\n    query TeaserProperties {\n  teaserProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useTeaserPropertiesQuery__\n *\n * To run a query within a React component, call `useTeaserPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeaserPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeaserPropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTeaserPropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>(TeaserPropertiesDocument, baseOptions);\n      }\nexport function useTeaserPropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>(TeaserPropertiesDocument, baseOptions);\n        }\nexport type TeaserPropertiesQueryHookResult = ReturnType<typeof useTeaserPropertiesQuery>;\nexport type TeaserPropertiesLazyQueryHookResult = ReturnType<typeof useTeaserPropertiesLazyQuery>;\nexport type TeaserPropertiesQueryResult = ApolloReactCommon.QueryResult<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;"]},"metadata":{},"sourceType":"module"}