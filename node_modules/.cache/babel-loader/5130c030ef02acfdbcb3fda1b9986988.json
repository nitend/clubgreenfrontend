{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Routes } from './pages/pageframe/Routes';\nimport { setAccessToken } from './accessToken';\nimport { useMeQuery } from './generated/graphql';\nexport const AuthContext = React.createContext({\n  isAuthenticated: () => {\n    return true;\n  }\n});\nexport const App = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useMeQuery();\n  const [isloading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(\"http://localhost:4000/refresh_token\", {\n      method: \"POST\",\n      credentials: \"include\"\n    }).then(async x => {\n      const {\n        accessToken\n      } = await x.json();\n      setAccessToken(accessToken);\n      setLoading(false);\n    });\n  }, []);\n\n  const isAuth = () => {\n    if (data === null || data === void 0 ? void 0 : data.me) {\n      return true;\n    }\n\n    if (error) {\n      return false;\n    }\n\n    return false;\n  };\n\n  if (isloading) {\n    return React.createElement(AuthContext.Provider, {\n      value: {\n        isAuthenticated: isAuth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Routes, {\n      serverConnected: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(Routes, {\n    serverConnected: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/App.tsx"],"names":["React","useState","useEffect","Routes","setAccessToken","useMeQuery","AuthContext","createContext","isAuthenticated","App","data","loading","error","isloading","setLoading","fetch","method","credentials","then","x","accessToken","json","isAuth","me"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AASA,OAAO,MAAMC,WAAW,GAAGN,KAAK,CAACO,aAAN,CAA0B;AACjDC,EAAAA,eAAe,EAAE,MAAM;AAAC,WAAO,IAAP;AAAY;AADa,CAA1B,CAApB;AAIP,OAAO,MAAMC,GAAoB,GAAG,MAAM;AAEtC,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA;AAAhB,MAAyBP,UAAU,EAAzC;AACA,QAAM,CAACQ,SAAD,EAAYC,UAAZ,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,KAAK,CAAE,qCAAF,EAAyC;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,WAAW,EAAE;AAF6B,KAAzC,CAAL,CAGGC,IAHH,CAGQ,MAAMC,CAAN,IAAW;AACf,YAAM;AAACC,QAAAA;AAAD,UAAgB,MAAMD,CAAC,CAACE,IAAF,EAA5B;AACAjB,MAAAA,cAAc,CAACgB,WAAD,CAAd;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACC,KAPL;AAUH,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMQ,MAAM,GAAG,MAAM;AACjB,QAAGZ,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEa,EAAT,EAAY;AACR,aAAO,IAAP;AACH;;AACD,QAAGX,KAAH,EAAS;AACL,aAAO,KAAP;AACH;;AACD,WAAO,KAAP;AACH,GARD;;AAUA,MAAGC,SAAH,EAAa;AACT,WACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAACL,QAAAA,eAAe,EAAEc;AAAlB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,eAAe,EAAE,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAED,SAAO,oBAAC,MAAD;AAAQ,IAAA,eAAe,EAAE,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CArCM","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport { Routes } from './pages/pageframe/Routes'\nimport { setAccessToken } from './accessToken';\nimport { useMeQuery } from './generated/graphql';\n\ninterface Props {\n}\n\ntype auth = {\n    isAuthenticated: () => boolean\n}\n\nexport const AuthContext = React.createContext<auth>({\n    isAuthenticated: () => {return true}\n})\n\nexport const App: React.FC<Props> = () => {\n\n    const {data, loading, error} = useMeQuery()\n    const [isloading, setLoading] = useState(true);\n\n    useEffect(() => {\n        fetch (\"http://localhost:4000/refresh_token\", {\n            method: \"POST\",\n            credentials: \"include\"\n        }).then(async x => {\n            const {accessToken} = await x.json();\n            setAccessToken(accessToken)\n            setLoading(false)\n            }\n        );\n        \n    }, [])\n\n    const isAuth = () => {\n        if(data?.me){\n            return true\n        }\n        if(error){\n            return false\n        }\n        return false\n    }\n\n    if(isloading){\n        return (\n            <AuthContext.Provider value={{isAuthenticated: isAuth}}>\n                <Routes serverConnected={false}/>\n            </AuthContext.Provider>\n        );\n    }\n\n    return <Routes serverConnected={true}/>\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}