{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Routes } from './pages/pageframe/Routes';\nimport { setAccessToken } from './accessToken';\nimport { useMeQuery } from './generated/graphql';\nconst AuthContext = React.createContext(false);\nexport const App = () => {\n  const [loading, setLoading] = useState(true);\n  const {\n    data,\n    error\n  } = useMeQuery();\n\n  const isAuth = () => {\n    if (data) {\n      return true;\n    }\n\n    if (error) {\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"http://localhost:4000/refresh_token\", {\n      method: \"POST\",\n      credentials: \"include\"\n    }).then(async x => {\n      const {\n        accessToken\n      } = await x.json();\n      setAccessToken(accessToken);\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) {\n    return React.createElement(AuthContext.Provider, {\n      value: isAuth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Routes, {\n      serverConnected: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(Routes, {\n    serverConnected: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/App.tsx"],"names":["React","useState","useEffect","Routes","setAccessToken","useMeQuery","AuthContext","createContext","App","loading","setLoading","data","error","isAuth","fetch","method","credentials","then","x","accessToken","json"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAKA,MAAMC,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoB,KAApB,CAApB;AAEA,OAAO,MAAMC,GAAoB,GAAG,MAAM;AAEtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAACU,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAgBP,UAAU,EAAhC;;AAGA,QAAMQ,MAAM,GAAG,MAAM;AACjB,QAAGF,IAAH,EAAQ;AACJ,aAAO,IAAP;AACH;;AACD,QAAGC,KAAH,EAAU;AACN,aAAO,KAAP;AACH;AACJ,GAPD;;AASAV,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,KAAK,CAAE,qCAAF,EAAyC;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,WAAW,EAAE;AAF6B,KAAzC,CAAL,CAGGC,IAHH,CAGQ,MAAMC,CAAN,IAAW;AACf,YAAM;AAACC,QAAAA;AAAD,UAAgB,MAAMD,CAAC,CAACE,IAAF,EAA5B;AACAhB,MAAAA,cAAc,CAACe,WAAD,CAAd;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACC,KAPL;AAUH,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAGD,OAAH,EAAW;AACP,WACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAEI,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,eAAe,EAAE,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAED,SAAO,oBAAC,MAAD;AAAQ,IAAA,eAAe,EAAE,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CArCM","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport { Routes } from './pages/pageframe/Routes'\nimport { setAccessToken } from './accessToken';\nimport { useMeQuery } from './generated/graphql';\n\ninterface Props {\n}\n\nconst AuthContext = React.createContext(false)\n\nexport const App: React.FC<Props> = () => {\n\n    const [loading, setLoading] = useState(true);\n    const {data, error} = useMeQuery()\n     \n\n    const isAuth = () => {\n        if(data){\n            return true\n        } \n        if(error) {\n            return false\n        } \n    }\n\n    useEffect(() => {\n        fetch (\"http://localhost:4000/refresh_token\", {\n            method: \"POST\",\n            credentials: \"include\"\n        }).then(async x => {\n            const {accessToken} = await x.json();\n            setAccessToken(accessToken)\n            setLoading(false)\n            }\n        );\n        \n    }, [])\n\n    if(loading){\n        return (\n            <AuthContext.Provider value={isAuth}>\n                <Routes serverConnected={false}/>\n            </AuthContext.Provider>\n        );\n    }\n\n    return <Routes serverConnected={true}/>\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}