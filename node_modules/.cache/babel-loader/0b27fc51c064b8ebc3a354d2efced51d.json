{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/properties/propertyeditor/PropertyEditor.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useSavePropertyMutation, useGetPropertyQuery } from '../../../../generated/graphql';\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../../form/Editor';\nimport { MessageView } from '../../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../../pageframe/global/Messages/ErrorMessage';\nexport const PropertyEditor = props => {\n  const {\n    propertyId\n  } = useParams();\n  console.log(propertyId);\n  const [showMessage, setshowMessage] = useState(false);\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useGetPropertyQuery({\n    variables: {\n      id: parseInt(propertyId ? propertyId : \"0\")\n    }\n  });\n  useEffect(() => {\n    if (propertyId) {\n      refetch({\n        id: parseInt(propertyId)\n      });\n      console.log(\"refetched\" + propertyId);\n    }\n  }, [propertyId]);\n  const [saveProperty] = useSavePropertyMutation();\n\n  if (error) {\n    return React.createElement(ErrorMessage, {\n      error: error,\n      show: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    });\n  }\n\n  async function onSubmit(values) {\n    var result = await saveProperty({\n      variables: {\n        property: values\n      }\n    });\n\n    if (result) {\n      setshowMessage(true);\n    }\n  }\n\n  var property = newProperty;\n\n  if (data && data.getProperty) {\n    property = data.getProperty;\n    console.log(\"called\" + property.id);\n    return React.createElement(Editor, {\n      entity: property,\n      store: onSubmit,\n      entityId: property.id,\n      imageuploadurl: \"http://localhost:4000/upload/property/image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(MessageView, {\n      severity: \"success\",\n      message: \"Die Daten wurden gespeichert\",\n      show: showMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(LoadingAnimation, {\n    message: \"Daten werden geladen ...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/properties/propertyeditor/PropertyEditor.tsx"],"names":["React","useState","useEffect","useSavePropertyMutation","useGetPropertyQuery","useParams","Editor","MessageView","LoadingAnimation","ErrorMessage","PropertyEditor","props","propertyId","console","log","showMessage","setshowMessage","data","loading","error","refetch","variables","id","parseInt","saveProperty","onSubmit","values","result","property","newProperty","getProperty"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAmBC,uBAAnB,EAA4CC,mBAA5C,QAAuE,+BAAvE;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,gDAA5B;AACA,SAASC,gBAAT,QAAiC,qDAAjC;AACA,SAASC,YAAT,QAA6B,iDAA7B;AAOA,OAAO,MAAMC,cAA+B,GAAIC,KAAD,IAAW;AAEtD,QAAM;AAAEC,IAAAA;AAAF,MAAiBP,SAAS,EAAhC;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAEA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM;AAACgB,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAAkChB,mBAAmB,CAAC;AACxDiB,IAAAA,SAAS,EAAE;AACPC,MAAAA,EAAE,EAAEC,QAAQ,CAACX,UAAU,GAAGA,UAAH,GAAgB,GAA3B;AADL;AAD6C,GAAD,CAA3D;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGU,UAAH,EAAc;AACVQ,MAAAA,OAAO,CAAC;AAACE,QAAAA,EAAE,EAAEC,QAAQ,CAACX,UAAD;AAAb,OAAD,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcF,UAA1B;AACH;AACJ,GALQ,EAKN,CAACA,UAAD,CALM,CAAT;AAOA,QAAM,CAACY,YAAD,IAAiBrB,uBAAuB,EAA9C;;AAEA,MAAGgB,KAAH,EAAS;AACL,WAAQ,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAArB;AAA4B,MAAA,IAAI,EAAE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAED,iBAAeM,QAAf,CAAwBC,MAAxB,EAA0C;AAEtC,QAAIC,MAAM,GAAG,MAAMH,YAAY,CAAC;AAC5BH,MAAAA,SAAS,EAAE;AACPO,QAAAA,QAAQ,EAAEF;AADH;AADiB,KAAD,CAA/B;;AAKA,QAAGC,MAAH,EAAU;AACNX,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACJ;;AAED,MAAIY,QAAQ,GAAGC,WAAf;;AACA,MAAGZ,IAAI,IAAIA,IAAI,CAACa,WAAhB,EAA6B;AAGzBF,IAAAA,QAAQ,GAAGX,IAAI,CAACa,WAAhB;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWc,QAAQ,CAACN,EAAhC;AACA,WACI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAEM,QADZ;AAEI,MAAA,KAAK,EAAEH,QAFX;AAGI,MAAA,QAAQ,EAAEG,QAAQ,CAACN,EAHvB;AAII,MAAA,cAAc,EAAE,6CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,SAAvB;AAAkC,MAAA,OAAO,EAAE,8BAA3C;AAA2E,MAAA,IAAI,EAAEP,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAED,SAAQ,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CAxDM","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Property, useSavePropertyMutation, useGetPropertyQuery } from '../../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../../form/Editor';\nimport { MessageView } from '../../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../../pageframe/global/Messages/ErrorMessage';\n\n\ninterface Props {\n    \n}\n\nexport const PropertyEditor: React.FC<Props> = (props) => {\n\n    const { propertyId } = useParams()\n    console.log(propertyId);\n\n    const [showMessage, setshowMessage] = useState(false);\n\n    const {data, loading, error, refetch} = useGetPropertyQuery({\n        variables: {\n            id: parseInt(propertyId ? propertyId : \"0\")\n        }\n    });\n\n    useEffect(() => {\n        if(propertyId){\n            refetch({id: parseInt(propertyId)})\n            console.log(\"refetched\" + propertyId)\n        }       \n    }, [propertyId])\n    \n    const [saveProperty] = useSavePropertyMutation();\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n\n    async function onSubmit(values: Property) {\n      \n        var result = await saveProperty({\n            variables: {\n                property: values\n            }\n        });\n        if(result){\n            setshowMessage(true)\n        }\n    }\n\n    var property = newProperty;\n    if(data && data.getProperty) {\n        \n\n        property = data.getProperty\n        console.log(\"called\" + property.id)\n        return(\n            <Editor \n                entity={property} \n                store={onSubmit} \n                entityId={property.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}