{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/pageframe/global/user/register/RegisterFlow.tsx\";\nimport React, { useState } from \"react\";\nimport './styles.css';\nimport { RegisterForm } from \"./RegisterForm\";\nimport { useRegisterMutation } from \"../../../../../generated/graphql\";\nimport { Typography } from \"@material-ui/core\";\nexport const RegisterFlow = ({\n  history\n}) => {\n  const [Register] = useRegisterMutation();\n  const [registerComlete, setregisterComlete] = useState(false);\n\n  const registerFormFinished = values => {\n    loginFunc(values);\n  };\n\n  const loginFunc = async values => {\n    const response = await Register({\n      variables: {\n        email: values.email,\n        password: values.password,\n        username: \"\"\n      }\n    });\n\n    if (response && response.data) {\n      setregisterComlete(true);\n    }\n  };\n\n  if (registerComlete) {\n    return React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Vielen Dank\"), \"Wir haben Dir eine Email mit einem Akttivierungslink geschickt. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), \" Bitte aktiviere noch deinen Account.\");\n  }\n\n  return React.createElement(RegisterForm, {\n    registerFormFinished: registerFormFinished,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/pageframe/global/user/register/RegisterFlow.tsx"],"names":["React","useState","RegisterForm","useRegisterMutation","Typography","RegisterFlow","history","Register","registerComlete","setregisterComlete","registerFormFinished","values","loginFunc","response","variables","email","password","username","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,cAAP;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAGA,OAAO,MAAMC,YAA2C,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAEtE,QAAM,CAACC,QAAD,IAAaJ,mBAAmB,EAAtC;AACA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;;AAEA,QAAMS,oBAAoB,GAAIC,MAAD,IAA+C;AACxEC,IAAAA,SAAS,CAACD,MAAD,CAAT;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAOD,MAAP,IAAqD;AACnE,UAAME,QAAQ,GAAG,MAAMN,QAAQ,CAAC;AAC5BO,MAAAA,SAAS,EAAE;AACPC,QAAAA,KAAK,EAAEJ,MAAM,CAACI,KADP;AAEPC,QAAAA,QAAQ,EAAEL,MAAM,CAACK,QAFV;AAGPC,QAAAA,QAAQ,EAAE;AAHH;AADiB,KAAD,CAA/B;;AAQA,QAAGJ,QAAQ,IAAIA,QAAQ,CAACK,IAAxB,EAA6B;AACzBT,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;AACJ,GAZD;;AAaA,MAAGD,eAAH,EAAmB;AACf,WACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,sEAEoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFpE,0CADJ;AAMH;;AAGD,SACI,oBAAC,YAAD;AAAc,IAAA,oBAAoB,EAAEE,oBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAnCM","sourcesContent":["import React, { useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport './styles.css'\nimport { RegisterForm } from \"./RegisterForm\";\nimport { useRegisterMutation } from \"../../../../../generated/graphql\";\nimport { Typography } from \"@material-ui/core\";\n\n\nexport const RegisterFlow: React.FC<RouteComponentProps> = ({history}) => {\n\n    const [Register] = useRegisterMutation()\n    const [registerComlete, setregisterComlete] = useState(false)\n\n    const registerFormFinished = (values: {email: string, password: string}) => {\n        loginFunc(values);\n    }\n\n    const loginFunc = async (values: {email: string, password: string}) => {\n        const response = await Register({\n            variables: {\n                email: values.email, \n                password: values.password,\n                username: \"\"\n            }\n        })\n        \n        if(response && response.data){\n            setregisterComlete(true)\n        }\n    }\n    if(registerComlete){\n        return (\n            <Typography>\n                <div>Vielen Dank</div>\n                Wir haben Dir eine Email mit einem Akttivierungslink geschickt. <br/> Bitte aktiviere noch deinen Account.\n            </Typography>\n        )\n    }\n\n\n    return (\n        <RegisterForm registerFormFinished={registerFormFinished}/>\n    )\n};"]},"metadata":{},"sourceType":"module"}