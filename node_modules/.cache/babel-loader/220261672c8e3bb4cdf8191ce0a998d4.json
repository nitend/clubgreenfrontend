{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/form/EditorForm.tsx\";\nimport React from 'react';\nimport { Button, TextField, Grid } from '@material-ui/core';\nimport { Formik, Form } from 'formik';\nimport { ImageList } from '../imagehandler/ImageList';\nexport const EditorForm = props => {\n  return React.createElement(Formik, {\n    initialValues: props.values,\n    onSubmit: props.onSubmit,\n    enableReinitialize: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, ({\n    values,\n    handleChange,\n    handleBlur\n  }) => React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, Object.entries(values).map(([key, value]) => {\n    if (key == \"images\") {\n      if (value && value instanceof Array) {\n        if (value[0] && typeof value[0] == 'string') {\n          return React.createElement(ImageList, {\n            imageUrlApends: value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22\n            },\n            __self: this\n          });\n        }\n\n        console.log(\"no values or no string\");\n      }\n\n      console.log(\"images undefined or no Array\");\n    } else {\n      return React.createElement(Grid, {\n        item: true,\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        name: key,\n        label: key,\n        value: value ? value : \"\",\n        onChange: handleChange,\n        onBlur: handleBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }));\n    }\n  }), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"speichern\")))));\n};\n/*       \n<pre>\n{JSON.stringify(values, null, 2)}\n</pre>\n*/","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/form/EditorForm.tsx"],"names":["React","Button","TextField","Grid","Formik","Form","ImageList","EditorForm","props","values","onSubmit","handleChange","handleBlur","Object","entries","map","key","value","Array","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,IAA5B,QAAwC,mBAAxC;AACA,SAASC,MAAT,EAAkBC,IAAlB,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAOA,OAAO,MAAMC,UAA2B,GAAIC,KAAD,IAAW;AAElD,SACI,oBAAC,MAAD;AAAQ,IAAA,aAAa,EAAEA,KAAK,CAACC,MAA7B;AAAqC,IAAA,QAAQ,EAAED,KAAK,CAACE,QAArD;AAA+D,IAAA,kBAAkB,EAAE,IAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC;AAACD,IAAAA,MAAD;AAASE,IAAAA,YAAT;AAAuBC,IAAAA;AAAvB,GAAD,KACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,SAAS,EAAC,QAA1B;AAAmC,IAAA,OAAO,EAAE,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSC,MAAM,CAACC,OAAP,CAAeL,MAAf,EAAuBM,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC1C,QAAGD,GAAG,IAAI,QAAV,EAAmB;AACf,UAAGC,KAAK,IAAIA,KAAK,YAAYC,KAA7B,EAAoC;AAChC,YAAGD,KAAK,CAAC,CAAD,CAAL,IAAY,OAAOA,KAAK,CAAC,CAAD,CAAZ,IAAmB,QAAlC,EAA4C;AACxC,iBAAO,oBAAC,SAAD;AAAW,YAAA,cAAc,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACDE,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;;AACDD,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,KARD,MAQO;AACH,aAAO,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,GAAG,EAAEJ,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,oBAAC,SAAD;AACA,QAAA,IAAI,EAAEA,GADN;AAEA,QAAA,KAAK,EAAEA,GAFP;AAGA,QAAA,KAAK,EAAEC,KAAK,GAAGA,KAAH,GAAW,EAHvB;AAIA,QAAA,QAAQ,EAAEN,YAJV;AAKA,QAAA,MAAM,EAAEC,UALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL,CAAP;AASH;AACA,GApBJ,CADT,EAuBQ,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,IAAI,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,CAvBR,CADA,CAFR,CADJ;AAuCH,CAzCM;AA2CN","sourcesContent":["import React from 'react'\nimport { Button, TextField, Grid } from '@material-ui/core'\nimport { Formik , Form} from 'formik'\nimport { ImageList } from '../imagehandler/ImageList'\n\ninterface Props {\n    values: any;\n    onSubmit: (values: any) => void;\n}\n\nexport const EditorForm: React.FC<Props> = (props) => {\n\n    return (\n        <Formik initialValues={props.values} onSubmit={props.onSubmit} enableReinitialize={true}>\n            {({values, handleChange, handleBlur}) => (\n                <Form>\n                <Grid container direction=\"column\" spacing={4}>\n                        {Object.entries(values).map(([key, value]) => {\n                            if(key == \"images\"){\n                                if(value && value instanceof Array) {\n                                    if(value[0] && typeof value[0] == 'string' ){\n                                        return <ImageList imageUrlApends={value}></ImageList> \n                                    } \n                                    console.log(\"no values or no string\") \n                                }\n                                console.log(\"images undefined or no Array\") \n                            } else {\n                                return <Grid item key={key}>\n                                            <TextField \n                                            name={key}\n                                            label={key}\n                                            value={value ? value : \"\"} \n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            />\n                                        </Grid>\n                            }\n                            }\n                        )} \n                        <Grid item>\n                            <Button variant=\"contained\" type=\"submit\">\n                                speichern\n                            </Button>\n                        </Grid>\n                    </Grid> \n                </Form>  \n            ) }           \n        </Formik>\n    )\n    \n\n}\n\n /*       \n<pre>\n{JSON.stringify(values, null, 2)}\n</pre>\n*/"]},"metadata":{},"sourceType":"module"}