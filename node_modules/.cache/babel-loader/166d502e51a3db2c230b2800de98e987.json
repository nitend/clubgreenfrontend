{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/properties/propertyeditor/PropertyEditor.tsx\";\nimport React, { useState } from 'react';\nimport { useSavePropertyMutation, usePropertiesQuery } from '../../../../generated/graphql';\nimport { EditorForm } from '../../form/EditorForm';\nimport { useParams } from 'react-router-dom';\nimport { PictureUpload } from '../../imagehandler/PictureUpload';\nimport { Container } from '@material-ui/core';\nimport { ResponseMessage } from '../../../pageframe/global/Messages/ResponseMessage';\nexport const newProperty = {\n  id: 0,\n  title: \"\",\n  subtext: \"\",\n  location: \"\",\n  lat: 0.0,\n  long: 0.0,\n  beds_adult: 0,\n  beds_kids: 0,\n  beds_tent: 0,\n  images: []\n};\nexport const PropertyEditor = props => {\n  const {\n    propertyId\n  } = useParams();\n  const [showMessage, setshowMessage] = useState(false);\n  const {\n    data,\n    loading,\n    error\n  } = usePropertiesQuery();\n\n  if (loading) {\n    console.log('loading');\n  }\n\n  if (error) {\n    console.log(error);\n  }\n\n  var property = newProperty;\n\n  if (data && data.allProperties && propertyId) {\n    var selectedProp = data.allProperties.find(prop => {\n      return prop.id == parseInt(propertyId);\n    });\n\n    if (selectedProp) {\n      property = selectedProp;\n    }\n  }\n\n  const [saveProperty] = useSavePropertyMutation();\n\n  async function onSubmit(values) {\n    var _result$data;\n\n    values.__typename = undefined;\n    values.lat = parseFloat(values.lat + \"\");\n    values.long = parseFloat(values.long + \"\");\n    values.beds_adult = parseFloat(values.beds_adult + \"\");\n    values.beds_kids = parseFloat(values.beds_kids + \"\");\n    values.beds_tent = parseFloat(values.beds_tent + \"\");\n    var result = await saveProperty({\n      variables: {\n        property: values\n      }\n    });\n\n    if ((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.saveProperty) {\n      setshowMessage(true);\n    }\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(EditorForm, {\n    values: property,\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(PictureUpload, {\n    url: \"http://localhost:4000/upload/property/image\",\n    propertyId: property.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), showMessage ? React.createElement(ResponseMessage, {\n    response: \"test\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }) : \"\");\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/properties/propertyeditor/PropertyEditor.tsx"],"names":["React","useState","useSavePropertyMutation","usePropertiesQuery","EditorForm","useParams","PictureUpload","Container","ResponseMessage","newProperty","id","title","subtext","location","lat","long","beds_adult","beds_kids","beds_tent","images","PropertyEditor","props","propertyId","showMessage","setshowMessage","data","loading","error","console","log","property","allProperties","selectedProp","find","prop","parseInt","saveProperty","onSubmit","values","__typename","undefined","parseFloat","result","variables"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Property, useSavePropertyMutation, usePropertiesQuery } from '../../../../generated/graphql'\nimport { EditorForm } from '../../form/EditorForm';\nimport { useParams } from 'react-router-dom';\nimport { PictureUpload } from '../../imagehandler/PictureUpload';\nimport { Container } from '@material-ui/core';\nimport { ResponseMessage } from '../../../pageframe/global/Messages/ResponseMessage';\n\n\ninterface Props {\n    \n}\n\nexport const newProperty: Property = { \n                    id: 0,\n                    title: \"\",\n                    subtext: \"\",\n                    location: \"\",\n                    lat: 0.0,\n                    long: 0.0,\n                    beds_adult: 0,\n                    beds_kids: 0,\n                    beds_tent: 0,\n                    images: [],   \n                }\n\nexport const PropertyEditor: React.FC<Props> = (props) => {\n\n    const { propertyId } = useParams()\n    const [showMessage, setshowMessage] = useState(false);\n\n    const {data, loading, error} = usePropertiesQuery();\n    \n    if(loading){\n        console.log('loading') \n    }\n\n    if(error){\n        console.log(error) \n    }\n\n    var property = newProperty;\n    if(data && data.allProperties && propertyId) {\n        var selectedProp = data.allProperties\n            .find((prop) => {\n                    return (prop.id == parseInt(propertyId))\n            })  \n        if(selectedProp){\n            property = selectedProp;\n        }\n    }\n\n    const [saveProperty] = useSavePropertyMutation();\n\n    async function onSubmit(values: Property) {\n\n        values.__typename = undefined;\n        values.lat = parseFloat(values.lat+\"\");\n        values.long = parseFloat(values.long+\"\");\n        values.beds_adult = parseFloat(values.beds_adult+\"\");\n        values.beds_kids = parseFloat(values.beds_kids+\"\");\n        values.beds_tent = parseFloat(values.beds_tent+\"\");\n  \n        var result = await saveProperty({\n            variables: {\n                property: values\n            }\n        });\n        if(result.data?.saveProperty){\n            setshowMessage(true)\n        }\n    }\n\n    return(\n        <Container>\n            <EditorForm values={property} onSubmit={onSubmit}/> \n            <PictureUpload url=\"http://localhost:4000/upload/property/image\" propertyId={property.id}/>     \n            {showMessage ? <ResponseMessage response={\"test\"} /> : \"\"}\n        </Container>\n    )\n\n\n\n}"]},"metadata":{},"sourceType":"module"}