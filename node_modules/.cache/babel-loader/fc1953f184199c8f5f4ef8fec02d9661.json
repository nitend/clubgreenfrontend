{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/pageframe/global/user/LoginForm.tsx\";\nimport React from \"react\";\nimport { useLoginMutation, MeDocument } from \"../../../../generated/graphql\";\nimport { setAccessToken } from \"../../../../accessToken\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useHistory } from \"react-router-dom\";\nexport const LoginForm = () => {\n  const history = useHistory();\n  const [Login] = useLoginMutation();\n\n  const loginFunc = async values => {\n    const response = await Login({\n      variables: {\n        email: values.email,\n        password: values.password\n      },\n      update: (store, {\n        data\n      }) => {\n        if (!data) {\n          return null;\n        }\n\n        store.writeQuery({\n          query: MeDocument,\n          data: {\n            me: data.login.user\n          }\n        });\n      }\n    });\n\n    if (response && response.data) {\n      setAccessToken(response.data.login.accessToken);\n      history.push('/booking');\n    }\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      width: '200px',\n      margin: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: loginFunc,\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email().required(\"Required\"),\n      password: Yup.string().min(8).required(\"Required\")\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props => {\n    const {\n      values,\n      touched,\n      errors,\n      handleChange,\n      handleBlur,\n      handleSubmit\n    } = props;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      error: errors.email && touched.email ? true : false,\n      fullWidth: true,\n      id: \"email\",\n      label: \"Email\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.password && touched.password ? \"Gib eine gültige Email-Adresse an.\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      error: errors.password && touched.password ? true : false,\n      fullWidth: true,\n      id: \"password\",\n      label: \"Passwort\",\n      type: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      helperText: errors.password && touched.password ? \"Dein Passwort muss mindestens 8 Zeichen lang sein.\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"outlined\",\n      style: {\n        margin: 'auto',\n        display: 'block',\n        marginTop: '24px'\n      },\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"anmelden\"));\n  }));\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/pageframe/global/user/LoginForm.tsx"],"names":["React","useLoginMutation","MeDocument","setAccessToken","TextField","Button","Formik","Yup","useHistory","LoginForm","history","Login","loginFunc","values","response","variables","email","password","update","store","data","writeQuery","query","me","login","user","accessToken","push","width","margin","object","shape","string","required","min","props","touched","errors","handleChange","handleBlur","handleSubmit","display","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useLoginMutation, MeDocument, MeQuery } from \"../../../../generated/graphql\";\nimport { setAccessToken } from \"../../../../accessToken\";\nimport { TextField, Button} from \"@material-ui/core\";\nimport {Formik} from 'formik'\nimport * as Yup from 'yup'\nimport { useHistory } from \"react-router-dom\";\n\ninterface Props {\n\n}\n\nexport const LoginForm: React.FC<Props> = () => {\n    const history = useHistory();\n    const [Login] = useLoginMutation()\n\n    const loginFunc = async (values: {email: string, password: string}) => {\n        const response = await Login({\n            variables: {\n                email: values.email, \n                password: values.password\n            },\n            update: (store, {data}) => {\n                if(!data){\n                    return null;\n                }\n                store.writeQuery<MeQuery>({\n                    query: MeDocument,\n                    data: {\n                        me: data.login.user\n                    }\n                })  \n            }\n        })\n        if(response && response.data){\n            setAccessToken(response.data.login.accessToken)\n            history.push('/booking')\n        }\n    }\n\n    return (\n        <div style={{width: '200px', margin: 'auto'}}>\n            <Formik initialValues={{\n                email: \"\",\n                password: \"\"\n            }} \n            onSubmit={loginFunc}\n            validationSchema={Yup.object().shape({\n                email: Yup.string()\n                  .email()\n                  .required(\"Required\"),\n                  password: Yup.string().min(8).required(\"Required\")\n              })} >\n                {props => {\n                const {\n                values,\n                touched,\n                errors,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                } = props;\n                return (\n                    <form onSubmit={handleSubmit}>\n                            <TextField \n                                error={errors.email && touched.email\n                                    ? true\n                                    : false\n                                }\n                                fullWidth={true}\n                                id=\"email\" \n                                label=\"Email\"\n                                value={values.email} \n                                onChange={handleChange} \n                                onBlur={handleBlur}\n                                helperText={errors.password && touched.password \n                                    ? \"Gib eine gültige Email-Adresse an.\"\n                                    : \"\"\n                                }\n                            />\n                            <TextField \n                                error={errors.password && touched.password\n                                    ? true\n                                    : false\n                                }\n                                fullWidth={true}\n                                id=\"password\" \n                                label=\"Passwort\"\n                                type=\"password\"\n                                value={values.password} \n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                helperText={errors.password && touched.password \n                                    ? \"Dein Passwort muss mindestens 8 Zeichen lang sein.\"\n                                    : \"\"\n                                }\n                            />                      \n                            <Button variant={\"outlined\"} style={{margin: 'auto', display: 'block', marginTop: '24px'}} type=\"submit\">anmelden</Button>                          \n                    </form>);\n            }}\n            </Formik>\n            </div>)\n};"]},"metadata":{},"sourceType":"module"}