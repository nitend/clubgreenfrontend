{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/ratings/RatingEditor.tsx\";\nimport React, { useState } from 'react';\nimport { useGetRatingQuery, useSaveRatingMutation } from '../../../generated/graphql';\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatRating, newRating } from './RatingObject';\nexport const RatingEditor = props => {\n  const {\n    ratingId\n  } = useParams();\n  const [showMessage, setshowMessage] = useState(false);\n  const {\n    data,\n    error,\n    refetch\n  } = useGetRatingQuery({\n    variables: {\n      id: parseInt(ratingId ? ratingId : \"0\")\n    }\n  });\n  const [saveRating] = useSaveRatingMutation();\n\n  async function onSubmit(values) {\n    var result = await saveRating({\n      variables: {\n        rating: formatRating(values)\n      }\n    });\n\n    if (result) {\n      setshowMessage(true);\n    }\n  }\n\n  if (data && data.getRating || ratingId == \"0\") {\n    var rating = newRating;\n\n    if (data === null || data === void 0 ? void 0 : data.getRating) {\n      rating = data.getRating;\n    }\n\n    return React.createElement(Editor, {\n      entity: rating,\n      store: onSubmit,\n      entityId: rating.id,\n      imageuploadurl: \"http://localhost:4000/upload/property/image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(MessageView, {\n      severity: \"success\",\n      message: \"Die Daten wurden gespeichert\",\n      show: showMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n  if (error) {\n    return React.createElement(ErrorMessage, {\n      error: error,\n      show: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(LoadingAnimation, {\n    message: \"Daten werden geladen ...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/ratings/RatingEditor.tsx"],"names":["React","useState","useGetRatingQuery","useSaveRatingMutation","useParams","Editor","MessageView","LoadingAnimation","ErrorMessage","formatRating","newRating","RatingEditor","props","ratingId","showMessage","setshowMessage","data","error","refetch","variables","id","parseInt","saveRating","onSubmit","values","result","rating","getRating"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,SAAwDC,iBAAxD,EAA2EC,qBAA3E,QAAgH,4BAAhH;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,QAA4B,6CAA5B;AACA,SAASC,gBAAT,QAAiC,kDAAjC;AACA,SAASC,YAAT,QAA6B,8CAA7B;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,gBAAxC;AAOA,OAAO,MAAMC,YAA6B,GAAIC,KAAD,IAAW;AAEpD,QAAM;AAAEC,IAAAA;AAAF,MAAeT,SAAS,EAA9B;AAEA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAACe,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,MAAyBhB,iBAAiB,CAAC;AAC7CiB,IAAAA,SAAS,EAAE;AACPC,MAAAA,EAAE,EAAEC,QAAQ,CAACR,QAAQ,GAAGA,QAAH,GAAc,GAAvB;AADL;AADkC,GAAD,CAAhD;AAMA,QAAM,CAACS,UAAD,IAAenB,qBAAqB,EAA1C;;AAEA,iBAAeoB,QAAf,CAAwBC,MAAxB,EAAwC;AACpC,QAAIC,MAAM,GAAG,MAAMH,UAAU,CAAC;AAC1BH,MAAAA,SAAS,EAAE;AACPO,QAAAA,MAAM,EAAEjB,YAAY,CAACe,MAAD;AADb;AADe,KAAD,CAA7B;;AAKA,QAAGC,MAAH,EAAU;AACNV,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACJ;;AAGD,MAAIC,IAAI,IAAIA,IAAI,CAACW,SAAd,IAA6Bd,QAAQ,IAAI,GAA5C,EAAkD;AAC9C,QAAIa,MAAM,GAAGhB,SAAb;;AACA,QAAGM,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEW,SAAT,EAAmB;AACfD,MAAAA,MAAM,GAAGV,IAAI,CAACW,SAAd;AACH;;AAED,WACI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAED,MADZ;AAEI,MAAA,KAAK,EAAEH,QAFX;AAGI,MAAA,QAAQ,EAAEG,MAAM,CAACN,EAHrB;AAII,MAAA,cAAc,EAAE,6CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,SAAvB;AAAkC,MAAA,OAAO,EAAE,8BAA3C;AAA2E,MAAA,IAAI,EAAEN,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAGD,MAAGG,KAAH,EAAS;AACL,WAAQ,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAArB;AAA4B,MAAA,IAAI,EAAE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAED,SAAQ,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CAhDM","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Sight, useGetSightQuery, useSaveSightMutation, useGetRatingQuery, useSaveRatingMutation, Rating } from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatRating, newRating } from './RatingObject';\n\n\ninterface Props {\n    \n}\n\nexport const RatingEditor: React.FC<Props> = (props) => {\n\n    const { ratingId } = useParams()\n\n    const [showMessage, setshowMessage] = useState(false);\n    const {data, error, refetch} = useGetRatingQuery({\n        variables: {\n            id: parseInt(ratingId ? ratingId : \"0\")\n        }\n    });\n    \n    const [saveRating] = useSaveRatingMutation();\n\n    async function onSubmit(values: Rating) {     \n        var result = await saveRating({\n            variables: {\n                rating: formatRating(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n        }\n    }\n\n    \n    if((data && data.getRating) || (ratingId == \"0\")) {\n        var rating = newRating;\n        if(data?.getRating){\n            rating = data.getRating;\n        }\n        \n        return(\n            <Editor \n                entity={rating} \n                store={onSubmit} \n                entityId={rating.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}