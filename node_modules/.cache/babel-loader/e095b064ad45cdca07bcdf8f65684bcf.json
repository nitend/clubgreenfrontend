{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject32(){var data=_taggedTemplateLiteral([\"\\n    mutation updateUserName($username: UserName!) {\\n  updateUserName(username: $username)\\n}\\n    \"]);_templateObject32=function _templateObject32(){return data;};return data;}function _templateObject31(){var data=_taggedTemplateLiteral([\"\\n    mutation updateUserAddress($useraddress: UserAddress!) {\\n  updateUserAddress(useraddress: $useraddress)\\n}\\n    \"]);_templateObject31=function _templateObject31(){return data;};return data;}function _templateObject30(){var data=_taggedTemplateLiteral([\"\\n    mutation updateProduct($product: ProductInput!) {\\n  updateProduct(product: $product)\\n}\\n    \"]);_templateObject30=function _templateObject30(){return data;};return data;}function _templateObject29(){var data=_taggedTemplateLiteral([\"\\n    mutation Register($username: String!, $email: String!, $password: String!) {\\n  register(username: $username, email: $email, password: $password)\\n}\\n    \"]);_templateObject29=function _templateObject29(){return data;};return data;}function _templateObject28(){var data=_taggedTemplateLiteral([\"\\n    mutation subscribeToPricePlan($priceplan: String!) {\\n  subscribeToPricePlan(priceplan: $priceplan)\\n}\\n    \"]);_templateObject28=function _templateObject28(){return data;};return data;}function _templateObject27(){var data=_taggedTemplateLiteral([\"\\n    mutation createPaymentSerivceCustomer {\\n  createPaymentServiceCustomer\\n}\\n    \"]);_templateObject27=function _templateObject27(){return data;};return data;}function _templateObject26(){var data=_taggedTemplateLiteral([\"\\n    mutation addPaymentMethod($paymentMethodId: String!) {\\n  addPaymentMethod(paymentMethodId: $paymentMethodId)\\n}\\n    \"]);_templateObject26=function _templateObject26(){return data;};return data;}function _templateObject25(){var data=_taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);_templateObject25=function _templateObject25(){return data;};return data;}function _templateObject24(){var data=_taggedTemplateLiteral([\"\\n    mutation Login($email: String!, $password: String!) {\\n  login(email: $email, password: $password) {\\n    accessToken\\n    user {\\n      id\\n      email\\n      paymentServiceId\\n    }\\n  }\\n}\\n    \"]);_templateObject24=function _templateObject24(){return data;};return data;}function _templateObject23(){var data=_taggedTemplateLiteral([\"\\n    query Users {\\n  users {\\n    id\\n    email\\n  }\\n}\\n    \"]);_templateObject23=function _templateObject23(){return data;};return data;}function _templateObject22(){var data=_taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    email\\n    id\\n    paymentServiceId\\n    gender\\n    firstname\\n    surname\\n    street\\n    streetNumber\\n    postalcode\\n    town\\n  }\\n}\\n    \"]);_templateObject22=function _templateObject22(){return data;};return data;}function _templateObject21(){var data=_taggedTemplateLiteral([\"\\n    query getSight($id: String!) {\\n  getSight(id: $id) {\\n    id\\n    title\\n    type\\n    subtext\\n    location\\n    long\\n    lat\\n    images\\n  }\\n}\\n    \"]);_templateObject21=function _templateObject21(){return data;};return data;}function _templateObject20(){var data=_taggedTemplateLiteral([\"\\n    query getRatingValuesByTarget($targettype: String!, $targetId: String!) {\\n  getRatingValuesByTarget(targettype: $targettype, targetId: $targetId) {\\n    targetId\\n    targettype\\n    ratings\\n    ratingValue\\n  }\\n}\\n    \"]);_templateObject20=function _templateObject20(){return data;};return data;}function _templateObject19(){var data=_taggedTemplateLiteral([\"\\n    query getRating($id: String!) {\\n  getRating(id: $id) {\\n    id\\n    targettype\\n    targetId\\n    comment\\n    rating\\n    title\\n    userId\\n  }\\n}\\n    \"]);_templateObject19=function _templateObject19(){return data;};return data;}function _templateObject18(){var data=_taggedTemplateLiteral([\"\\n    query getProperty($id: String!) {\\n  getProperty(id: $id) {\\n    id\\n    title\\n    subtext\\n    location\\n    long\\n    lat\\n    beds_adult\\n    beds_kids\\n    beds_tent\\n    images\\n  }\\n}\\n    \"]);_templateObject18=function _templateObject18(){return data;};return data;}function _templateObject17(){var data=_taggedTemplateLiteral([\"\\n    query TeaserProperties {\\n  teaserProperties {\\n    id\\n    title\\n    subtext\\n    location\\n    long\\n    lat\\n    beds_adult\\n    beds_kids\\n    beds_tent\\n    images\\n  }\\n}\\n    \"]);_templateObject17=function _templateObject17(){return data;};return data;}function _templateObject16(){var data=_taggedTemplateLiteral([\"\\n    query getProduct($id: String!) {\\n  getProduct(id: $id) {\\n    id\\n    title\\n    creationDate\\n    paymentPricePlan\\n    price\\n    minmonth\\n    deleted\\n    active\\n  }\\n}\\n    \"]);_templateObject16=function _templateObject16(){return data;};return data;}function _templateObject15(){var data=_taggedTemplateLiteral([\"\\n    query BookingsByProperty($propertyId: String!) {\\n  activeBookingsForProperty(propertyId: $propertyId) {\\n    propertyId\\n    to\\n    from\\n  }\\n}\\n    \"]);_templateObject15=function _templateObject15(){return data;};return data;}function _templateObject14(){var data=_taggedTemplateLiteral([\"\\n    query MyBooking {\\n  myBooking {\\n    id\\n    from\\n    to\\n    property {\\n      id\\n      title\\n      location\\n      long\\n      lat\\n      images\\n      beds_adult\\n      beds_kids\\n      beds_tent\\n      subtext\\n    }\\n  }\\n}\\n    \"]);_templateObject14=function _templateObject14(){return data;};return data;}function _templateObject13(){var data=_taggedTemplateLiteral([\"\\n    query blockedDatesByProperty($propertyId: String!) {\\n  getBlockedDatesFromProperty(propertyId: $propertyId) {\\n    bookingId\\n    dateTimeStamp\\n    type\\n  }\\n}\\n    \"]);_templateObject13=function _templateObject13(){return data;};return data;}function _templateObject12(){var data=_taggedTemplateLiteral([\"\\n    query Sights {\\n  getSights {\\n    id\\n    title\\n    type\\n    subtext\\n    location\\n    long\\n    lat\\n    images\\n  }\\n}\\n    \"]);_templateObject12=function _templateObject12(){return data;};return data;}function _templateObject11(){var data=_taggedTemplateLiteral([\"\\n    query AllRatings {\\n  getAllRatings {\\n    id\\n    targettype\\n    targetId\\n    comment\\n    rating\\n    title\\n    userId\\n  }\\n}\\n    \"]);_templateObject11=function _templateObject11(){return data;};return data;}function _templateObject10(){var data=_taggedTemplateLiteral([\"\\n    query Properties {\\n  allProperties {\\n    id\\n    title\\n    subtext\\n    location\\n    long\\n    lat\\n    beds_adult\\n    beds_kids\\n    beds_tent\\n    images\\n  }\\n}\\n    \"]);_templateObject10=function _templateObject10(){return data;};return data;}function _templateObject9(){var data=_taggedTemplateLiteral([\"\\n    query Products {\\n  getAllProducts {\\n    id\\n    title\\n    creationDate\\n    paymentPricePlan\\n    price\\n    minmonth\\n    deleted\\n    active\\n  }\\n}\\n    \"]);_templateObject9=function _templateObject9(){return data;};return data;}function _templateObject8(){var data=_taggedTemplateLiteral([\"\\n    query allBooking {\\n  allBooking {\\n    id\\n    from\\n    to\\n    deleted\\n    propertyId\\n  }\\n}\\n    \"]);_templateObject8=function _templateObject8(){return data;};return data;}function _templateObject7(){var data=_taggedTemplateLiteral([\"\\n    mutation deleteProduct($id: String!) {\\n  deleteProduct(id: $id)\\n}\\n    \"]);_templateObject7=function _templateObject7(){return data;};return data;}function _templateObject6(){var data=_taggedTemplateLiteral([\"\\n    mutation deleteBooking($bookingId: String!) {\\n  deleteBooking(bookingId: $bookingId)\\n}\\n    \"]);_templateObject6=function _templateObject6(){return data;};return data;}function _templateObject5(){var data=_taggedTemplateLiteral([\"\\n    mutation saveSight($sight: SightInput!) {\\n  saveSight(sight: $sight)\\n}\\n    \"]);_templateObject5=function _templateObject5(){return data;};return data;}function _templateObject4(){var data=_taggedTemplateLiteral([\"\\n    mutation saveRating($rating: RatingInput!) {\\n  saveRating(rating: $rating)\\n}\\n    \"]);_templateObject4=function _templateObject4(){return data;};return data;}function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n    mutation saveProperty($property: PropertyInput!) {\\n  saveProperty(property: $property)\\n}\\n    \"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n    query createProduct {\\n  getNewProduct {\\n    id\\n    title\\n    creationDate\\n    paymentPricePlan\\n    price\\n    minmonth\\n    deleted\\n    active\\n  }\\n}\\n    \"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    mutation CreateMyBooking($to: Float!, $from: Float!, $propertyId: String!) {\\n  bookProperty(to: $to, from: $from, propertyId: $propertyId)\\n}\\n    \"]);_templateObject=function _templateObject(){return data;};return data;}import gql from'graphql-tag';import*as ApolloReactHooks from'@apollo/react-hooks';export var CreateMyBookingDocument=gql(_templateObject());/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      to: // value for 'to'\n *      from: // value for 'from'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */export function useCreateMyBookingMutation(baseOptions){return ApolloReactHooks.useMutation(CreateMyBookingDocument,baseOptions);}export var CreateProductDocument=gql(_templateObject2());/**\n * __useCreateProductQuery__\n *\n * To run a query within a React component, call `useCreateProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useCreateProductQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCreateProductQuery({\n *   variables: {\n *   },\n * });\n */export function useCreateProductQuery(baseOptions){return ApolloReactHooks.useQuery(CreateProductDocument,baseOptions);}export function useCreateProductLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(CreateProductDocument,baseOptions);}export var SavePropertyDocument=gql(_templateObject3());/**\n * __useSavePropertyMutation__\n *\n * To run a mutation, you first call `useSavePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSavePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [savePropertyMutation, { data, loading, error }] = useSavePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */export function useSavePropertyMutation(baseOptions){return ApolloReactHooks.useMutation(SavePropertyDocument,baseOptions);}export var SaveRatingDocument=gql(_templateObject4());/**\n * __useSaveRatingMutation__\n *\n * To run a mutation, you first call `useSaveRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveRatingMutation, { data, loading, error }] = useSaveRatingMutation({\n *   variables: {\n *      rating: // value for 'rating'\n *   },\n * });\n */export function useSaveRatingMutation(baseOptions){return ApolloReactHooks.useMutation(SaveRatingDocument,baseOptions);}export var SaveSightDocument=gql(_templateObject5());/**\n * __useSaveSightMutation__\n *\n * To run a mutation, you first call `useSaveSightMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveSightMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveSightMutation, { data, loading, error }] = useSaveSightMutation({\n *   variables: {\n *      sight: // value for 'sight'\n *   },\n * });\n */export function useSaveSightMutation(baseOptions){return ApolloReactHooks.useMutation(SaveSightDocument,baseOptions);}export var DeleteBookingDocument=gql(_templateObject6());/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */export function useDeleteBookingMutation(baseOptions){return ApolloReactHooks.useMutation(DeleteBookingDocument,baseOptions);}export var DeleteProductDocument=gql(_templateObject7());/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */export function useDeleteProductMutation(baseOptions){return ApolloReactHooks.useMutation(DeleteProductDocument,baseOptions);}export var AllBookingDocument=gql(_templateObject8());/**\n * __useAllBookingQuery__\n *\n * To run a query within a React component, call `useAllBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingQuery({\n *   variables: {\n *   },\n * });\n */export function useAllBookingQuery(baseOptions){return ApolloReactHooks.useQuery(AllBookingDocument,baseOptions);}export function useAllBookingLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(AllBookingDocument,baseOptions);}export var ProductsDocument=gql(_templateObject9());/**\n * __useProductsQuery__\n *\n * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsQuery({\n *   variables: {\n *   },\n * });\n */export function useProductsQuery(baseOptions){return ApolloReactHooks.useQuery(ProductsDocument,baseOptions);}export function useProductsLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(ProductsDocument,baseOptions);}export var PropertiesDocument=gql(_templateObject10());/**\n * __usePropertiesQuery__\n *\n * To run a query within a React component, call `usePropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePropertiesQuery({\n *   variables: {\n *   },\n * });\n */export function usePropertiesQuery(baseOptions){return ApolloReactHooks.useQuery(PropertiesDocument,baseOptions);}export function usePropertiesLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(PropertiesDocument,baseOptions);}export var AllRatingsDocument=gql(_templateObject11());/**\n * __useAllRatingsQuery__\n *\n * To run a query within a React component, call `useAllRatingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllRatingsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllRatingsQuery({\n *   variables: {\n *   },\n * });\n */export function useAllRatingsQuery(baseOptions){return ApolloReactHooks.useQuery(AllRatingsDocument,baseOptions);}export function useAllRatingsLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(AllRatingsDocument,baseOptions);}export var SightsDocument=gql(_templateObject12());/**\n * __useSightsQuery__\n *\n * To run a query within a React component, call `useSightsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSightsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSightsQuery({\n *   variables: {\n *   },\n * });\n */export function useSightsQuery(baseOptions){return ApolloReactHooks.useQuery(SightsDocument,baseOptions);}export function useSightsLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(SightsDocument,baseOptions);}export var BlockedDatesByPropertyDocument=gql(_templateObject13());/**\n * __useBlockedDatesByPropertyQuery__\n *\n * To run a query within a React component, call `useBlockedDatesByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockedDatesByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockedDatesByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */export function useBlockedDatesByPropertyQuery(baseOptions){return ApolloReactHooks.useQuery(BlockedDatesByPropertyDocument,baseOptions);}export function useBlockedDatesByPropertyLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(BlockedDatesByPropertyDocument,baseOptions);}export var MyBookingDocument=gql(_templateObject14());/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */export function useMyBookingQuery(baseOptions){return ApolloReactHooks.useQuery(MyBookingDocument,baseOptions);}export function useMyBookingLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(MyBookingDocument,baseOptions);}export var BookingsByPropertyDocument=gql(_templateObject15());/**\n * __useBookingsByPropertyQuery__\n *\n * To run a query within a React component, call `useBookingsByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookingsByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookingsByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */export function useBookingsByPropertyQuery(baseOptions){return ApolloReactHooks.useQuery(BookingsByPropertyDocument,baseOptions);}export function useBookingsByPropertyLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(BookingsByPropertyDocument,baseOptions);}export var GetProductDocument=gql(_templateObject16());/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */export function useGetProductQuery(baseOptions){return ApolloReactHooks.useQuery(GetProductDocument,baseOptions);}export function useGetProductLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(GetProductDocument,baseOptions);}export var TeaserPropertiesDocument=gql(_templateObject17());/**\n * __useTeaserPropertiesQuery__\n *\n * To run a query within a React component, call `useTeaserPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeaserPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeaserPropertiesQuery({\n *   variables: {\n *   },\n * });\n */export function useTeaserPropertiesQuery(baseOptions){return ApolloReactHooks.useQuery(TeaserPropertiesDocument,baseOptions);}export function useTeaserPropertiesLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(TeaserPropertiesDocument,baseOptions);}export var GetPropertyDocument=gql(_templateObject18());/**\n * __useGetPropertyQuery__\n *\n * To run a query within a React component, call `useGetPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPropertyQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */export function useGetPropertyQuery(baseOptions){return ApolloReactHooks.useQuery(GetPropertyDocument,baseOptions);}export function useGetPropertyLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(GetPropertyDocument,baseOptions);}export var GetRatingDocument=gql(_templateObject19());/**\n * __useGetRatingQuery__\n *\n * To run a query within a React component, call `useGetRatingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */export function useGetRatingQuery(baseOptions){return ApolloReactHooks.useQuery(GetRatingDocument,baseOptions);}export function useGetRatingLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(GetRatingDocument,baseOptions);}export var GetRatingValuesByTargetDocument=gql(_templateObject20());/**\n * __useGetRatingValuesByTargetQuery__\n *\n * To run a query within a React component, call `useGetRatingValuesByTargetQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingValuesByTargetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingValuesByTargetQuery({\n *   variables: {\n *      targettype: // value for 'targettype'\n *      targetId: // value for 'targetId'\n *   },\n * });\n */export function useGetRatingValuesByTargetQuery(baseOptions){return ApolloReactHooks.useQuery(GetRatingValuesByTargetDocument,baseOptions);}export function useGetRatingValuesByTargetLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(GetRatingValuesByTargetDocument,baseOptions);}export var GetSightDocument=gql(_templateObject21());/**\n * __useGetSightQuery__\n *\n * To run a query within a React component, call `useGetSightQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSightQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSightQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */export function useGetSightQuery(baseOptions){return ApolloReactHooks.useQuery(GetSightDocument,baseOptions);}export function useGetSightLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(GetSightDocument,baseOptions);}export var MeDocument=gql(_templateObject22());/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */export function useMeQuery(baseOptions){return ApolloReactHooks.useQuery(MeDocument,baseOptions);}export function useMeLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(MeDocument,baseOptions);}export var UsersDocument=gql(_templateObject23());/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */export function useUsersQuery(baseOptions){return ApolloReactHooks.useQuery(UsersDocument,baseOptions);}export function useUsersLazyQuery(baseOptions){return ApolloReactHooks.useLazyQuery(UsersDocument,baseOptions);}export var LoginDocument=gql(_templateObject24());/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */export function useLoginMutation(baseOptions){return ApolloReactHooks.useMutation(LoginDocument,baseOptions);}export var LogoutDocument=gql(_templateObject25());/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */export function useLogoutMutation(baseOptions){return ApolloReactHooks.useMutation(LogoutDocument,baseOptions);}export var AddPaymentMethodDocument=gql(_templateObject26());/**\n * __useAddPaymentMethodMutation__\n *\n * To run a mutation, you first call `useAddPaymentMethodMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPaymentMethodMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPaymentMethodMutation, { data, loading, error }] = useAddPaymentMethodMutation({\n *   variables: {\n *      paymentMethodId: // value for 'paymentMethodId'\n *   },\n * });\n */export function useAddPaymentMethodMutation(baseOptions){return ApolloReactHooks.useMutation(AddPaymentMethodDocument,baseOptions);}export var CreatePaymentSerivceCustomerDocument=gql(_templateObject27());/**\n * __useCreatePaymentSerivceCustomerMutation__\n *\n * To run a mutation, you first call `useCreatePaymentSerivceCustomerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePaymentSerivceCustomerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPaymentSerivceCustomerMutation, { data, loading, error }] = useCreatePaymentSerivceCustomerMutation({\n *   variables: {\n *   },\n * });\n */export function useCreatePaymentSerivceCustomerMutation(baseOptions){return ApolloReactHooks.useMutation(CreatePaymentSerivceCustomerDocument,baseOptions);}export var SubscribeToPricePlanDocument=gql(_templateObject28());/**\n * __useSubscribeToPricePlanMutation__\n *\n * To run a mutation, you first call `useSubscribeToPricePlanMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubscribeToPricePlanMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [subscribeToPricePlanMutation, { data, loading, error }] = useSubscribeToPricePlanMutation({\n *   variables: {\n *      priceplan: // value for 'priceplan'\n *   },\n * });\n */export function useSubscribeToPricePlanMutation(baseOptions){return ApolloReactHooks.useMutation(SubscribeToPricePlanDocument,baseOptions);}export var RegisterDocument=gql(_templateObject29());/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */export function useRegisterMutation(baseOptions){return ApolloReactHooks.useMutation(RegisterDocument,baseOptions);}export var UpdateProductDocument=gql(_templateObject30());/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product: // value for 'product'\n *   },\n * });\n */export function useUpdateProductMutation(baseOptions){return ApolloReactHooks.useMutation(UpdateProductDocument,baseOptions);}export var UpdateUserAddressDocument=gql(_templateObject31());/**\n * __useUpdateUserAddressMutation__\n *\n * To run a mutation, you first call `useUpdateUserAddressMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserAddressMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserAddressMutation, { data, loading, error }] = useUpdateUserAddressMutation({\n *   variables: {\n *      useraddress: // value for 'useraddress'\n *   },\n * });\n */export function useUpdateUserAddressMutation(baseOptions){return ApolloReactHooks.useMutation(UpdateUserAddressDocument,baseOptions);}export var UpdateUserNameDocument=gql(_templateObject32());/**\n * __useUpdateUserNameMutation__\n *\n * To run a mutation, you first call `useUpdateUserNameMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserNameMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserNameMutation, { data, loading, error }] = useUpdateUserNameMutation({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */export function useUpdateUserNameMutation(baseOptions){return ApolloReactHooks.useMutation(UpdateUserNameDocument,baseOptions);}","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","CreateMyBookingDocument","useCreateMyBookingMutation","baseOptions","useMutation","CreateProductDocument","useCreateProductQuery","useQuery","useCreateProductLazyQuery","useLazyQuery","SavePropertyDocument","useSavePropertyMutation","SaveRatingDocument","useSaveRatingMutation","SaveSightDocument","useSaveSightMutation","DeleteBookingDocument","useDeleteBookingMutation","DeleteProductDocument","useDeleteProductMutation","AllBookingDocument","useAllBookingQuery","useAllBookingLazyQuery","ProductsDocument","useProductsQuery","useProductsLazyQuery","PropertiesDocument","usePropertiesQuery","usePropertiesLazyQuery","AllRatingsDocument","useAllRatingsQuery","useAllRatingsLazyQuery","SightsDocument","useSightsQuery","useSightsLazyQuery","BlockedDatesByPropertyDocument","useBlockedDatesByPropertyQuery","useBlockedDatesByPropertyLazyQuery","MyBookingDocument","useMyBookingQuery","useMyBookingLazyQuery","BookingsByPropertyDocument","useBookingsByPropertyQuery","useBookingsByPropertyLazyQuery","GetProductDocument","useGetProductQuery","useGetProductLazyQuery","TeaserPropertiesDocument","useTeaserPropertiesQuery","useTeaserPropertiesLazyQuery","GetPropertyDocument","useGetPropertyQuery","useGetPropertyLazyQuery","GetRatingDocument","useGetRatingQuery","useGetRatingLazyQuery","GetRatingValuesByTargetDocument","useGetRatingValuesByTargetQuery","useGetRatingValuesByTargetLazyQuery","GetSightDocument","useGetSightQuery","useGetSightLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","UsersDocument","useUsersQuery","useUsersLazyQuery","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","AddPaymentMethodDocument","useAddPaymentMethodMutation","CreatePaymentSerivceCustomerDocument","useCreatePaymentSerivceCustomerMutation","SubscribeToPricePlanDocument","useSubscribeToPricePlanMutation","RegisterDocument","useRegisterMutation","UpdateProductDocument","useUpdateProductMutation","UpdateUserAddressDocument","useUpdateUserAddressMutation","UpdateUserNameDocument","useUpdateUserNameMutation"],"mappings":"+6RAAA,MAAOA,CAAAA,GAAP,KAAgB,aAAhB,CAEA,MAAO,GAAKC,CAAAA,gBAAZ,KAAkC,qBAAlC,CA2uBA,MAAO,IAAMC,CAAAA,uBAAuB,CAAGF,GAAH,mBAA7B,CAOP;;;;;;;;;;;;;;;;;;GAmBA,MAAO,SAASG,CAAAA,0BAAT,CAAoCC,WAApC,CAAmJ,CAClJ,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAwFH,uBAAxF,CAAiHE,WAAjH,CAAP,CACD,CAIP,MAAO,IAAME,CAAAA,qBAAqB,CAAGN,GAAH,oBAA3B,CAeP;;;;;;;;;;;;;;GAeA,MAAO,SAASO,CAAAA,qBAAT,CAA+BH,WAA/B,CAAiI,CAChI,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAA2EF,qBAA3E,CAAkGF,WAAlG,CAAP,CACD,CACP,MAAO,SAASK,CAAAA,yBAAT,CAAmCL,WAAnC,CAAyI,CACtI,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAA+EJ,qBAA/E,CAAsGF,WAAtG,CAAP,CACD,CAIT,MAAO,IAAMO,CAAAA,oBAAoB,CAAGX,GAAH,oBAA1B,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASY,CAAAA,uBAAT,CAAiCR,WAAjC,CAA0I,CACzI,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAkFM,oBAAlF,CAAwGP,WAAxG,CAAP,CACD,CAIP,MAAO,IAAMS,CAAAA,kBAAkB,CAAGb,GAAH,oBAAxB,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASc,CAAAA,qBAAT,CAA+BV,WAA/B,CAAoI,CACnI,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAA8EQ,kBAA9E,CAAkGT,WAAlG,CAAP,CACD,CAIP,MAAO,IAAMW,CAAAA,iBAAiB,CAAGf,GAAH,oBAAvB,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASgB,CAAAA,oBAAT,CAA8BZ,WAA9B,CAAiI,CAChI,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAA4EU,iBAA5E,CAA+FX,WAA/F,CAAP,CACD,CAIP,MAAO,IAAMa,CAAAA,qBAAqB,CAAGjB,GAAH,oBAA3B,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASkB,CAAAA,wBAAT,CAAkCd,WAAlC,CAA6I,CAC5I,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAoFY,qBAApF,CAA2Gb,WAA3G,CAAP,CACD,CAIP,MAAO,IAAMe,CAAAA,qBAAqB,CAAGnB,GAAH,oBAA3B,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASoB,CAAAA,wBAAT,CAAkChB,WAAlC,CAA6I,CAC5I,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAoFc,qBAApF,CAA2Gf,WAA3G,CAAP,CACD,CAIP,MAAO,IAAMiB,CAAAA,kBAAkB,CAAGrB,GAAH,oBAAxB,CAYP;;;;;;;;;;;;;;GAeA,MAAO,SAASsB,CAAAA,kBAAT,CAA4BlB,WAA5B,CAAwH,CACvH,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAqEa,kBAArE,CAAyFjB,WAAzF,CAAP,CACD,CACP,MAAO,SAASmB,CAAAA,sBAAT,CAAgCnB,WAAhC,CAAgI,CAC7H,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAyEW,kBAAzE,CAA6FjB,WAA7F,CAAP,CACD,CAIT,MAAO,IAAMoB,CAAAA,gBAAgB,CAAGxB,GAAH,oBAAtB,CAeP;;;;;;;;;;;;;;GAeA,MAAO,SAASyB,CAAAA,gBAAT,CAA0BrB,WAA1B,CAAkH,CACjH,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAiEgB,gBAAjE,CAAmFpB,WAAnF,CAAP,CACD,CACP,MAAO,SAASsB,CAAAA,oBAAT,CAA8BtB,WAA9B,CAA0H,CACvH,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAqEc,gBAArE,CAAuFpB,WAAvF,CAAP,CACD,CAIT,MAAO,IAAMuB,CAAAA,kBAAkB,CAAG3B,GAAH,qBAAxB,CAiBP;;;;;;;;;;;;;;GAeA,MAAO,SAAS4B,CAAAA,kBAAT,CAA4BxB,WAA5B,CAAwH,CACvH,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAqEmB,kBAArE,CAAyFvB,WAAzF,CAAP,CACD,CACP,MAAO,SAASyB,CAAAA,sBAAT,CAAgCzB,WAAhC,CAAgI,CAC7H,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAyEiB,kBAAzE,CAA6FvB,WAA7F,CAAP,CACD,CAIT,MAAO,IAAM0B,CAAAA,kBAAkB,CAAG9B,GAAH,qBAAxB,CAcP;;;;;;;;;;;;;;GAeA,MAAO,SAAS+B,CAAAA,kBAAT,CAA4B3B,WAA5B,CAAwH,CACvH,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAqEsB,kBAArE,CAAyF1B,WAAzF,CAAP,CACD,CACP,MAAO,SAAS4B,CAAAA,sBAAT,CAAgC5B,WAAhC,CAAgI,CAC7H,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAyEoB,kBAAzE,CAA6F1B,WAA7F,CAAP,CACD,CAIT,MAAO,IAAM6B,CAAAA,cAAc,CAAGjC,GAAH,qBAApB,CAeP;;;;;;;;;;;;;;GAeA,MAAO,SAASkC,CAAAA,cAAT,CAAwB9B,WAAxB,CAA4G,CAC3G,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAA6DyB,cAA7D,CAA6E7B,WAA7E,CAAP,CACD,CACP,MAAO,SAAS+B,CAAAA,kBAAT,CAA4B/B,WAA5B,CAAoH,CACjH,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAiEuB,cAAjE,CAAiF7B,WAAjF,CAAP,CACD,CAIT,MAAO,IAAMgC,CAAAA,8BAA8B,CAAGpC,GAAH,qBAApC,CAUP;;;;;;;;;;;;;;;GAgBA,MAAO,SAASqC,CAAAA,8BAAT,CAAwCjC,WAAxC,CAA4J,CAC3J,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAA6F4B,8BAA7F,CAA6HhC,WAA7H,CAAP,CACD,CACP,MAAO,SAASkC,CAAAA,kCAAT,CAA4ClC,WAA5C,CAAoK,CACjK,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAiG0B,8BAAjG,CAAiIhC,WAAjI,CAAP,CACD,CAIT,MAAO,IAAMmC,CAAAA,iBAAiB,CAAGvC,GAAH,qBAAvB,CAsBP;;;;;;;;;;;;;;GAeA,MAAO,SAASwC,CAAAA,iBAAT,CAA2BpC,WAA3B,CAAqH,CACpH,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAmE+B,iBAAnE,CAAsFnC,WAAtF,CAAP,CACD,CACP,MAAO,SAASqC,CAAAA,qBAAT,CAA+BrC,WAA/B,CAA6H,CAC1H,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAuE6B,iBAAvE,CAA0FnC,WAA1F,CAAP,CACD,CAIT,MAAO,IAAMsC,CAAAA,0BAA0B,CAAG1C,GAAH,qBAAhC,CAUP;;;;;;;;;;;;;;;GAgBA,MAAO,SAAS2C,CAAAA,0BAAT,CAAoCvC,WAApC,CAAgJ,CAC/I,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAqFkC,0BAArF,CAAiHtC,WAAjH,CAAP,CACD,CACP,MAAO,SAASwC,CAAAA,8BAAT,CAAwCxC,WAAxC,CAAwJ,CACrJ,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAyFgC,0BAAzF,CAAqHtC,WAArH,CAAP,CACD,CAIT,MAAO,IAAMyC,CAAAA,kBAAkB,CAAG7C,GAAH,qBAAxB,CAeP;;;;;;;;;;;;;;;GAgBA,MAAO,SAAS8C,CAAAA,kBAAT,CAA4B1C,WAA5B,CAAwH,CACvH,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAqEqC,kBAArE,CAAyFzC,WAAzF,CAAP,CACD,CACP,MAAO,SAAS2C,CAAAA,sBAAT,CAAgC3C,WAAhC,CAAgI,CAC7H,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAyEmC,kBAAzE,CAA6FzC,WAA7F,CAAP,CACD,CAIT,MAAO,IAAM4C,CAAAA,wBAAwB,CAAGhD,GAAH,qBAA9B,CAiBP;;;;;;;;;;;;;;GAeA,MAAO,SAASiD,CAAAA,wBAAT,CAAkC7C,WAAlC,CAA0I,CACzI,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAiFwC,wBAAjF,CAA2G5C,WAA3G,CAAP,CACD,CACP,MAAO,SAAS8C,CAAAA,4BAAT,CAAsC9C,WAAtC,CAAkJ,CAC/I,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAqFsC,wBAArF,CAA+G5C,WAA/G,CAAP,CACD,CAIT,MAAO,IAAM+C,CAAAA,mBAAmB,CAAGnD,GAAH,qBAAzB,CAiBP;;;;;;;;;;;;;;;GAgBA,MAAO,SAASoD,CAAAA,mBAAT,CAA6BhD,WAA7B,CAA2H,CAC1H,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAuE2C,mBAAvE,CAA4F/C,WAA5F,CAAP,CACD,CACP,MAAO,SAASiD,CAAAA,uBAAT,CAAiCjD,WAAjC,CAAmI,CAChI,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAA2EyC,mBAA3E,CAAgG/C,WAAhG,CAAP,CACD,CAIT,MAAO,IAAMkD,CAAAA,iBAAiB,CAAGtD,GAAH,qBAAvB,CAcP;;;;;;;;;;;;;;;GAgBA,MAAO,SAASuD,CAAAA,iBAAT,CAA2BnD,WAA3B,CAAqH,CACpH,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAmE8C,iBAAnE,CAAsFlD,WAAtF,CAAP,CACD,CACP,MAAO,SAASoD,CAAAA,qBAAT,CAA+BpD,WAA/B,CAA6H,CAC1H,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAuE4C,iBAAvE,CAA0FlD,WAA1F,CAAP,CACD,CAIT,MAAO,IAAMqD,CAAAA,+BAA+B,CAAGzD,GAAH,qBAArC,CAWP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAAS0D,CAAAA,+BAAT,CAAyCtD,WAAzC,CAA+J,CAC9J,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAA+FiD,+BAA/F,CAAgIrD,WAAhI,CAAP,CACD,CACP,MAAO,SAASuD,CAAAA,mCAAT,CAA6CvD,WAA7C,CAAuK,CACpK,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAmG+C,+BAAnG,CAAoIrD,WAApI,CAAP,CACD,CAIT,MAAO,IAAMwD,CAAAA,gBAAgB,CAAG5D,GAAH,qBAAtB,CAeP;;;;;;;;;;;;;;;GAgBA,MAAO,SAAS6D,CAAAA,gBAAT,CAA0BzD,WAA1B,CAAkH,CACjH,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAiEoD,gBAAjE,CAAmFxD,WAAnF,CAAP,CACD,CACP,MAAO,SAAS0D,CAAAA,oBAAT,CAA8B1D,WAA9B,CAA0H,CACvH,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAqEkD,gBAArE,CAAuFxD,WAAvF,CAAP,CACD,CAIT,MAAO,IAAM2D,CAAAA,UAAU,CAAG/D,GAAH,qBAAhB,CAiBP;;;;;;;;;;;;;;GAeA,MAAO,SAASgE,CAAAA,UAAT,CAAoB5D,WAApB,CAAgG,CAC/F,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAAqDuD,UAArD,CAAiE3D,WAAjE,CAAP,CACD,CACP,MAAO,SAAS6D,CAAAA,cAAT,CAAwB7D,WAAxB,CAAwG,CACrG,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAAyDqD,UAAzD,CAAqE3D,WAArE,CAAP,CACD,CAIT,MAAO,IAAM8D,CAAAA,aAAa,CAAGlE,GAAH,qBAAnB,CASP;;;;;;;;;;;;;;GAeA,MAAO,SAASmE,CAAAA,aAAT,CAAuB/D,WAAvB,CAAyG,CACxG,MAAOH,CAAAA,gBAAgB,CAACO,QAAjB,CAA2D0D,aAA3D,CAA0E9D,WAA1E,CAAP,CACD,CACP,MAAO,SAASgE,CAAAA,iBAAT,CAA2BhE,WAA3B,CAAiH,CAC9G,MAAOH,CAAAA,gBAAgB,CAACS,YAAjB,CAA+DwD,aAA/D,CAA8E9D,WAA9E,CAAP,CACD,CAIT,MAAO,IAAMiE,CAAAA,aAAa,CAAGrE,GAAH,qBAAnB,CAcP;;;;;;;;;;;;;;;;;GAkBA,MAAO,SAASsE,CAAAA,gBAAT,CAA0BlE,WAA1B,CAAqH,CACpH,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAoEgE,aAApE,CAAmFjE,WAAnF,CAAP,CACD,CAIP,MAAO,IAAMmE,CAAAA,cAAc,CAAGvE,GAAH,qBAApB,CAOP;;;;;;;;;;;;;;;GAgBA,MAAO,SAASwE,CAAAA,iBAAT,CAA2BpE,WAA3B,CAAwH,CACvH,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAsEkE,cAAtE,CAAsFnE,WAAtF,CAAP,CACD,CAIP,MAAO,IAAMqE,CAAAA,wBAAwB,CAAGzE,GAAH,qBAA9B,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAAS0E,CAAAA,2BAAT,CAAqCtE,WAArC,CAAsJ,CACrJ,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAA0FoE,wBAA1F,CAAoHrE,WAApH,CAAP,CACD,CAIP,MAAO,IAAMuE,CAAAA,oCAAoC,CAAG3E,GAAH,qBAA1C,CAOP;;;;;;;;;;;;;;;GAgBA,MAAO,SAAS4E,CAAAA,uCAAT,CAAiDxE,WAAjD,CAA0L,CACzL,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAkHsE,oCAAlH,CAAwJvE,WAAxJ,CAAP,CACD,CAIP,MAAO,IAAMyE,CAAAA,4BAA4B,CAAG7E,GAAH,qBAAlC,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAAS8E,CAAAA,+BAAT,CAAyC1E,WAAzC,CAAkK,CACjK,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAkGwE,4BAAlG,CAAgIzE,WAAhI,CAAP,CACD,CAIP,MAAO,IAAM2E,CAAAA,gBAAgB,CAAG/E,GAAH,qBAAtB,CAOP;;;;;;;;;;;;;;;;;;GAmBA,MAAO,SAASgF,CAAAA,mBAAT,CAA6B5E,WAA7B,CAA8H,CAC7H,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAA0E0E,gBAA1E,CAA4F3E,WAA5F,CAAP,CACD,CAIP,MAAO,IAAM6E,CAAAA,qBAAqB,CAAGjF,GAAH,qBAA3B,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASkF,CAAAA,wBAAT,CAAkC9E,WAAlC,CAA6I,CAC5I,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAoF4E,qBAApF,CAA2G7E,WAA3G,CAAP,CACD,CAIP,MAAO,IAAM+E,CAAAA,yBAAyB,CAAGnF,GAAH,qBAA/B,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASoF,CAAAA,4BAAT,CAAsChF,WAAtC,CAAyJ,CACxJ,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAA4F8E,yBAA5F,CAAuH/E,WAAvH,CAAP,CACD,CAIP,MAAO,IAAMiF,CAAAA,sBAAsB,CAAGrF,GAAH,qBAA5B,CAOP;;;;;;;;;;;;;;;;GAiBA,MAAO,SAASsF,CAAAA,yBAAT,CAAmClF,WAAnC,CAAgJ,CAC/I,MAAOH,CAAAA,gBAAgB,CAACI,WAAjB,CAAsFgF,sBAAtF,CAA8GjF,WAA9G,CAAP,CACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type BlockedDate = {\n   __typename?: 'BlockedDate',\n  bookingId: Scalars['String'],\n  dateTimeStamp: Scalars['Float'],\n  type: Scalars['Float'],\n};\n\nexport type Booking = {\n   __typename?: 'Booking',\n  id: Scalars['String'],\n  user: Scalars['String'],\n  date: Scalars['Float'],\n  from: Scalars['Float'],\n  to: Scalars['Float'],\n  deleted: Scalars['Boolean'],\n  propertyId: Scalars['String'],\n  property: Property,\n};\n\n\nexport type Email = {\n   __typename?: 'Email',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  verified: Scalars['Boolean'],\n  verification_token: Scalars['String'],\n  verification_date: Scalars['Float'],\n};\n\nexport type Location = {\n   __typename?: 'Location',\n  id: Scalars['String'],\n  title: Scalars['String'],\n  type: Scalars['String'],\n  lat: Scalars['Float'],\n  long: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokeForUser: Scalars['Boolean'],\n  createPaymentServiceCustomer: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  updateUserName: Scalars['Boolean'],\n  updateUserAddress: Scalars['Boolean'],\n  bookProperty: Scalars['Boolean'],\n  deleteBooking: Scalars['Boolean'],\n  saveProperty: Scalars['Boolean'],\n  createProperty: Scalars['Boolean'],\n  deleteProperty: Scalars['Boolean'],\n  saveSight: Scalars['Boolean'],\n  deleteSight: Scalars['Boolean'],\n  saveRating: Scalars['Boolean'],\n  deleteRating: Scalars['Boolean'],\n  updateProduct: Scalars['Boolean'],\n  deleteProduct: Scalars['Boolean'],\n  subscribeToPricePlan: Scalars['Boolean'],\n  addPaymentMethod: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokeForUserArgs = {\n  userId: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  password: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String']\n};\n\n\nexport type MutationUpdateUserNameArgs = {\n  username: UserName\n};\n\n\nexport type MutationUpdateUserAddressArgs = {\n  useraddress: UserAddress\n};\n\n\nexport type MutationBookPropertyArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float'],\n  propertyId: Scalars['String']\n};\n\n\nexport type MutationDeleteBookingArgs = {\n  bookingId: Scalars['String']\n};\n\n\nexport type MutationSavePropertyArgs = {\n  property: PropertyInput\n};\n\n\nexport type MutationCreatePropertyArgs = {\n  images: Array<Scalars['String']>,\n  beds_tent: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  title: Scalars['String']\n};\n\n\nexport type MutationDeletePropertyArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationSaveSightArgs = {\n  sight: SightInput\n};\n\n\nexport type MutationDeleteSightArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationSaveRatingArgs = {\n  rating: RatingInput\n};\n\n\nexport type MutationDeleteRatingArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationUpdateProductArgs = {\n  product: ProductInput\n};\n\n\nexport type MutationDeleteProductArgs = {\n  id: Scalars['String']\n};\n\n\nexport type MutationSubscribeToPricePlanArgs = {\n  priceplan: Scalars['String']\n};\n\n\nexport type MutationAddPaymentMethodArgs = {\n  paymentMethodId: Scalars['String']\n};\n\nexport type Product = {\n   __typename?: 'Product',\n  id: Scalars['String'],\n  creationDate: Scalars['DateTime'],\n  title: Scalars['String'],\n  paymentPricePlan: Scalars['String'],\n  price: Scalars['Float'],\n  minmonth: Scalars['Float'],\n  deleted: Scalars['Boolean'],\n  active: Scalars['Boolean'],\n};\n\nexport type ProductInput = {\n  id: Scalars['String'],\n  creationDate: Scalars['DateTime'],\n  title: Scalars['String'],\n  paymentPricePlan: Scalars['String'],\n  price: Scalars['Float'],\n  minmonth: Scalars['Float'],\n  deleted: Scalars['Boolean'],\n  active: Scalars['Boolean'],\n};\n\nexport type Property = {\n   __typename?: 'Property',\n  id: Scalars['String'],\n  title: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_tent: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type PropertyInput = {\n  id: Scalars['String'],\n  title: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_tent: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  me?: Maybe<User>,\n  users: Array<User>,\n  myBooking?: Maybe<Booking>,\n  allBooking?: Maybe<Array<Booking>>,\n  getBlockedDatesFromProperty?: Maybe<Array<BlockedDate>>,\n  propertiesEvalable?: Maybe<Array<Booking>>,\n  allProperties?: Maybe<Array<Property>>,\n  teaserProperties?: Maybe<Array<Property>>,\n  activeBookingsForProperty?: Maybe<Array<Booking>>,\n  getProperties?: Maybe<Array<Property>>,\n  getProperty?: Maybe<Property>,\n  getSights?: Maybe<Array<Sight>>,\n  getSight?: Maybe<Sight>,\n  getAllRatings?: Maybe<Array<Rating>>,\n  getRating?: Maybe<Rating>,\n  getRatingValuesByTarget?: Maybe<RatingValues>,\n  getAllLocations?: Maybe<Array<Location>>,\n  getAllProducts?: Maybe<Array<Product>>,\n  getProduct?: Maybe<Product>,\n  getNewProduct: Product,\n};\n\n\nexport type QueryGetBlockedDatesFromPropertyArgs = {\n  propertyId: Scalars['String']\n};\n\n\nexport type QueryPropertiesEvalableArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float']\n};\n\n\nexport type QueryActiveBookingsForPropertyArgs = {\n  propertyId: Scalars['String']\n};\n\n\nexport type QueryGetPropertyArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetSightArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetRatingArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryGetRatingValuesByTargetArgs = {\n  targetId: Scalars['String'],\n  targettype: Scalars['String']\n};\n\n\nexport type QueryGetProductArgs = {\n  id: Scalars['String']\n};\n\nexport type Rating = {\n   __typename?: 'Rating',\n  id: Scalars['String'],\n  title: Scalars['String'],\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  rating: Scalars['Float'],\n  userId: Scalars['Float'],\n  comment: Scalars['String'],\n};\n\nexport type RatingInput = {\n  id: Scalars['String'],\n  title: Scalars['String'],\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  rating: Scalars['Float'],\n  userId: Scalars['Float'],\n  comment: Scalars['String'],\n};\n\nexport type RatingValues = {\n   __typename?: 'RatingValues',\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  ratings: Scalars['Float'],\n  ratingValue: Scalars['Float'],\n};\n\nexport type Sight = {\n   __typename?: 'Sight',\n  id: Scalars['String'],\n  title: Scalars['String'],\n  type: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type SightInput = {\n  id: Scalars['String'],\n  title: Scalars['String'],\n  type: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['String'],\n  username: Scalars['String'],\n  email: Scalars['String'],\n  paymentServiceId?: Maybe<Scalars['String']>,\n  gender?: Maybe<Scalars['String']>,\n  firstname?: Maybe<Scalars['String']>,\n  surname?: Maybe<Scalars['String']>,\n  street?: Maybe<Scalars['String']>,\n  streetNumber?: Maybe<Scalars['String']>,\n  town?: Maybe<Scalars['String']>,\n  postalcode?: Maybe<Scalars['String']>,\n  tokenVersion: Scalars['Float'],\n  email_verified: Scalars['Boolean'],\n};\n\nexport type UserAddress = {\n  streetName: Scalars['String'],\n  streetNumber: Scalars['String'],\n  postalCode: Scalars['String'],\n  town: Scalars['String'],\n};\n\nexport type UserName = {\n  gender: Scalars['String'],\n  firstName: Scalars['String'],\n  surname: Scalars['String'],\n};\n\nexport type CreateMyBookingMutationVariables = {\n  to: Scalars['Float'],\n  from: Scalars['Float'],\n  propertyId: Scalars['String']\n};\n\n\nexport type CreateMyBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'bookProperty'>\n);\n\nexport type CreateProductQueryVariables = {};\n\n\nexport type CreateProductQuery = (\n  { __typename?: 'Query' }\n  & { getNewProduct: (\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'title' | 'creationDate' | 'paymentPricePlan' | 'price' | 'minmonth' | 'deleted' | 'active'>\n  ) }\n);\n\nexport type SavePropertyMutationVariables = {\n  property: PropertyInput\n};\n\n\nexport type SavePropertyMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveProperty'>\n);\n\nexport type SaveRatingMutationVariables = {\n  rating: RatingInput\n};\n\n\nexport type SaveRatingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveRating'>\n);\n\nexport type SaveSightMutationVariables = {\n  sight: SightInput\n};\n\n\nexport type SaveSightMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveSight'>\n);\n\nexport type DeleteBookingMutationVariables = {\n  bookingId: Scalars['String']\n};\n\n\nexport type DeleteBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteBooking'>\n);\n\nexport type DeleteProductMutationVariables = {\n  id: Scalars['String']\n};\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProduct'>\n);\n\nexport type AllBookingQueryVariables = {};\n\n\nexport type AllBookingQuery = (\n  { __typename?: 'Query' }\n  & { allBooking: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'from' | 'to' | 'deleted' | 'propertyId'>\n  )>> }\n);\n\nexport type ProductsQueryVariables = {};\n\n\nexport type ProductsQuery = (\n  { __typename?: 'Query' }\n  & { getAllProducts: Maybe<Array<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'title' | 'creationDate' | 'paymentPricePlan' | 'price' | 'minmonth' | 'deleted' | 'active'>\n  )>> }\n);\n\nexport type PropertiesQueryVariables = {};\n\n\nexport type PropertiesQuery = (\n  { __typename?: 'Query' }\n  & { allProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type AllRatingsQueryVariables = {};\n\n\nexport type AllRatingsQuery = (\n  { __typename?: 'Query' }\n  & { getAllRatings: Maybe<Array<(\n    { __typename?: 'Rating' }\n    & Pick<Rating, 'id' | 'targettype' | 'targetId' | 'comment' | 'rating' | 'title' | 'userId'>\n  )>> }\n);\n\nexport type SightsQueryVariables = {};\n\n\nexport type SightsQuery = (\n  { __typename?: 'Query' }\n  & { getSights: Maybe<Array<(\n    { __typename?: 'Sight' }\n    & Pick<Sight, 'id' | 'title' | 'type' | 'subtext' | 'location' | 'long' | 'lat' | 'images'>\n  )>> }\n);\n\nexport type BlockedDatesByPropertyQueryVariables = {\n  propertyId: Scalars['String']\n};\n\n\nexport type BlockedDatesByPropertyQuery = (\n  { __typename?: 'Query' }\n  & { getBlockedDatesFromProperty: Maybe<Array<(\n    { __typename?: 'BlockedDate' }\n    & Pick<BlockedDate, 'bookingId' | 'dateTimeStamp' | 'type'>\n  )>> }\n);\n\nexport type MyBookingQueryVariables = {};\n\n\nexport type MyBookingQuery = (\n  { __typename?: 'Query' }\n  & { myBooking: Maybe<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'from' | 'to'>\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id' | 'title' | 'location' | 'long' | 'lat' | 'images' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'subtext'>\n    ) }\n  )> }\n);\n\nexport type BookingsByPropertyQueryVariables = {\n  propertyId: Scalars['String']\n};\n\n\nexport type BookingsByPropertyQuery = (\n  { __typename?: 'Query' }\n  & { activeBookingsForProperty: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'propertyId' | 'to' | 'from'>\n  )>> }\n);\n\nexport type GetProductQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: Maybe<(\n    { __typename?: 'Product' }\n    & Pick<Product, 'id' | 'title' | 'creationDate' | 'paymentPricePlan' | 'price' | 'minmonth' | 'deleted' | 'active'>\n  )> }\n);\n\nexport type TeaserPropertiesQueryVariables = {};\n\n\nexport type TeaserPropertiesQuery = (\n  { __typename?: 'Query' }\n  & { teaserProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type GetPropertyQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetPropertyQuery = (\n  { __typename?: 'Query' }\n  & { getProperty: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )> }\n);\n\nexport type GetRatingQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetRatingQuery = (\n  { __typename?: 'Query' }\n  & { getRating: Maybe<(\n    { __typename?: 'Rating' }\n    & Pick<Rating, 'id' | 'targettype' | 'targetId' | 'comment' | 'rating' | 'title' | 'userId'>\n  )> }\n);\n\nexport type GetRatingValuesByTargetQueryVariables = {\n  targettype: Scalars['String'],\n  targetId: Scalars['String']\n};\n\n\nexport type GetRatingValuesByTargetQuery = (\n  { __typename?: 'Query' }\n  & { getRatingValuesByTarget: Maybe<(\n    { __typename?: 'RatingValues' }\n    & Pick<RatingValues, 'targetId' | 'targettype' | 'ratings' | 'ratingValue'>\n  )> }\n);\n\nexport type GetSightQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type GetSightQuery = (\n  { __typename?: 'Query' }\n  & { getSight: Maybe<(\n    { __typename?: 'Sight' }\n    & Pick<Sight, 'id' | 'title' | 'type' | 'subtext' | 'location' | 'long' | 'lat' | 'images'>\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'email' | 'id' | 'paymentServiceId' | 'gender' | 'firstname' | 'surname' | 'street' | 'streetNumber' | 'postalcode' | 'town'>\n  )> }\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email' | 'paymentServiceId'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type AddPaymentMethodMutationVariables = {\n  paymentMethodId: Scalars['String']\n};\n\n\nexport type AddPaymentMethodMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addPaymentMethod'>\n);\n\nexport type CreatePaymentSerivceCustomerMutationVariables = {};\n\n\nexport type CreatePaymentSerivceCustomerMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'createPaymentServiceCustomer'>\n);\n\nexport type SubscribeToPricePlanMutationVariables = {\n  priceplan: Scalars['String']\n};\n\n\nexport type SubscribeToPricePlanMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'subscribeToPricePlan'>\n);\n\nexport type RegisterMutationVariables = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type UpdateProductMutationVariables = {\n  product: ProductInput\n};\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProduct'>\n);\n\nexport type UpdateUserAddressMutationVariables = {\n  useraddress: UserAddress\n};\n\n\nexport type UpdateUserAddressMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateUserAddress'>\n);\n\nexport type UpdateUserNameMutationVariables = {\n  username: UserName\n};\n\n\nexport type UpdateUserNameMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateUserName'>\n);\n\n\nexport const CreateMyBookingDocument = gql`\n    mutation CreateMyBooking($to: Float!, $from: Float!, $propertyId: String!) {\n  bookProperty(to: $to, from: $from, propertyId: $propertyId)\n}\n    `;\nexport type CreateMyBookingMutationFn = ApolloReactCommon.MutationFunction<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\n\n/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      to: // value for 'to'\n *      from: // value for 'from'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useCreateMyBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateMyBookingMutation, CreateMyBookingMutationVariables>(CreateMyBookingDocument, baseOptions);\n      }\nexport type CreateMyBookingMutationHookResult = ReturnType<typeof useCreateMyBookingMutation>;\nexport type CreateMyBookingMutationResult = ApolloReactCommon.MutationResult<CreateMyBookingMutation>;\nexport type CreateMyBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\nexport const CreateProductDocument = gql`\n    query createProduct {\n  getNewProduct {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    deleted\n    active\n  }\n}\n    `;\n\n/**\n * __useCreateProductQuery__\n *\n * To run a query within a React component, call `useCreateProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useCreateProductQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCreateProductQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCreateProductQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CreateProductQuery, CreateProductQueryVariables>) {\n        return ApolloReactHooks.useQuery<CreateProductQuery, CreateProductQueryVariables>(CreateProductDocument, baseOptions);\n      }\nexport function useCreateProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CreateProductQuery, CreateProductQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CreateProductQuery, CreateProductQueryVariables>(CreateProductDocument, baseOptions);\n        }\nexport type CreateProductQueryHookResult = ReturnType<typeof useCreateProductQuery>;\nexport type CreateProductLazyQueryHookResult = ReturnType<typeof useCreateProductLazyQuery>;\nexport type CreateProductQueryResult = ApolloReactCommon.QueryResult<CreateProductQuery, CreateProductQueryVariables>;\nexport const SavePropertyDocument = gql`\n    mutation saveProperty($property: PropertyInput!) {\n  saveProperty(property: $property)\n}\n    `;\nexport type SavePropertyMutationFn = ApolloReactCommon.MutationFunction<SavePropertyMutation, SavePropertyMutationVariables>;\n\n/**\n * __useSavePropertyMutation__\n *\n * To run a mutation, you first call `useSavePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSavePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [savePropertyMutation, { data, loading, error }] = useSavePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useSavePropertyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SavePropertyMutation, SavePropertyMutationVariables>) {\n        return ApolloReactHooks.useMutation<SavePropertyMutation, SavePropertyMutationVariables>(SavePropertyDocument, baseOptions);\n      }\nexport type SavePropertyMutationHookResult = ReturnType<typeof useSavePropertyMutation>;\nexport type SavePropertyMutationResult = ApolloReactCommon.MutationResult<SavePropertyMutation>;\nexport type SavePropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<SavePropertyMutation, SavePropertyMutationVariables>;\nexport const SaveRatingDocument = gql`\n    mutation saveRating($rating: RatingInput!) {\n  saveRating(rating: $rating)\n}\n    `;\nexport type SaveRatingMutationFn = ApolloReactCommon.MutationFunction<SaveRatingMutation, SaveRatingMutationVariables>;\n\n/**\n * __useSaveRatingMutation__\n *\n * To run a mutation, you first call `useSaveRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveRatingMutation, { data, loading, error }] = useSaveRatingMutation({\n *   variables: {\n *      rating: // value for 'rating'\n *   },\n * });\n */\nexport function useSaveRatingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveRatingMutation, SaveRatingMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveRatingMutation, SaveRatingMutationVariables>(SaveRatingDocument, baseOptions);\n      }\nexport type SaveRatingMutationHookResult = ReturnType<typeof useSaveRatingMutation>;\nexport type SaveRatingMutationResult = ApolloReactCommon.MutationResult<SaveRatingMutation>;\nexport type SaveRatingMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveRatingMutation, SaveRatingMutationVariables>;\nexport const SaveSightDocument = gql`\n    mutation saveSight($sight: SightInput!) {\n  saveSight(sight: $sight)\n}\n    `;\nexport type SaveSightMutationFn = ApolloReactCommon.MutationFunction<SaveSightMutation, SaveSightMutationVariables>;\n\n/**\n * __useSaveSightMutation__\n *\n * To run a mutation, you first call `useSaveSightMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveSightMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveSightMutation, { data, loading, error }] = useSaveSightMutation({\n *   variables: {\n *      sight: // value for 'sight'\n *   },\n * });\n */\nexport function useSaveSightMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveSightMutation, SaveSightMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveSightMutation, SaveSightMutationVariables>(SaveSightDocument, baseOptions);\n      }\nexport type SaveSightMutationHookResult = ReturnType<typeof useSaveSightMutation>;\nexport type SaveSightMutationResult = ApolloReactCommon.MutationResult<SaveSightMutation>;\nexport type SaveSightMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveSightMutation, SaveSightMutationVariables>;\nexport const DeleteBookingDocument = gql`\n    mutation deleteBooking($bookingId: String!) {\n  deleteBooking(bookingId: $bookingId)\n}\n    `;\nexport type DeleteBookingMutationFn = ApolloReactCommon.MutationFunction<DeleteBookingMutation, DeleteBookingMutationVariables>;\n\n/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */\nexport function useDeleteBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteBookingMutation, DeleteBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteBookingMutation, DeleteBookingMutationVariables>(DeleteBookingDocument, baseOptions);\n      }\nexport type DeleteBookingMutationHookResult = ReturnType<typeof useDeleteBookingMutation>;\nexport type DeleteBookingMutationResult = ApolloReactCommon.MutationResult<DeleteBookingMutation>;\nexport type DeleteBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteBookingMutation, DeleteBookingMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation deleteProduct($id: String!) {\n  deleteProduct(id: $id)\n}\n    `;\nexport type DeleteProductMutationFn = ApolloReactCommon.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = ApolloReactCommon.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const AllBookingDocument = gql`\n    query allBooking {\n  allBooking {\n    id\n    from\n    to\n    deleted\n    propertyId\n  }\n}\n    `;\n\n/**\n * __useAllBookingQuery__\n *\n * To run a query within a React component, call `useAllBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllBookingQuery, AllBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllBookingQuery, AllBookingQueryVariables>(AllBookingDocument, baseOptions);\n      }\nexport function useAllBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllBookingQuery, AllBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllBookingQuery, AllBookingQueryVariables>(AllBookingDocument, baseOptions);\n        }\nexport type AllBookingQueryHookResult = ReturnType<typeof useAllBookingQuery>;\nexport type AllBookingLazyQueryHookResult = ReturnType<typeof useAllBookingLazyQuery>;\nexport type AllBookingQueryResult = ApolloReactCommon.QueryResult<AllBookingQuery, AllBookingQueryVariables>;\nexport const ProductsDocument = gql`\n    query Products {\n  getAllProducts {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    deleted\n    active\n  }\n}\n    `;\n\n/**\n * __useProductsQuery__\n *\n * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n      }\nexport function useProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n        }\nexport type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;\nexport type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;\nexport type ProductsQueryResult = ApolloReactCommon.QueryResult<ProductsQuery, ProductsQueryVariables>;\nexport const PropertiesDocument = gql`\n    query Properties {\n  allProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __usePropertiesQuery__\n *\n * To run a query within a React component, call `usePropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PropertiesQuery, PropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<PropertiesQuery, PropertiesQueryVariables>(PropertiesDocument, baseOptions);\n      }\nexport function usePropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PropertiesQuery, PropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PropertiesQuery, PropertiesQueryVariables>(PropertiesDocument, baseOptions);\n        }\nexport type PropertiesQueryHookResult = ReturnType<typeof usePropertiesQuery>;\nexport type PropertiesLazyQueryHookResult = ReturnType<typeof usePropertiesLazyQuery>;\nexport type PropertiesQueryResult = ApolloReactCommon.QueryResult<PropertiesQuery, PropertiesQueryVariables>;\nexport const AllRatingsDocument = gql`\n    query AllRatings {\n  getAllRatings {\n    id\n    targettype\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n\n/**\n * __useAllRatingsQuery__\n *\n * To run a query within a React component, call `useAllRatingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllRatingsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllRatingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllRatingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllRatingsQuery, AllRatingsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllRatingsQuery, AllRatingsQueryVariables>(AllRatingsDocument, baseOptions);\n      }\nexport function useAllRatingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllRatingsQuery, AllRatingsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllRatingsQuery, AllRatingsQueryVariables>(AllRatingsDocument, baseOptions);\n        }\nexport type AllRatingsQueryHookResult = ReturnType<typeof useAllRatingsQuery>;\nexport type AllRatingsLazyQueryHookResult = ReturnType<typeof useAllRatingsLazyQuery>;\nexport type AllRatingsQueryResult = ApolloReactCommon.QueryResult<AllRatingsQuery, AllRatingsQueryVariables>;\nexport const SightsDocument = gql`\n    query Sights {\n  getSights {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n\n/**\n * __useSightsQuery__\n *\n * To run a query within a React component, call `useSightsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSightsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSightsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSightsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SightsQuery, SightsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SightsQuery, SightsQueryVariables>(SightsDocument, baseOptions);\n      }\nexport function useSightsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SightsQuery, SightsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SightsQuery, SightsQueryVariables>(SightsDocument, baseOptions);\n        }\nexport type SightsQueryHookResult = ReturnType<typeof useSightsQuery>;\nexport type SightsLazyQueryHookResult = ReturnType<typeof useSightsLazyQuery>;\nexport type SightsQueryResult = ApolloReactCommon.QueryResult<SightsQuery, SightsQueryVariables>;\nexport const BlockedDatesByPropertyDocument = gql`\n    query blockedDatesByProperty($propertyId: String!) {\n  getBlockedDatesFromProperty(propertyId: $propertyId) {\n    bookingId\n    dateTimeStamp\n    type\n  }\n}\n    `;\n\n/**\n * __useBlockedDatesByPropertyQuery__\n *\n * To run a query within a React component, call `useBlockedDatesByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockedDatesByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockedDatesByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useBlockedDatesByPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>(BlockedDatesByPropertyDocument, baseOptions);\n      }\nexport function useBlockedDatesByPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>(BlockedDatesByPropertyDocument, baseOptions);\n        }\nexport type BlockedDatesByPropertyQueryHookResult = ReturnType<typeof useBlockedDatesByPropertyQuery>;\nexport type BlockedDatesByPropertyLazyQueryHookResult = ReturnType<typeof useBlockedDatesByPropertyLazyQuery>;\nexport type BlockedDatesByPropertyQueryResult = ApolloReactCommon.QueryResult<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>;\nexport const MyBookingDocument = gql`\n    query MyBooking {\n  myBooking {\n    id\n    from\n    to\n    property {\n      id\n      title\n      location\n      long\n      lat\n      images\n      beds_adult\n      beds_kids\n      beds_tent\n      subtext\n    }\n  }\n}\n    `;\n\n/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n      }\nexport function useMyBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n        }\nexport type MyBookingQueryHookResult = ReturnType<typeof useMyBookingQuery>;\nexport type MyBookingLazyQueryHookResult = ReturnType<typeof useMyBookingLazyQuery>;\nexport type MyBookingQueryResult = ApolloReactCommon.QueryResult<MyBookingQuery, MyBookingQueryVariables>;\nexport const BookingsByPropertyDocument = gql`\n    query BookingsByProperty($propertyId: String!) {\n  activeBookingsForProperty(propertyId: $propertyId) {\n    propertyId\n    to\n    from\n  }\n}\n    `;\n\n/**\n * __useBookingsByPropertyQuery__\n *\n * To run a query within a React component, call `useBookingsByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookingsByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookingsByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useBookingsByPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>(BookingsByPropertyDocument, baseOptions);\n      }\nexport function useBookingsByPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>(BookingsByPropertyDocument, baseOptions);\n        }\nexport type BookingsByPropertyQueryHookResult = ReturnType<typeof useBookingsByPropertyQuery>;\nexport type BookingsByPropertyLazyQueryHookResult = ReturnType<typeof useBookingsByPropertyLazyQuery>;\nexport type BookingsByPropertyQueryResult = ApolloReactCommon.QueryResult<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($id: String!) {\n  getProduct(id: $id) {\n    id\n    title\n    creationDate\n    paymentPricePlan\n    price\n    minmonth\n    deleted\n    active\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = ApolloReactCommon.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const TeaserPropertiesDocument = gql`\n    query TeaserProperties {\n  teaserProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useTeaserPropertiesQuery__\n *\n * To run a query within a React component, call `useTeaserPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeaserPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeaserPropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTeaserPropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>(TeaserPropertiesDocument, baseOptions);\n      }\nexport function useTeaserPropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>(TeaserPropertiesDocument, baseOptions);\n        }\nexport type TeaserPropertiesQueryHookResult = ReturnType<typeof useTeaserPropertiesQuery>;\nexport type TeaserPropertiesLazyQueryHookResult = ReturnType<typeof useTeaserPropertiesLazyQuery>;\nexport type TeaserPropertiesQueryResult = ApolloReactCommon.QueryResult<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>;\nexport const GetPropertyDocument = gql`\n    query getProperty($id: String!) {\n  getProperty(id: $id) {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useGetPropertyQuery__\n *\n * To run a query within a React component, call `useGetPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPropertyQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyQuery, GetPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetPropertyQuery, GetPropertyQueryVariables>(GetPropertyDocument, baseOptions);\n      }\nexport function useGetPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyQuery, GetPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetPropertyQuery, GetPropertyQueryVariables>(GetPropertyDocument, baseOptions);\n        }\nexport type GetPropertyQueryHookResult = ReturnType<typeof useGetPropertyQuery>;\nexport type GetPropertyLazyQueryHookResult = ReturnType<typeof useGetPropertyLazyQuery>;\nexport type GetPropertyQueryResult = ApolloReactCommon.QueryResult<GetPropertyQuery, GetPropertyQueryVariables>;\nexport const GetRatingDocument = gql`\n    query getRating($id: String!) {\n  getRating(id: $id) {\n    id\n    targettype\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n\n/**\n * __useGetRatingQuery__\n *\n * To run a query within a React component, call `useGetRatingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetRatingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRatingQuery, GetRatingQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetRatingQuery, GetRatingQueryVariables>(GetRatingDocument, baseOptions);\n      }\nexport function useGetRatingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRatingQuery, GetRatingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetRatingQuery, GetRatingQueryVariables>(GetRatingDocument, baseOptions);\n        }\nexport type GetRatingQueryHookResult = ReturnType<typeof useGetRatingQuery>;\nexport type GetRatingLazyQueryHookResult = ReturnType<typeof useGetRatingLazyQuery>;\nexport type GetRatingQueryResult = ApolloReactCommon.QueryResult<GetRatingQuery, GetRatingQueryVariables>;\nexport const GetRatingValuesByTargetDocument = gql`\n    query getRatingValuesByTarget($targettype: String!, $targetId: String!) {\n  getRatingValuesByTarget(targettype: $targettype, targetId: $targetId) {\n    targetId\n    targettype\n    ratings\n    ratingValue\n  }\n}\n    `;\n\n/**\n * __useGetRatingValuesByTargetQuery__\n *\n * To run a query within a React component, call `useGetRatingValuesByTargetQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingValuesByTargetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingValuesByTargetQuery({\n *   variables: {\n *      targettype: // value for 'targettype'\n *      targetId: // value for 'targetId'\n *   },\n * });\n */\nexport function useGetRatingValuesByTargetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>(GetRatingValuesByTargetDocument, baseOptions);\n      }\nexport function useGetRatingValuesByTargetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>(GetRatingValuesByTargetDocument, baseOptions);\n        }\nexport type GetRatingValuesByTargetQueryHookResult = ReturnType<typeof useGetRatingValuesByTargetQuery>;\nexport type GetRatingValuesByTargetLazyQueryHookResult = ReturnType<typeof useGetRatingValuesByTargetLazyQuery>;\nexport type GetRatingValuesByTargetQueryResult = ApolloReactCommon.QueryResult<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>;\nexport const GetSightDocument = gql`\n    query getSight($id: String!) {\n  getSight(id: $id) {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n\n/**\n * __useGetSightQuery__\n *\n * To run a query within a React component, call `useGetSightQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSightQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSightQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetSightQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSightQuery, GetSightQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetSightQuery, GetSightQueryVariables>(GetSightDocument, baseOptions);\n      }\nexport function useGetSightLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSightQuery, GetSightQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetSightQuery, GetSightQueryVariables>(GetSightDocument, baseOptions);\n        }\nexport type GetSightQueryHookResult = ReturnType<typeof useGetSightQuery>;\nexport type GetSightLazyQueryHookResult = ReturnType<typeof useGetSightLazyQuery>;\nexport type GetSightQueryResult = ApolloReactCommon.QueryResult<GetSightQuery, GetSightQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    email\n    id\n    paymentServiceId\n    gender\n    firstname\n    surname\n    street\n    streetNumber\n    postalcode\n    town\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n      paymentServiceId\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const AddPaymentMethodDocument = gql`\n    mutation addPaymentMethod($paymentMethodId: String!) {\n  addPaymentMethod(paymentMethodId: $paymentMethodId)\n}\n    `;\nexport type AddPaymentMethodMutationFn = ApolloReactCommon.MutationFunction<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>;\n\n/**\n * __useAddPaymentMethodMutation__\n *\n * To run a mutation, you first call `useAddPaymentMethodMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPaymentMethodMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPaymentMethodMutation, { data, loading, error }] = useAddPaymentMethodMutation({\n *   variables: {\n *      paymentMethodId: // value for 'paymentMethodId'\n *   },\n * });\n */\nexport function useAddPaymentMethodMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>(AddPaymentMethodDocument, baseOptions);\n      }\nexport type AddPaymentMethodMutationHookResult = ReturnType<typeof useAddPaymentMethodMutation>;\nexport type AddPaymentMethodMutationResult = ApolloReactCommon.MutationResult<AddPaymentMethodMutation>;\nexport type AddPaymentMethodMutationOptions = ApolloReactCommon.BaseMutationOptions<AddPaymentMethodMutation, AddPaymentMethodMutationVariables>;\nexport const CreatePaymentSerivceCustomerDocument = gql`\n    mutation createPaymentSerivceCustomer {\n  createPaymentServiceCustomer\n}\n    `;\nexport type CreatePaymentSerivceCustomerMutationFn = ApolloReactCommon.MutationFunction<CreatePaymentSerivceCustomerMutation, CreatePaymentSerivceCustomerMutationVariables>;\n\n/**\n * __useCreatePaymentSerivceCustomerMutation__\n *\n * To run a mutation, you first call `useCreatePaymentSerivceCustomerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePaymentSerivceCustomerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPaymentSerivceCustomerMutation, { data, loading, error }] = useCreatePaymentSerivceCustomerMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCreatePaymentSerivceCustomerMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePaymentSerivceCustomerMutation, CreatePaymentSerivceCustomerMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePaymentSerivceCustomerMutation, CreatePaymentSerivceCustomerMutationVariables>(CreatePaymentSerivceCustomerDocument, baseOptions);\n      }\nexport type CreatePaymentSerivceCustomerMutationHookResult = ReturnType<typeof useCreatePaymentSerivceCustomerMutation>;\nexport type CreatePaymentSerivceCustomerMutationResult = ApolloReactCommon.MutationResult<CreatePaymentSerivceCustomerMutation>;\nexport type CreatePaymentSerivceCustomerMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePaymentSerivceCustomerMutation, CreatePaymentSerivceCustomerMutationVariables>;\nexport const SubscribeToPricePlanDocument = gql`\n    mutation subscribeToPricePlan($priceplan: String!) {\n  subscribeToPricePlan(priceplan: $priceplan)\n}\n    `;\nexport type SubscribeToPricePlanMutationFn = ApolloReactCommon.MutationFunction<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>;\n\n/**\n * __useSubscribeToPricePlanMutation__\n *\n * To run a mutation, you first call `useSubscribeToPricePlanMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubscribeToPricePlanMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [subscribeToPricePlanMutation, { data, loading, error }] = useSubscribeToPricePlanMutation({\n *   variables: {\n *      priceplan: // value for 'priceplan'\n *   },\n * });\n */\nexport function useSubscribeToPricePlanMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>(SubscribeToPricePlanDocument, baseOptions);\n      }\nexport type SubscribeToPricePlanMutationHookResult = ReturnType<typeof useSubscribeToPricePlanMutation>;\nexport type SubscribeToPricePlanMutationResult = ApolloReactCommon.MutationResult<SubscribeToPricePlanMutation>;\nexport type SubscribeToPricePlanMutationOptions = ApolloReactCommon.BaseMutationOptions<SubscribeToPricePlanMutation, SubscribeToPricePlanMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($product: ProductInput!) {\n  updateProduct(product: $product)\n}\n    `;\nexport type UpdateProductMutationFn = ApolloReactCommon.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product: // value for 'product'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = ApolloReactCommon.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;\nexport const UpdateUserAddressDocument = gql`\n    mutation updateUserAddress($useraddress: UserAddress!) {\n  updateUserAddress(useraddress: $useraddress)\n}\n    `;\nexport type UpdateUserAddressMutationFn = ApolloReactCommon.MutationFunction<UpdateUserAddressMutation, UpdateUserAddressMutationVariables>;\n\n/**\n * __useUpdateUserAddressMutation__\n *\n * To run a mutation, you first call `useUpdateUserAddressMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserAddressMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserAddressMutation, { data, loading, error }] = useUpdateUserAddressMutation({\n *   variables: {\n *      useraddress: // value for 'useraddress'\n *   },\n * });\n */\nexport function useUpdateUserAddressMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateUserAddressMutation, UpdateUserAddressMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateUserAddressMutation, UpdateUserAddressMutationVariables>(UpdateUserAddressDocument, baseOptions);\n      }\nexport type UpdateUserAddressMutationHookResult = ReturnType<typeof useUpdateUserAddressMutation>;\nexport type UpdateUserAddressMutationResult = ApolloReactCommon.MutationResult<UpdateUserAddressMutation>;\nexport type UpdateUserAddressMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateUserAddressMutation, UpdateUserAddressMutationVariables>;\nexport const UpdateUserNameDocument = gql`\n    mutation updateUserName($username: UserName!) {\n  updateUserName(username: $username)\n}\n    `;\nexport type UpdateUserNameMutationFn = ApolloReactCommon.MutationFunction<UpdateUserNameMutation, UpdateUserNameMutationVariables>;\n\n/**\n * __useUpdateUserNameMutation__\n *\n * To run a mutation, you first call `useUpdateUserNameMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserNameMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserNameMutation, { data, loading, error }] = useUpdateUserNameMutation({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useUpdateUserNameMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateUserNameMutation, UpdateUserNameMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateUserNameMutation, UpdateUserNameMutationVariables>(UpdateUserNameDocument, baseOptions);\n      }\nexport type UpdateUserNameMutationHookResult = ReturnType<typeof useUpdateUserNameMutation>;\nexport type UpdateUserNameMutationResult = ApolloReactCommon.MutationResult<UpdateUserNameMutation>;\nexport type UpdateUserNameMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateUserNameMutation, UpdateUserNameMutationVariables>;"]},"metadata":{},"sourceType":"module"}