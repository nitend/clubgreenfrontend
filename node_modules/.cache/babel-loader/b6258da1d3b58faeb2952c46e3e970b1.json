{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { App } from './App';\nimport { getAccessToken } from './accessToken';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(operation => {\n    const accessToken = getAccessToken();\n\n    if (accessToken) {\n      operation.setContext({\n        headers: {\n          authorization: `bearer ${accessToken}`\n        }\n      });\n    }\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst client = new ApolloClient({\n  link: ApolloLink.from([onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  }), requestLink, new HttpLink({\n    uri: 'http://localhost:4000/graphql',\n    credentials: 'include'\n  })]),\n  cache\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/index.tsx"],"names":["React","ReactDOM","ApolloProvider","App","getAccessToken","ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","Observable","cache","requestLink","operation","forward","observer","handle","Promise","resolve","then","accessToken","setContext","headers","authorization","catch","error","bind","unsubscribe","client","link","from","graphQLErrors","networkError","console","log","uri","credentials","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAGA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,aAAvC;AAEA,MAAMC,KAAK,GAAG,IAAIL,aAAJ,CAAkB,EAAlB,CAAd;AAGA,MAAMM,WAAW,GAAG,IAAIH,UAAJ,CAAe,CAACI,SAAD,EAAYC,OAAZ,KACjC,IAAIJ,UAAJ,CAAeK,QAAQ,IAAI;AACzB,MAAIC,MAAJ;AACAC,EAAAA,OAAO,CAACC,OAAR,CAAgBL,SAAhB,EACGM,IADH,CACSN,SAAD,IAAe;AACf,UAAMO,WAAW,GAAGhB,cAAc,EAAlC;;AACA,QAAGgB,WAAH,EAAe;AACXP,MAAAA,SAAS,CAACQ,UAAV,CAAqB;AACjBC,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAG,UAASH,WAAY;AADhC;AADQ,OAArB;AAKH;AACJ,GAVL,EAWGI,KAXH,CAWST,QAAQ,CAACU,KAAT,CAAeC,IAAf,CAAoBX,QAApB,CAXT;AAaA,SAAO,MAAM;AACX,QAAIC,MAAJ,EAAYA,MAAM,CAACW,WAAP;AACb,GAFD;AAGD,CAlBD,CADkB,CAApB;AAsBA,MAAMC,MAAM,GAAG,IAAIvB,YAAJ,CAAiB;AAC9BwB,EAAAA,IAAI,EAAEpB,UAAU,CAACqB,IAAX,CAAgB,CACpBtB,OAAO,CAAC,CAAC;AAAEuB,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,KAAqC;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACH,GAHM,CADa,EAKpBpB,WALoB,EAMpB,IAAIL,QAAJ,CAAa;AACT4B,IAAAA,GAAG,EAAE,+BADI;AAETC,IAAAA,WAAW,EAAE;AAFJ,GAAb,CANoB,CAAhB,CADwB;AAY9BzB,EAAAA;AAZ8B,CAAjB,CAAf;AAeAV,QAAQ,CAACoC,MAAT,CACI,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAET,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAGuBU,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHvB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloProvider} from '@apollo/react-hooks'\nimport {App} from './App';\nimport { getAccessToken } from './accessToken';\n\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\n\nconst cache = new InMemoryCache({});\n\n\nconst requestLink = new ApolloLink((operation, forward) =>\n  new Observable(observer => {\n    let handle: any;\n    Promise.resolve(operation)\n      .then((operation) => {\n            const accessToken = getAccessToken();\n            if(accessToken){\n                operation.setContext({\n                    headers: {\n                        authorization: `bearer ${accessToken}`\n                    } \n                })\n            }\n        })\n      .catch(observer.error.bind(observer));\n\n    return () => {\n      if (handle) handle.unsubscribe();\n    };\n  })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n        console.log(graphQLErrors);\n        console.log(networkError)\n    }),\n    requestLink,\n    new HttpLink({\n        uri: 'http://localhost:4000/graphql',\n        credentials: 'include'\n    })\n  ]),\n  cache\n});\n\nReactDOM.render(\n    <ApolloProvider client={client} >\n        <App />\n    </ApolloProvider>, document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}