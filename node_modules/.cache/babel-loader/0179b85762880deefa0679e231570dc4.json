{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const HelloDocument = gql`\n    query Hello {\n  hello\n}\n    `;\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useHelloQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(HelloDocument, baseOptions);\n}\nexport function useHelloLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(HelloDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","HelloDocument","useHelloQuery","baseOptions","useQuery","useHelloLazyQuery","useLazyQuery"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AA2DA,OAAO,MAAMC,aAAa,GAAGF,GAAI;;;;KAA1B;AAMP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASG,aAAT,CAAuBC,WAAvB,EAAyG;AACxG,SAAOH,gBAAgB,CAACI,QAAjB,CAA2DH,aAA3D,EAA0EE,WAA1E,CAAP;AACD;AACP,OAAO,SAASE,iBAAT,CAA2BF,WAA3B,EAAiH;AAC9G,SAAOH,gBAAgB,CAACM,YAAjB,CAA+DL,aAA/D,EAA8EE,WAA9E,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  password: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String']\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  hello: Scalars['String'],\n  bye: Scalars['String'],\n  user: Array<User>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  userName: Scalars['String'],\n  email: Scalars['String'],\n  tokenVersion: Scalars['Float'],\n};\n\nexport type HelloQueryVariables = {};\n\n\nexport type HelloQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'hello'>\n);\n\n\nexport const HelloDocument = gql`\n    query Hello {\n  hello\n}\n    `;\n\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useHelloQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<HelloQuery, HelloQueryVariables>) {\n        return ApolloReactHooks.useQuery<HelloQuery, HelloQueryVariables>(HelloDocument, baseOptions);\n      }\nexport function useHelloLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<HelloQuery, HelloQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<HelloQuery, HelloQueryVariables>(HelloDocument, baseOptions);\n        }\nexport type HelloQueryHookResult = ReturnType<typeof useHelloQuery>;\nexport type HelloLazyQueryHookResult = ReturnType<typeof useHelloLazyQuery>;\nexport type HelloQueryResult = ApolloReactCommon.QueryResult<HelloQuery, HelloQueryVariables>;"]},"metadata":{},"sourceType":"module"}