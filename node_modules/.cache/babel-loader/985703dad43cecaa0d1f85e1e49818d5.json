{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { App } from './App';\nimport { getAccessToken } from './accessToken';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(operation => {\n    const accessToken = getAccessToken();\n\n    if (accessToken) {\n      operation.setContext({\n        headers: {\n          authorization: `bearer ${accessToken}`\n        }\n      });\n    }\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst client = new ApolloClient({\n  link: ApolloLink.from([new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const {\n          exp\n        } = jwtDecode(token);\n\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (error) {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(\"http://localhost:4000/refresh_token\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn('Your refresh token is invalid. Try to relogin');\n    }\n  }), onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  }), requestLink, new HttpLink({\n    uri: 'http://localhost:4000/graphql',\n    credentials: 'include'\n  })]),\n  cache\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/index.tsx"],"names":["React","ReactDOM","ApolloProvider","App","getAccessToken","ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","Observable","TokenRefreshLink","jwtDecode","cache","requestLink","operation","forward","observer","handle","Promise","resolve","then","accessToken","setContext","headers","authorization","catch","error","bind","unsubscribe","client","link","from","accessTokenField","isTokenValidOrUndefined","token","exp","Date","now","fetchAccessToken","fetch","method","credentials","handleFetch","setAccessToken","handleError","err","console","warn","graphQLErrors","networkError","log","uri","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ApolloProvider} from '@apollo/react-hooks'\nimport {App} from './App';\nimport { getAccessToken } from './accessToken';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport jwtDecode from 'jwt-decode';\n\nconst cache = new InMemoryCache({});\n\n\nconst requestLink = new ApolloLink((operation, forward) =>\n  new Observable(observer => {\n    let handle: any;\n    Promise.resolve(operation)\n      .then((operation) => {\n            const accessToken = getAccessToken();\n            if(accessToken){\n                operation.setContext({\n                    headers: {\n                        authorization: `bearer ${accessToken}`\n                    } \n                })\n            }\n        })\n      .catch(observer.error.bind(observer));\n\n    return () => {\n      if (handle) handle.unsubscribe();\n    };\n  })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n        accessTokenField: \"accessToken\",\n        isTokenValidOrUndefined: () => {\n            const token = getAccessToken();\n            if(!token){\n                return true;\n            } \n\n            try {\n                const {exp} = jwtDecode(token)\n                if(Date.now() >= exp * 1000){\n                    return false;\n                } else {\n                    return true;\n                }\n                \n            } catch (error) {\n                return false;\n            }\n        },\n\n        fetchAccessToken: () => {\n            return fetch (\"http://localhost:4000/refresh_token\", {\n                method: \"POST\",\n                credentials: \"include\"\n            })\n        },\n        handleFetch: accessToken => {\n            setAccessToken(accessToken);\n        },\n\n        handleError: err => {\n            console.warn('Your refresh token is invalid. Try to relogin');\n        }\n      }),\n    onError(({ graphQLErrors, networkError }) => {\n        console.log(graphQLErrors);\n        console.log(networkError)\n    }),\n    requestLink,\n    new HttpLink({\n        uri: 'http://localhost:4000/graphql',\n        credentials: 'include'\n    })\n  ]),\n  cache\n});\n\nReactDOM.render(\n    <ApolloProvider client={client} >\n        <App />\n    </ApolloProvider>, document.getElementById('root'));\n\n\n"]},"metadata":{},"sourceType":"module"}