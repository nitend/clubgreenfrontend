{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/products/PropertyEditor.tsx\";\nimport React, { useState } from 'react';\nimport { useGetProductQuery, useSaveProductMutation } from '../../../generated/graphql';\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct, newProduct } from './ProductObject';\nexport const ProductEditor = props => {\n  const {\n    id\n  } = useParams();\n  const [showMessage, setshowMessage] = useState(false);\n  const {\n    data,\n    error\n  } = useGetProductQuery({\n    variables: {\n      id: parseInt(id ? id : \"0\")\n    }\n  });\n  const [saveProduct] = useSaveProductMutation();\n\n  async function onSubmit(values) {\n    var result = await saveProduct({\n      variables: {\n        product: formatProduct(values)\n      }\n    });\n\n    if (result) {\n      setshowMessage(true); // history.push(\"/admin#/properties\")\n    }\n  }\n\n  if (data && data.getProduct || id == \"0\") {\n    var product = newProduct;\n\n    if (data === null || data === void 0 ? void 0 : data.getProduct) {\n      product = data.getProduct;\n    }\n\n    console.log(\"id \" + id);\n    return React.createElement(Editor, {\n      entity: product,\n      store: onSubmit,\n      entityId: product.id,\n      imageuploadurl: \"http://localhost:4000/upload/property/image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(MessageView, {\n      severity: \"success\",\n      message: \"Die Daten wurden gespeichert\",\n      show: showMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n  if (error) {\n    return React.createElement(ErrorMessage, {\n      error: error,\n      show: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(LoadingAnimation, {\n    message: \"Daten werden geladen ...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/products/PropertyEditor.tsx"],"names":["React","useState","useGetProductQuery","useSaveProductMutation","useParams","Editor","MessageView","LoadingAnimation","ErrorMessage","formatProduct","newProduct","ProductEditor","props","id","showMessage","setshowMessage","data","error","variables","parseInt","saveProduct","onSubmit","values","result","product","getProduct","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAA4CC,kBAA5C,EAAyEC,sBAAzE,QAAuG,4BAAvG;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,QAA4B,6CAA5B;AACA,SAASC,gBAAT,QAAiC,kDAAjC;AACA,SAASC,YAAT,QAA6B,8CAA7B;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,iBAA1C;AAOA,OAAO,MAAMC,aAA8B,GAAIC,KAAD,IAAW;AAErD,QAAM;AAAEC,IAAAA;AAAF,MAAST,SAAS,EAAxB;AAEA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAACe,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAgBf,kBAAkB,CAAC;AACrCgB,IAAAA,SAAS,EAAE;AACPL,MAAAA,EAAE,EAAEM,QAAQ,CAACN,EAAE,GAAGA,EAAH,GAAQ,GAAX;AADL;AAD0B,GAAD,CAAxC;AAMA,QAAM,CAACO,WAAD,IAAgBjB,sBAAsB,EAA5C;;AAEA,iBAAekB,QAAf,CAAwBC,MAAxB,EAAyC;AACrC,QAAIC,MAAM,GAAG,MAAMH,WAAW,CAAC;AAC3BF,MAAAA,SAAS,EAAE;AACPM,QAAAA,OAAO,EAAEf,aAAa,CAACa,MAAD;AADf;AADgB,KAAD,CAA9B;;AAKA,QAAGC,MAAH,EAAU;AACNR,MAAAA,cAAc,CAAC,IAAD,CAAd,CADM,CAEN;AACH;AACJ;;AAGD,MAAIC,IAAI,IAAIA,IAAI,CAACS,UAAd,IAA8BZ,EAAE,IAAI,GAAvC,EAA6C;AACzC,QAAIW,OAAO,GAAGd,UAAd;;AACA,QAAGM,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAES,UAAT,EAAoB;AAChBD,MAAAA,OAAO,GAAGR,IAAI,CAACS,UAAf;AACH;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAMd,EAAlB;AAEA,WACI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAEW,OADZ;AAEI,MAAA,KAAK,EAAEH,QAFX;AAGI,MAAA,QAAQ,EAAEG,OAAO,CAACX,EAHtB;AAII,MAAA,cAAc,EAAE,6CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,SAAvB;AAAkC,MAAA,OAAO,EAAE,8BAA3C;AAA2E,MAAA,IAAI,EAAEC,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAGD,MAAGG,KAAH,EAAS;AACL,WAAQ,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAArB;AAA4B,MAAA,IAAI,EAAE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAED,SAAQ,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CAnDM","sourcesContent":["import React, { useState } from 'react'\nimport { Property, useSavePropertyMutation, useGetProductQuery, Product, useSaveProductMutation } from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct, newProduct } from './ProductObject';\n\n\ninterface Props {\n    \n}\n\nexport const ProductEditor: React.FC<Props> = (props) => {\n\n    const { id } = useParams()\n\n    const [showMessage, setshowMessage] = useState(false);\n    const {data, error} = useGetProductQuery({\n        variables: {\n            id: parseInt(id ? id : \"0\")\n        }\n    });\n    \n    const [saveProduct] = useSaveProductMutation();\n\n    async function onSubmit(values: Product) {     \n        var result = await saveProduct({\n            variables: {\n                product: formatProduct(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n            // history.push(\"/admin#/properties\")\n        }\n    }\n\n    \n    if((data && data.getProduct) || (id == \"0\")) {\n        var product = newProduct;\n        if(data?.getProduct){\n            product = data.getProduct;\n        }\n\n        console.log(\"id \"+id)\n        \n        return(\n            <Editor \n                entity={product} \n                store={onSubmit} \n                entityId={product.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}