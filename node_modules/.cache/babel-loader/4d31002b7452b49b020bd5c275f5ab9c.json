{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const CreateMyBookingDocument = gql`\n    mutation CreateMyBooking($to: Float!, $from: Float!, $propertyId: Float!) {\n  bookProperty(to: $to, from: $from, propertyId: $propertyId)\n}\n    `;\n\n/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      to: // value for 'to'\n *      from: // value for 'from'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useCreateMyBookingMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(CreateMyBookingDocument, baseOptions);\n}\nexport const SavePropertyDocument = gql`\n    mutation saveProperty($property: PropertyInput!) {\n  saveProperty(property: $property)\n}\n    `;\n\n/**\n * __useSavePropertyMutation__\n *\n * To run a mutation, you first call `useSavePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSavePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [savePropertyMutation, { data, loading, error }] = useSavePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useSavePropertyMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SavePropertyDocument, baseOptions);\n}\nexport const SaveRatingDocument = gql`\n    mutation saveRating($rating: RatingInput!) {\n  saveRating(rating: $rating)\n}\n    `;\n\n/**\n * __useSaveRatingMutation__\n *\n * To run a mutation, you first call `useSaveRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveRatingMutation, { data, loading, error }] = useSaveRatingMutation({\n *   variables: {\n *      rating: // value for 'rating'\n *   },\n * });\n */\nexport function useSaveRatingMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SaveRatingDocument, baseOptions);\n}\nexport const SaveSightDocument = gql`\n    mutation saveSight($sight: SightInput!) {\n  saveSight(sight: $sight)\n}\n    `;\n\n/**\n * __useSaveSightMutation__\n *\n * To run a mutation, you first call `useSaveSightMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveSightMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveSightMutation, { data, loading, error }] = useSaveSightMutation({\n *   variables: {\n *      sight: // value for 'sight'\n *   },\n * });\n */\nexport function useSaveSightMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SaveSightDocument, baseOptions);\n}\nexport const DeleteBookingDocument = gql`\n    mutation deleteBooking($bookingId: Float!) {\n  deleteBooking(bookingId: $bookingId)\n}\n    `;\n\n/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */\nexport function useDeleteBookingMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(DeleteBookingDocument, baseOptions);\n}\nexport const AllBookingDocument = gql`\n    query allBooking {\n  allBooking {\n    id\n    from\n    to\n    deleted\n    propertyId\n  }\n}\n    `;\n/**\n * __useAllBookingQuery__\n *\n * To run a query within a React component, call `useAllBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllBookingQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AllBookingDocument, baseOptions);\n}\nexport function useAllBookingLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AllBookingDocument, baseOptions);\n}\nexport const PropertiesDocument = gql`\n    query Properties {\n  allProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n/**\n * __usePropertiesQuery__\n *\n * To run a query within a React component, call `usePropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePropertiesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function usePropertiesQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(PropertiesDocument, baseOptions);\n}\nexport function usePropertiesLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(PropertiesDocument, baseOptions);\n}\nexport const AllRatingsDocument = gql`\n    query AllRatings {\n  getAllRatings {\n    id\n    targettype\n    targetId\n    comment\n    rating\n  }\n}\n    `;\n/**\n * __useAllRatingsQuery__\n *\n * To run a query within a React component, call `useAllRatingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllRatingsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllRatingsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useAllRatingsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(AllRatingsDocument, baseOptions);\n}\nexport function useAllRatingsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(AllRatingsDocument, baseOptions);\n}\nexport const SightsDocument = gql`\n    query Sights {\n  getSights {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n/**\n * __useSightsQuery__\n *\n * To run a query within a React component, call `useSightsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSightsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSightsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useSightsQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(SightsDocument, baseOptions);\n}\nexport function useSightsLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(SightsDocument, baseOptions);\n}\nexport const BlockedDatesByPropertyDocument = gql`\n    query blockedDatesByProperty($propertyId: Float!) {\n  getBlockedDatesFromProperty(propertyId: $propertyId) {\n    bookingId\n    dateTimeStamp\n    type\n  }\n}\n    `;\n/**\n * __useBlockedDatesByPropertyQuery__\n *\n * To run a query within a React component, call `useBlockedDatesByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockedDatesByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockedDatesByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\n\nexport function useBlockedDatesByPropertyQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(BlockedDatesByPropertyDocument, baseOptions);\n}\nexport function useBlockedDatesByPropertyLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(BlockedDatesByPropertyDocument, baseOptions);\n}\nexport const MyBookingDocument = gql`\n    query MyBooking {\n  myBooking {\n    id\n    from\n    to\n    property {\n      id\n      title\n      location\n      long\n      lat\n      images\n      beds_adult\n      beds_kids\n      beds_tent\n      subtext\n    }\n  }\n}\n    `;\n/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMyBookingQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MyBookingDocument, baseOptions);\n}\nexport function useMyBookingLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MyBookingDocument, baseOptions);\n}\nexport const BookingsByPropertyDocument = gql`\n    query BookingsByProperty($propertyId: Float!) {\n  activeBookingsForProperty(propertyId: $propertyId) {\n    propertyId\n    to\n    from\n  }\n}\n    `;\n/**\n * __useBookingsByPropertyQuery__\n *\n * To run a query within a React component, call `useBookingsByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookingsByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookingsByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\n\nexport function useBookingsByPropertyQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(BookingsByPropertyDocument, baseOptions);\n}\nexport function useBookingsByPropertyLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(BookingsByPropertyDocument, baseOptions);\n}\nexport const TeaserPropertiesDocument = gql`\n    query TeaserProperties {\n  teaserProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n/**\n * __useTeaserPropertiesQuery__\n *\n * To run a query within a React component, call `useTeaserPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeaserPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeaserPropertiesQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTeaserPropertiesQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(TeaserPropertiesDocument, baseOptions);\n}\nexport function useTeaserPropertiesLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(TeaserPropertiesDocument, baseOptions);\n}\nexport const GetPropertyDocument = gql`\n    query getProperty($id: Float!) {\n  getProperty(id: $id) {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n/**\n * __useGetPropertyQuery__\n *\n * To run a query within a React component, call `useGetPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPropertyQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useGetPropertyQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetPropertyDocument, baseOptions);\n}\nexport function useGetPropertyLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetPropertyDocument, baseOptions);\n}\nexport const GetRatingDocument = gql`\n    query getRating($id: Float!) {\n  getRating(id: $id) {\n    id\n    targettype\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n/**\n * __useGetRatingQuery__\n *\n * To run a query within a React component, call `useGetRatingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useGetRatingQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetRatingDocument, baseOptions);\n}\nexport function useGetRatingLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetRatingDocument, baseOptions);\n}\nexport const GetRatingValuesByTargetDocument = gql`\n    query getRatingValuesByTarget($targettype: String!, $targetId: Float!) {\n  getRatingValuesByTarget(targettype: $targettype, targetId: $targetId) {\n    targetId\n    targettype\n    ratings\n    ratingValue\n  }\n}\n    `;\n/**\n * __useGetRatingValuesByTargetQuery__\n *\n * To run a query within a React component, call `useGetRatingValuesByTargetQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingValuesByTargetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingValuesByTargetQuery({\n *   variables: {\n *      targettype: // value for 'targettype'\n *      targetId: // value for 'targetId'\n *   },\n * });\n */\n\nexport function useGetRatingValuesByTargetQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetRatingValuesByTargetDocument, baseOptions);\n}\nexport function useGetRatingValuesByTargetLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetRatingValuesByTargetDocument, baseOptions);\n}\nexport const GetSightDocument = gql`\n    query getSight($id: Float!) {\n  getSight(id: $id) {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n/**\n * __useGetSightQuery__\n *\n * To run a query within a React component, call `useGetSightQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSightQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSightQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function useGetSightQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetSightDocument, baseOptions);\n}\nexport function useGetSightLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetSightDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    email\n    id\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MeDocument, baseOptions);\n}\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useUsersQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(UsersDocument, baseOptions);\n}\nexport function useUsersLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(UsersDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n  }\n}\n    `;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LogoutDocument, baseOptions);\n}\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(RegisterDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","CreateMyBookingDocument","useCreateMyBookingMutation","baseOptions","useMutation","SavePropertyDocument","useSavePropertyMutation","SaveRatingDocument","useSaveRatingMutation","SaveSightDocument","useSaveSightMutation","DeleteBookingDocument","useDeleteBookingMutation","AllBookingDocument","useAllBookingQuery","useQuery","useAllBookingLazyQuery","useLazyQuery","PropertiesDocument","usePropertiesQuery","usePropertiesLazyQuery","AllRatingsDocument","useAllRatingsQuery","useAllRatingsLazyQuery","SightsDocument","useSightsQuery","useSightsLazyQuery","BlockedDatesByPropertyDocument","useBlockedDatesByPropertyQuery","useBlockedDatesByPropertyLazyQuery","MyBookingDocument","useMyBookingQuery","useMyBookingLazyQuery","BookingsByPropertyDocument","useBookingsByPropertyQuery","useBookingsByPropertyLazyQuery","TeaserPropertiesDocument","useTeaserPropertiesQuery","useTeaserPropertiesLazyQuery","GetPropertyDocument","useGetPropertyQuery","useGetPropertyLazyQuery","GetRatingDocument","useGetRatingQuery","useGetRatingLazyQuery","GetRatingValuesByTargetDocument","useGetRatingValuesByTargetQuery","useGetRatingValuesByTargetLazyQuery","GetSightDocument","useGetSightQuery","useGetSightLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","UsersDocument","useUsersQuery","useUsersLazyQuery","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","RegisterDocument","useRegisterMutation"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type BlockedDate = {\n   __typename?: 'BlockedDate',\n  bookingId: Scalars['Float'],\n  dateTimeStamp: Scalars['Float'],\n  type: Scalars['Float'],\n};\n\nexport type Booking = {\n   __typename?: 'Booking',\n  id: Scalars['Int'],\n  user: Scalars['String'],\n  date: Scalars['Float'],\n  from: Scalars['Float'],\n  to: Scalars['Float'],\n  deleted: Scalars['Boolean'],\n  propertyId: Scalars['Float'],\n  property: Property,\n};\n\nexport type Email = {\n   __typename?: 'Email',\n  id: Scalars['Int'],\n  email: Scalars['String'],\n  verified: Scalars['Boolean'],\n  verification_token: Scalars['String'],\n  verification_date: Scalars['Float'],\n};\n\nexport type LoginResponse = {\n   __typename?: 'LoginResponse',\n  accessToken: Scalars['String'],\n  user: User,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  logout: Scalars['Boolean'],\n  revokeRefreshTokeForUser: Scalars['Boolean'],\n  login: LoginResponse,\n  register: Scalars['Boolean'],\n  bookProperty: Scalars['Boolean'],\n  deleteBooking: Scalars['Boolean'],\n  saveProperty: Scalars['Boolean'],\n  createProperty: Scalars['Boolean'],\n  deleteProperty: Scalars['Boolean'],\n  saveSight: Scalars['Boolean'],\n  deleteSight: Scalars['Boolean'],\n  saveRating: Scalars['Boolean'],\n  deleteRating: Scalars['Boolean'],\n};\n\n\nexport type MutationRevokeRefreshTokeForUserArgs = {\n  userId: Scalars['Int']\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'],\n  email: Scalars['String']\n};\n\n\nexport type MutationRegisterArgs = {\n  password: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String']\n};\n\n\nexport type MutationBookPropertyArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float'],\n  propertyId: Scalars['Float']\n};\n\n\nexport type MutationDeleteBookingArgs = {\n  bookingId: Scalars['Float']\n};\n\n\nexport type MutationSavePropertyArgs = {\n  property: PropertyInput\n};\n\n\nexport type MutationCreatePropertyArgs = {\n  images: Array<Scalars['String']>,\n  beds_tent: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  title: Scalars['String']\n};\n\n\nexport type MutationDeletePropertyArgs = {\n  id: Scalars['Float']\n};\n\n\nexport type MutationSaveSightArgs = {\n  sight: SightInput\n};\n\n\nexport type MutationDeleteSightArgs = {\n  id: Scalars['Float']\n};\n\n\nexport type MutationSaveRatingArgs = {\n  rating: RatingInput\n};\n\n\nexport type MutationDeleteRatingArgs = {\n  id: Scalars['Float']\n};\n\nexport type Property = {\n   __typename?: 'Property',\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_tent: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type PropertyInput = {\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  beds_adult: Scalars['Float'],\n  beds_kids: Scalars['Float'],\n  beds_tent: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  hello: Scalars['String'],\n  bye: Scalars['String'],\n  me?: Maybe<User>,\n  users: Array<User>,\n  myBooking?: Maybe<Booking>,\n  allBooking?: Maybe<Array<Booking>>,\n  getBlockedDatesFromProperty?: Maybe<Array<BlockedDate>>,\n  propertiesEvalable?: Maybe<Array<Booking>>,\n  allProperties?: Maybe<Array<Property>>,\n  teaserProperties?: Maybe<Array<Property>>,\n  activeBookingsForProperty?: Maybe<Array<Booking>>,\n  getProperties?: Maybe<Array<Property>>,\n  getProperty?: Maybe<Property>,\n  getSights?: Maybe<Array<Sight>>,\n  getSight?: Maybe<Sight>,\n  getAllRatings?: Maybe<Array<Rating>>,\n  getRating?: Maybe<Rating>,\n  getRatingValuesByTarget?: Maybe<RatingValues>,\n};\n\n\nexport type QueryGetBlockedDatesFromPropertyArgs = {\n  propertyId: Scalars['Float']\n};\n\n\nexport type QueryPropertiesEvalableArgs = {\n  to: Scalars['Float'],\n  from: Scalars['Float']\n};\n\n\nexport type QueryActiveBookingsForPropertyArgs = {\n  propertyId: Scalars['Float']\n};\n\n\nexport type QueryGetPropertyArgs = {\n  id: Scalars['Float']\n};\n\n\nexport type QueryGetSightArgs = {\n  id: Scalars['Float']\n};\n\n\nexport type QueryGetRatingArgs = {\n  id: Scalars['Float']\n};\n\n\nexport type QueryGetRatingValuesByTargetArgs = {\n  targetId: Scalars['Float'],\n  targettype: Scalars['String']\n};\n\nexport type Rating = {\n   __typename?: 'Rating',\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  rating: Scalars['Float'],\n  userId: Scalars['Float'],\n  comment: Scalars['String'],\n};\n\nexport type RatingInput = {\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  rating: Scalars['Float'],\n  userId: Scalars['Float'],\n  comment: Scalars['String'],\n};\n\nexport type RatingValues = {\n   __typename?: 'RatingValues',\n  targettype: Scalars['String'],\n  targetId: Scalars['Float'],\n  ratings: Scalars['Float'],\n  ratingValue: Scalars['Float'],\n};\n\nexport type Sight = {\n   __typename?: 'Sight',\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  type: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type SightInput = {\n  id: Scalars['Int'],\n  title: Scalars['String'],\n  type: Scalars['String'],\n  subtext: Scalars['String'],\n  location: Scalars['String'],\n  long: Scalars['Float'],\n  lat: Scalars['Float'],\n  images: Array<Scalars['String']>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  username: Scalars['String'],\n  email: Scalars['String'],\n  tokenVersion: Scalars['Float'],\n  email_verified: Scalars['Boolean'],\n};\n\nexport type CreateMyBookingMutationVariables = {\n  to: Scalars['Float'],\n  from: Scalars['Float'],\n  propertyId: Scalars['Float']\n};\n\n\nexport type CreateMyBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'bookProperty'>\n);\n\nexport type SavePropertyMutationVariables = {\n  property: PropertyInput\n};\n\n\nexport type SavePropertyMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveProperty'>\n);\n\nexport type SaveRatingMutationVariables = {\n  rating: RatingInput\n};\n\n\nexport type SaveRatingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveRating'>\n);\n\nexport type SaveSightMutationVariables = {\n  sight: SightInput\n};\n\n\nexport type SaveSightMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'saveSight'>\n);\n\nexport type DeleteBookingMutationVariables = {\n  bookingId: Scalars['Float']\n};\n\n\nexport type DeleteBookingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteBooking'>\n);\n\nexport type AllBookingQueryVariables = {};\n\n\nexport type AllBookingQuery = (\n  { __typename?: 'Query' }\n  & { allBooking: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'from' | 'to' | 'deleted' | 'propertyId'>\n  )>> }\n);\n\nexport type PropertiesQueryVariables = {};\n\n\nexport type PropertiesQuery = (\n  { __typename?: 'Query' }\n  & { allProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type AllRatingsQueryVariables = {};\n\n\nexport type AllRatingsQuery = (\n  { __typename?: 'Query' }\n  & { getAllRatings: Maybe<Array<(\n    { __typename?: 'Rating' }\n    & Pick<Rating, 'id' | 'targettype' | 'targetId' | 'comment' | 'rating'>\n  )>> }\n);\n\nexport type SightsQueryVariables = {};\n\n\nexport type SightsQuery = (\n  { __typename?: 'Query' }\n  & { getSights: Maybe<Array<(\n    { __typename?: 'Sight' }\n    & Pick<Sight, 'id' | 'title' | 'type' | 'subtext' | 'location' | 'long' | 'lat' | 'images'>\n  )>> }\n);\n\nexport type BlockedDatesByPropertyQueryVariables = {\n  propertyId: Scalars['Float']\n};\n\n\nexport type BlockedDatesByPropertyQuery = (\n  { __typename?: 'Query' }\n  & { getBlockedDatesFromProperty: Maybe<Array<(\n    { __typename?: 'BlockedDate' }\n    & Pick<BlockedDate, 'bookingId' | 'dateTimeStamp' | 'type'>\n  )>> }\n);\n\nexport type MyBookingQueryVariables = {};\n\n\nexport type MyBookingQuery = (\n  { __typename?: 'Query' }\n  & { myBooking: Maybe<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'from' | 'to'>\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id' | 'title' | 'location' | 'long' | 'lat' | 'images' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'subtext'>\n    ) }\n  )> }\n);\n\nexport type BookingsByPropertyQueryVariables = {\n  propertyId: Scalars['Float']\n};\n\n\nexport type BookingsByPropertyQuery = (\n  { __typename?: 'Query' }\n  & { activeBookingsForProperty: Maybe<Array<(\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'propertyId' | 'to' | 'from'>\n  )>> }\n);\n\nexport type TeaserPropertiesQueryVariables = {};\n\n\nexport type TeaserPropertiesQuery = (\n  { __typename?: 'Query' }\n  & { teaserProperties: Maybe<Array<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )>> }\n);\n\nexport type GetPropertyQueryVariables = {\n  id: Scalars['Float']\n};\n\n\nexport type GetPropertyQuery = (\n  { __typename?: 'Query' }\n  & { getProperty: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id' | 'title' | 'subtext' | 'location' | 'long' | 'lat' | 'beds_adult' | 'beds_kids' | 'beds_tent' | 'images'>\n  )> }\n);\n\nexport type GetRatingQueryVariables = {\n  id: Scalars['Float']\n};\n\n\nexport type GetRatingQuery = (\n  { __typename?: 'Query' }\n  & { getRating: Maybe<(\n    { __typename?: 'Rating' }\n    & Pick<Rating, 'id' | 'targettype' | 'targetId' | 'comment' | 'rating' | 'title' | 'userId'>\n  )> }\n);\n\nexport type GetRatingValuesByTargetQueryVariables = {\n  targettype: Scalars['String'],\n  targetId: Scalars['Float']\n};\n\n\nexport type GetRatingValuesByTargetQuery = (\n  { __typename?: 'Query' }\n  & { getRatingValuesByTarget: Maybe<(\n    { __typename?: 'RatingValues' }\n    & Pick<RatingValues, 'targetId' | 'targettype' | 'ratings' | 'ratingValue'>\n  )> }\n);\n\nexport type GetSightQueryVariables = {\n  id: Scalars['Float']\n};\n\n\nexport type GetSightQuery = (\n  { __typename?: 'Query' }\n  & { getSight: Maybe<(\n    { __typename?: 'Sight' }\n    & Pick<Sight, 'id' | 'title' | 'type' | 'subtext' | 'location' | 'long' | 'lat' | 'images'>\n  )> }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'email' | 'id'>\n  )> }\n);\n\nexport type UsersQueryVariables = {};\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\nexport type LoginMutationVariables = {\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = {};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type RegisterMutationVariables = {\n  username: Scalars['String'],\n  email: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\n\nexport const CreateMyBookingDocument = gql`\n    mutation CreateMyBooking($to: Float!, $from: Float!, $propertyId: Float!) {\n  bookProperty(to: $to, from: $from, propertyId: $propertyId)\n}\n    `;\nexport type CreateMyBookingMutationFn = ApolloReactCommon.MutationFunction<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\n\n/**\n * __useCreateMyBookingMutation__\n *\n * To run a mutation, you first call `useCreateMyBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMyBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMyBookingMutation, { data, loading, error }] = useCreateMyBookingMutation({\n *   variables: {\n *      to: // value for 'to'\n *      from: // value for 'from'\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useCreateMyBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateMyBookingMutation, CreateMyBookingMutationVariables>(CreateMyBookingDocument, baseOptions);\n      }\nexport type CreateMyBookingMutationHookResult = ReturnType<typeof useCreateMyBookingMutation>;\nexport type CreateMyBookingMutationResult = ApolloReactCommon.MutationResult<CreateMyBookingMutation>;\nexport type CreateMyBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateMyBookingMutation, CreateMyBookingMutationVariables>;\nexport const SavePropertyDocument = gql`\n    mutation saveProperty($property: PropertyInput!) {\n  saveProperty(property: $property)\n}\n    `;\nexport type SavePropertyMutationFn = ApolloReactCommon.MutationFunction<SavePropertyMutation, SavePropertyMutationVariables>;\n\n/**\n * __useSavePropertyMutation__\n *\n * To run a mutation, you first call `useSavePropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSavePropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [savePropertyMutation, { data, loading, error }] = useSavePropertyMutation({\n *   variables: {\n *      property: // value for 'property'\n *   },\n * });\n */\nexport function useSavePropertyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SavePropertyMutation, SavePropertyMutationVariables>) {\n        return ApolloReactHooks.useMutation<SavePropertyMutation, SavePropertyMutationVariables>(SavePropertyDocument, baseOptions);\n      }\nexport type SavePropertyMutationHookResult = ReturnType<typeof useSavePropertyMutation>;\nexport type SavePropertyMutationResult = ApolloReactCommon.MutationResult<SavePropertyMutation>;\nexport type SavePropertyMutationOptions = ApolloReactCommon.BaseMutationOptions<SavePropertyMutation, SavePropertyMutationVariables>;\nexport const SaveRatingDocument = gql`\n    mutation saveRating($rating: RatingInput!) {\n  saveRating(rating: $rating)\n}\n    `;\nexport type SaveRatingMutationFn = ApolloReactCommon.MutationFunction<SaveRatingMutation, SaveRatingMutationVariables>;\n\n/**\n * __useSaveRatingMutation__\n *\n * To run a mutation, you first call `useSaveRatingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveRatingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveRatingMutation, { data, loading, error }] = useSaveRatingMutation({\n *   variables: {\n *      rating: // value for 'rating'\n *   },\n * });\n */\nexport function useSaveRatingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveRatingMutation, SaveRatingMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveRatingMutation, SaveRatingMutationVariables>(SaveRatingDocument, baseOptions);\n      }\nexport type SaveRatingMutationHookResult = ReturnType<typeof useSaveRatingMutation>;\nexport type SaveRatingMutationResult = ApolloReactCommon.MutationResult<SaveRatingMutation>;\nexport type SaveRatingMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveRatingMutation, SaveRatingMutationVariables>;\nexport const SaveSightDocument = gql`\n    mutation saveSight($sight: SightInput!) {\n  saveSight(sight: $sight)\n}\n    `;\nexport type SaveSightMutationFn = ApolloReactCommon.MutationFunction<SaveSightMutation, SaveSightMutationVariables>;\n\n/**\n * __useSaveSightMutation__\n *\n * To run a mutation, you first call `useSaveSightMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveSightMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveSightMutation, { data, loading, error }] = useSaveSightMutation({\n *   variables: {\n *      sight: // value for 'sight'\n *   },\n * });\n */\nexport function useSaveSightMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveSightMutation, SaveSightMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveSightMutation, SaveSightMutationVariables>(SaveSightDocument, baseOptions);\n      }\nexport type SaveSightMutationHookResult = ReturnType<typeof useSaveSightMutation>;\nexport type SaveSightMutationResult = ApolloReactCommon.MutationResult<SaveSightMutation>;\nexport type SaveSightMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveSightMutation, SaveSightMutationVariables>;\nexport const DeleteBookingDocument = gql`\n    mutation deleteBooking($bookingId: Float!) {\n  deleteBooking(bookingId: $bookingId)\n}\n    `;\nexport type DeleteBookingMutationFn = ApolloReactCommon.MutationFunction<DeleteBookingMutation, DeleteBookingMutationVariables>;\n\n/**\n * __useDeleteBookingMutation__\n *\n * To run a mutation, you first call `useDeleteBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookingMutation, { data, loading, error }] = useDeleteBookingMutation({\n *   variables: {\n *      bookingId: // value for 'bookingId'\n *   },\n * });\n */\nexport function useDeleteBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteBookingMutation, DeleteBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteBookingMutation, DeleteBookingMutationVariables>(DeleteBookingDocument, baseOptions);\n      }\nexport type DeleteBookingMutationHookResult = ReturnType<typeof useDeleteBookingMutation>;\nexport type DeleteBookingMutationResult = ApolloReactCommon.MutationResult<DeleteBookingMutation>;\nexport type DeleteBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteBookingMutation, DeleteBookingMutationVariables>;\nexport const AllBookingDocument = gql`\n    query allBooking {\n  allBooking {\n    id\n    from\n    to\n    deleted\n    propertyId\n  }\n}\n    `;\n\n/**\n * __useAllBookingQuery__\n *\n * To run a query within a React component, call `useAllBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllBookingQuery, AllBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllBookingQuery, AllBookingQueryVariables>(AllBookingDocument, baseOptions);\n      }\nexport function useAllBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllBookingQuery, AllBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllBookingQuery, AllBookingQueryVariables>(AllBookingDocument, baseOptions);\n        }\nexport type AllBookingQueryHookResult = ReturnType<typeof useAllBookingQuery>;\nexport type AllBookingLazyQueryHookResult = ReturnType<typeof useAllBookingLazyQuery>;\nexport type AllBookingQueryResult = ApolloReactCommon.QueryResult<AllBookingQuery, AllBookingQueryVariables>;\nexport const PropertiesDocument = gql`\n    query Properties {\n  allProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __usePropertiesQuery__\n *\n * To run a query within a React component, call `usePropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PropertiesQuery, PropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<PropertiesQuery, PropertiesQueryVariables>(PropertiesDocument, baseOptions);\n      }\nexport function usePropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PropertiesQuery, PropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PropertiesQuery, PropertiesQueryVariables>(PropertiesDocument, baseOptions);\n        }\nexport type PropertiesQueryHookResult = ReturnType<typeof usePropertiesQuery>;\nexport type PropertiesLazyQueryHookResult = ReturnType<typeof usePropertiesLazyQuery>;\nexport type PropertiesQueryResult = ApolloReactCommon.QueryResult<PropertiesQuery, PropertiesQueryVariables>;\nexport const AllRatingsDocument = gql`\n    query AllRatings {\n  getAllRatings {\n    id\n    targettype\n    targetId\n    comment\n    rating\n  }\n}\n    `;\n\n/**\n * __useAllRatingsQuery__\n *\n * To run a query within a React component, call `useAllRatingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllRatingsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllRatingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllRatingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllRatingsQuery, AllRatingsQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllRatingsQuery, AllRatingsQueryVariables>(AllRatingsDocument, baseOptions);\n      }\nexport function useAllRatingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllRatingsQuery, AllRatingsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllRatingsQuery, AllRatingsQueryVariables>(AllRatingsDocument, baseOptions);\n        }\nexport type AllRatingsQueryHookResult = ReturnType<typeof useAllRatingsQuery>;\nexport type AllRatingsLazyQueryHookResult = ReturnType<typeof useAllRatingsLazyQuery>;\nexport type AllRatingsQueryResult = ApolloReactCommon.QueryResult<AllRatingsQuery, AllRatingsQueryVariables>;\nexport const SightsDocument = gql`\n    query Sights {\n  getSights {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n\n/**\n * __useSightsQuery__\n *\n * To run a query within a React component, call `useSightsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSightsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSightsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSightsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SightsQuery, SightsQueryVariables>) {\n        return ApolloReactHooks.useQuery<SightsQuery, SightsQueryVariables>(SightsDocument, baseOptions);\n      }\nexport function useSightsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SightsQuery, SightsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SightsQuery, SightsQueryVariables>(SightsDocument, baseOptions);\n        }\nexport type SightsQueryHookResult = ReturnType<typeof useSightsQuery>;\nexport type SightsLazyQueryHookResult = ReturnType<typeof useSightsLazyQuery>;\nexport type SightsQueryResult = ApolloReactCommon.QueryResult<SightsQuery, SightsQueryVariables>;\nexport const BlockedDatesByPropertyDocument = gql`\n    query blockedDatesByProperty($propertyId: Float!) {\n  getBlockedDatesFromProperty(propertyId: $propertyId) {\n    bookingId\n    dateTimeStamp\n    type\n  }\n}\n    `;\n\n/**\n * __useBlockedDatesByPropertyQuery__\n *\n * To run a query within a React component, call `useBlockedDatesByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockedDatesByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockedDatesByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useBlockedDatesByPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>(BlockedDatesByPropertyDocument, baseOptions);\n      }\nexport function useBlockedDatesByPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>(BlockedDatesByPropertyDocument, baseOptions);\n        }\nexport type BlockedDatesByPropertyQueryHookResult = ReturnType<typeof useBlockedDatesByPropertyQuery>;\nexport type BlockedDatesByPropertyLazyQueryHookResult = ReturnType<typeof useBlockedDatesByPropertyLazyQuery>;\nexport type BlockedDatesByPropertyQueryResult = ApolloReactCommon.QueryResult<BlockedDatesByPropertyQuery, BlockedDatesByPropertyQueryVariables>;\nexport const MyBookingDocument = gql`\n    query MyBooking {\n  myBooking {\n    id\n    from\n    to\n    property {\n      id\n      title\n      location\n      long\n      lat\n      images\n      beds_adult\n      beds_kids\n      beds_tent\n      subtext\n    }\n  }\n}\n    `;\n\n/**\n * __useMyBookingQuery__\n *\n * To run a query within a React component, call `useMyBookingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyBookingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyBookingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyBookingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n        return ApolloReactHooks.useQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n      }\nexport function useMyBookingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyBookingQuery, MyBookingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MyBookingQuery, MyBookingQueryVariables>(MyBookingDocument, baseOptions);\n        }\nexport type MyBookingQueryHookResult = ReturnType<typeof useMyBookingQuery>;\nexport type MyBookingLazyQueryHookResult = ReturnType<typeof useMyBookingLazyQuery>;\nexport type MyBookingQueryResult = ApolloReactCommon.QueryResult<MyBookingQuery, MyBookingQueryVariables>;\nexport const BookingsByPropertyDocument = gql`\n    query BookingsByProperty($propertyId: Float!) {\n  activeBookingsForProperty(propertyId: $propertyId) {\n    propertyId\n    to\n    from\n  }\n}\n    `;\n\n/**\n * __useBookingsByPropertyQuery__\n *\n * To run a query within a React component, call `useBookingsByPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookingsByPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookingsByPropertyQuery({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *   },\n * });\n */\nexport function useBookingsByPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>(BookingsByPropertyDocument, baseOptions);\n      }\nexport function useBookingsByPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>(BookingsByPropertyDocument, baseOptions);\n        }\nexport type BookingsByPropertyQueryHookResult = ReturnType<typeof useBookingsByPropertyQuery>;\nexport type BookingsByPropertyLazyQueryHookResult = ReturnType<typeof useBookingsByPropertyLazyQuery>;\nexport type BookingsByPropertyQueryResult = ApolloReactCommon.QueryResult<BookingsByPropertyQuery, BookingsByPropertyQueryVariables>;\nexport const TeaserPropertiesDocument = gql`\n    query TeaserProperties {\n  teaserProperties {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useTeaserPropertiesQuery__\n *\n * To run a query within a React component, call `useTeaserPropertiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeaserPropertiesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeaserPropertiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTeaserPropertiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>(TeaserPropertiesDocument, baseOptions);\n      }\nexport function useTeaserPropertiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>(TeaserPropertiesDocument, baseOptions);\n        }\nexport type TeaserPropertiesQueryHookResult = ReturnType<typeof useTeaserPropertiesQuery>;\nexport type TeaserPropertiesLazyQueryHookResult = ReturnType<typeof useTeaserPropertiesLazyQuery>;\nexport type TeaserPropertiesQueryResult = ApolloReactCommon.QueryResult<TeaserPropertiesQuery, TeaserPropertiesQueryVariables>;\nexport const GetPropertyDocument = gql`\n    query getProperty($id: Float!) {\n  getProperty(id: $id) {\n    id\n    title\n    subtext\n    location\n    long\n    lat\n    beds_adult\n    beds_kids\n    beds_tent\n    images\n  }\n}\n    `;\n\n/**\n * __useGetPropertyQuery__\n *\n * To run a query within a React component, call `useGetPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPropertyQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetPropertyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyQuery, GetPropertyQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetPropertyQuery, GetPropertyQueryVariables>(GetPropertyDocument, baseOptions);\n      }\nexport function useGetPropertyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyQuery, GetPropertyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetPropertyQuery, GetPropertyQueryVariables>(GetPropertyDocument, baseOptions);\n        }\nexport type GetPropertyQueryHookResult = ReturnType<typeof useGetPropertyQuery>;\nexport type GetPropertyLazyQueryHookResult = ReturnType<typeof useGetPropertyLazyQuery>;\nexport type GetPropertyQueryResult = ApolloReactCommon.QueryResult<GetPropertyQuery, GetPropertyQueryVariables>;\nexport const GetRatingDocument = gql`\n    query getRating($id: Float!) {\n  getRating(id: $id) {\n    id\n    targettype\n    targetId\n    comment\n    rating\n    title\n    userId\n  }\n}\n    `;\n\n/**\n * __useGetRatingQuery__\n *\n * To run a query within a React component, call `useGetRatingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetRatingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRatingQuery, GetRatingQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetRatingQuery, GetRatingQueryVariables>(GetRatingDocument, baseOptions);\n      }\nexport function useGetRatingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRatingQuery, GetRatingQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetRatingQuery, GetRatingQueryVariables>(GetRatingDocument, baseOptions);\n        }\nexport type GetRatingQueryHookResult = ReturnType<typeof useGetRatingQuery>;\nexport type GetRatingLazyQueryHookResult = ReturnType<typeof useGetRatingLazyQuery>;\nexport type GetRatingQueryResult = ApolloReactCommon.QueryResult<GetRatingQuery, GetRatingQueryVariables>;\nexport const GetRatingValuesByTargetDocument = gql`\n    query getRatingValuesByTarget($targettype: String!, $targetId: Float!) {\n  getRatingValuesByTarget(targettype: $targettype, targetId: $targetId) {\n    targetId\n    targettype\n    ratings\n    ratingValue\n  }\n}\n    `;\n\n/**\n * __useGetRatingValuesByTargetQuery__\n *\n * To run a query within a React component, call `useGetRatingValuesByTargetQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRatingValuesByTargetQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRatingValuesByTargetQuery({\n *   variables: {\n *      targettype: // value for 'targettype'\n *      targetId: // value for 'targetId'\n *   },\n * });\n */\nexport function useGetRatingValuesByTargetQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>(GetRatingValuesByTargetDocument, baseOptions);\n      }\nexport function useGetRatingValuesByTargetLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>(GetRatingValuesByTargetDocument, baseOptions);\n        }\nexport type GetRatingValuesByTargetQueryHookResult = ReturnType<typeof useGetRatingValuesByTargetQuery>;\nexport type GetRatingValuesByTargetLazyQueryHookResult = ReturnType<typeof useGetRatingValuesByTargetLazyQuery>;\nexport type GetRatingValuesByTargetQueryResult = ApolloReactCommon.QueryResult<GetRatingValuesByTargetQuery, GetRatingValuesByTargetQueryVariables>;\nexport const GetSightDocument = gql`\n    query getSight($id: Float!) {\n  getSight(id: $id) {\n    id\n    title\n    type\n    subtext\n    location\n    long\n    lat\n    images\n  }\n}\n    `;\n\n/**\n * __useGetSightQuery__\n *\n * To run a query within a React component, call `useGetSightQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSightQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSightQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetSightQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSightQuery, GetSightQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetSightQuery, GetSightQueryVariables>(GetSightDocument, baseOptions);\n      }\nexport function useGetSightLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSightQuery, GetSightQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetSightQuery, GetSightQueryVariables>(GetSightDocument, baseOptions);\n        }\nexport type GetSightQueryHookResult = ReturnType<typeof useGetSightQuery>;\nexport type GetSightLazyQueryHookResult = ReturnType<typeof useGetSightLazyQuery>;\nexport type GetSightQueryResult = ApolloReactCommon.QueryResult<GetSightQuery, GetSightQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    email\n    id\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = ApolloReactCommon.QueryResult<UsersQuery, UsersQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($username: String!, $email: String!, $password: String!) {\n  register(username: $username, email: $email, password: $password)\n}\n    `;\nexport type RegisterMutationFn = ApolloReactCommon.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      username: // value for 'username'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = ApolloReactCommon.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = ApolloReactCommon.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;"]},"metadata":{},"sourceType":"module"}