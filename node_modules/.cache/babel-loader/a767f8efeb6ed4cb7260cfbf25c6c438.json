{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/products/PropertyEditor.tsx\";\nimport React, { useState } from 'react';\nimport { useGetProductQuery, useUpdateProductMutation, useCreateProductQuery } from '../../../generated/graphql';\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct } from './ProductObject';\nexport const ProductEditor = props => {\n  const {\n    id\n  } = useParams();\n  const [showMessage, setshowMessage] = useState(false);\n  var product = undefined;\n\n  if (id == \"new\") {\n    const {\n      data,\n      error\n    } = useCreateProductQuery();\n\n    if (data) {\n      product = data.getNewProduct;\n    }\n  } else {\n    const {\n      data,\n      error\n    } = useGetProductQuery({\n      variables: {\n        id: id ? id : \"\"\n      }\n    });\n\n    if (data) {\n      product = data.getProduct;\n    }\n  }\n\n  const [updateProduct] = useUpdateProductMutation();\n\n  async function onSubmit(values) {\n    var result = await updateProduct({\n      variables: {\n        product: formatProduct(values)\n      }\n    });\n\n    if (result) {\n      setshowMessage(true); // history.push(\"/admin#/properties\")\n    }\n  }\n\n  if (data && data.getProduct) {\n    var product = data.getProduct;\n    return React.createElement(Editor, {\n      entity: product,\n      store: onSubmit,\n      entityId: product.id,\n      imageuploadurl: \"http://localhost:4000/upload/property/image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(MessageView, {\n      severity: \"success\",\n      message: \"Die Daten wurden gespeichert\",\n      show: showMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n  if (error) {\n    return React.createElement(ErrorMessage, {\n      error: error,\n      show: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(LoadingAnimation, {\n    message: \"Daten werden geladen ...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/products/PropertyEditor.tsx"],"names":["React","useState","useGetProductQuery","useUpdateProductMutation","useCreateProductQuery","useParams","Editor","MessageView","LoadingAnimation","ErrorMessage","formatProduct","ProductEditor","props","id","showMessage","setshowMessage","product","undefined","data","error","getNewProduct","variables","getProduct","updateProduct","onSubmit","values","result"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,kBAAT,EAAsCC,wBAAtC,EAAgEC,qBAAhE,QAA4F,4BAA5F;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,QAA4B,6CAA5B;AACA,SAASC,gBAAT,QAAiC,kDAAjC;AACA,SAASC,YAAT,QAA6B,8CAA7B;AACA,SAASC,aAAT,QAA0C,iBAA1C;AAOA,OAAO,MAAMC,aAA8B,GAAIC,KAAD,IAAW;AAErD,QAAM;AAAEC,IAAAA;AAAF,MAASR,SAAS,EAAxB;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,KAAD,CAA9C;AAEA,MAAIe,OAA4B,GAAGC,SAAnC;;AAEA,MAAGJ,EAAE,IAAI,KAAT,EAAe;AACX,UAAM;AAACK,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBf,qBAAqB,EAA3C;;AACA,QAAGc,IAAH,EAAQ;AACJF,MAAAA,OAAO,GAAGE,IAAI,CAACE,aAAf;AACH;AACJ,GALD,MAKO;AACH,UAAM;AAACF,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBjB,kBAAkB,CAAC;AACrCmB,MAAAA,SAAS,EAAE;AACPR,QAAAA,EAAE,EAAEA,EAAE,GAAGA,EAAH,GAAQ;AADP;AAD0B,KAAD,CAAxC;;AAKA,QAAGK,IAAH,EAAQ;AACJF,MAAAA,OAAO,GAAGE,IAAI,CAACI,UAAf;AACH;AACJ;;AAED,QAAM,CAACC,aAAD,IAAkBpB,wBAAwB,EAAhD;;AAEA,iBAAeqB,QAAf,CAAwBC,MAAxB,EAAyC;AACrC,QAAIC,MAAM,GAAG,MAAMH,aAAa,CAAC;AAC7BF,MAAAA,SAAS,EAAE;AACPL,QAAAA,OAAO,EAAEN,aAAa,CAACe,MAAD;AADf;AADkB,KAAD,CAAhC;;AAKA,QAAGC,MAAH,EAAU;AACNX,MAAAA,cAAc,CAAC,IAAD,CAAd,CADM,CAEN;AACH;AACJ;;AAGD,MAAGG,IAAI,IAAIA,IAAI,CAACI,UAAhB,EAA4B;AACxB,QAAIN,OAAO,GAAGE,IAAI,CAACI,UAAnB;AACA,WACI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAEN,OADZ;AAEI,MAAA,KAAK,EAAEQ,QAFX;AAGI,MAAA,QAAQ,EAAER,OAAO,CAACH,EAHtB;AAII,MAAA,cAAc,EAAE,6CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,SAAvB;AAAkC,MAAA,OAAO,EAAE,8BAA3C;AAA2E,MAAA,IAAI,EAAEC,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAGD,MAAGK,KAAH,EAAS;AACL,WAAQ,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAArB;AAA4B,MAAA,IAAI,EAAE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAED,SAAQ,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CAzDM","sourcesContent":["import React, { useState } from 'react'\nimport { useGetProductQuery, Product, useUpdateProductMutation, useCreateProductQuery} from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct, newProduct } from './ProductObject';\n\n\ninterface Props {\n    \n}\n\nexport const ProductEditor: React.FC<Props> = (props) => {\n\n    const { id } = useParams()\n    const [showMessage, setshowMessage] = useState(false);\n\n    var product: Product | undefined = undefined;\n\n    if(id == \"new\"){\n        const {data, error} = useCreateProductQuery();\n        if(data){\n            product = data.getNewProduct\n        } \n    } else {\n        const {data, error} = useGetProductQuery({\n            variables: {\n                id: id ? id : \"\"\n            }\n        });\n        if(data){\n            product = data.getProduct\n        } \n    }\n    \n    const [updateProduct] = useUpdateProductMutation();\n\n    async function onSubmit(values: Product) {     \n        var result = await updateProduct({\n            variables: {\n                product: formatProduct(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n            // history.push(\"/admin#/properties\")\n        }\n    }\n\n    \n    if(data && data.getProduct) {\n        var product = data.getProduct;      \n        return(\n            <Editor \n                entity={product} \n                store={onSubmit} \n                entityId={product.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}