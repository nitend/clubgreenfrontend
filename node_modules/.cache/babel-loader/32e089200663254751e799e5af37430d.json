{"ast":null,"code":"var _jsxFileName = \"/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/products/EditProperty.tsx\";\nimport React, { useState } from 'react';\nimport { useGetProductQuery, useUpdateProductMutation } from '../../../generated/graphql';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct } from './ProductObject';\nexport const EditProperty = props => {\n  const [showMessage, setshowMessage] = useState(false);\n  const {\n    data,\n    error\n  } = useGetProductQuery({\n    variables: {\n      id: props.id\n    }\n  });\n  const [updateProduct] = useUpdateProductMutation();\n\n  async function onSubmit(values) {\n    var result = await updateProduct({\n      variables: {\n        product: formatProduct(values)\n      }\n    });\n\n    if (result) {\n      setshowMessage(true); // history.push(\"/admin#/properties\")\n    }\n  }\n\n  if (data && data.getProduct) {\n    const product = data.getProduct;\n    return React.createElement(Editor, {\n      entity: product,\n      store: onSubmit,\n      entityId: product.id,\n      imageuploadurl: \"http://localhost:4000/upload/property/image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(MessageView, {\n      severity: \"success\",\n      message: \"Die Daten wurden gespeichert\",\n      show: showMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n\n  if (error) {\n    return React.createElement(ErrorMessage, {\n      error: error,\n      show: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(LoadingAnimation, {\n    message: \"Daten werden geladen ...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/SvenL/Projekte/node_projects/clubgruen/frontend/src/pages/admin/products/EditProperty.tsx"],"names":["React","useState","useGetProductQuery","useUpdateProductMutation","Editor","MessageView","LoadingAnimation","ErrorMessage","formatProduct","EditProperty","props","showMessage","setshowMessage","data","error","variables","id","updateProduct","onSubmit","values","result","product","getProduct"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,kBAAT,EAAsCC,wBAAtC,QAA4F,4BAA5F;AAEA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,QAA4B,6CAA5B;AACA,SAASC,gBAAT,QAAiC,kDAAjC;AACA,SAASC,YAAT,QAA6B,8CAA7B;AACA,SAASC,aAAT,QAA0C,iBAA1C;AAOA,OAAO,MAAMC,YAA6B,GAAIC,KAAD,IAAW;AAEpD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,KAAD,CAA9C;AAEI,QAAM;AAACY,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAgBZ,kBAAkB,CAAC;AACrCa,IAAAA,SAAS,EAAE;AACPC,MAAAA,EAAE,EAAEN,KAAK,CAACM;AADH;AAD0B,GAAD,CAAxC;AAOJ,QAAM,CAACC,aAAD,IAAkBd,wBAAwB,EAAhD;;AAEA,iBAAee,QAAf,CAAwBC,MAAxB,EAAyC;AACrC,QAAIC,MAAM,GAAG,MAAMH,aAAa,CAAC;AAC7BF,MAAAA,SAAS,EAAE;AACPM,QAAAA,OAAO,EAAEb,aAAa,CAACW,MAAD;AADf;AADkB,KAAD,CAAhC;;AAKA,QAAGC,MAAH,EAAU;AACNR,MAAAA,cAAc,CAAC,IAAD,CAAd,CADM,CAEN;AACH;AACJ;;AAGD,MAAGC,IAAI,IAAIA,IAAI,CAACS,UAAhB,EAA4B;AACxB,UAAMD,OAAO,GAAGR,IAAI,CAACS,UAArB;AACA,WACI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAED,OADZ;AAEI,MAAA,KAAK,EAAEH,QAFX;AAGI,MAAA,QAAQ,EAAEG,OAAO,CAACL,EAHtB;AAII,MAAA,cAAc,EAAE,6CAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAE,SAAvB;AAAkC,MAAA,OAAO,EAAE,8BAA3C;AAA2E,MAAA,IAAI,EAAEL,WAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAGD,MAAGG,KAAH,EAAS;AACL,WAAQ,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAArB;AAA4B,MAAA,IAAI,EAAE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAED,SAAQ,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,0BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AACH,CA7CM","sourcesContent":["import React, { useState } from 'react'\nimport { useGetProductQuery, Product, useUpdateProductMutation, useCreateProductQuery} from '../../../generated/graphql'\nimport { useParams } from 'react-router-dom';\nimport { Editor } from '../form/Editor';\nimport { MessageView } from '../../pageframe/global/Messages/MessageView';\nimport { LoadingAnimation } from '../../pageframe/global/Messages/LoadingAnimation';\nimport { ErrorMessage } from '../../pageframe/global/Messages/ErrorMessage';\nimport { formatProduct, newProduct } from './ProductObject';\n\n\ninterface Props {\n    id: string\n}\n\nexport const EditProperty: React.FC<Props> = (props) => {\n\n    const [showMessage, setshowMessage] = useState(false);\n    \n        const {data, error} = useGetProductQuery({\n            variables: {\n                id: props.id\n            }\n        });\n        \n    \n    const [updateProduct] = useUpdateProductMutation();\n\n    async function onSubmit(values: Product) {     \n        var result = await updateProduct({\n            variables: {\n                product: formatProduct(values)\n            }\n        });\n        if(result){\n            setshowMessage(true)\n            // history.push(\"/admin#/properties\")\n        }\n    }\n\n    \n    if(data && data.getProduct) { \n        const product = data.getProduct;    \n        return(\n            <Editor \n                entity={product} \n                store={onSubmit} \n                entityId={product.id}\n                imageuploadurl={\"http://localhost:4000/upload/property/image\"}>     \n                <MessageView severity={\"success\"} message={\"Die Daten wurden gespeichert\"} show={showMessage} />\n            </Editor>\n        )   \n    }\n\n\n    if(error){\n        return (<ErrorMessage error={error} show={true}/>) \n    }\n   \n    return (<LoadingAnimation message={\"Daten werden geladen ...\"}/>)\n}"]},"metadata":{},"sourceType":"module"}